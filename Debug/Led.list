
Led.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009ee4  080001c8  080001c8  000101c8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001ffc  0800a0ac  0800a0ac  0001a0ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800c0a8  0800c0a8  0001c0a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800c0b0  0800c0b0  0001c0b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0800c0b4  0800c0b4  0001c0b4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         0002c988  20000000  0800c0b8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000618  2002c988  08038a40  0004c988  2**2
                  ALLOC
  8 ._user_heap_stack 00000c00  2002cfa0  08038a40  0004cfa0  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  0004c988  2**0
                  CONTENTS, READONLY
 10 .debug_info   000280f3  00000000  00000000  0004c9b8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 00004379  00000000  00000000  00074aab  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00001868  00000000  00000000  00078e28  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 000016b0  00000000  00000000  0007a690  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   0000ba62  00000000  00000000  0007bd40  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    00007bb8  00000000  00000000  000877a2  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      0000007c  00000000  00000000  0008f35a  2**0
                  CONTENTS, READONLY
 17 .debug_frame  000067dc  00000000  00000000  0008f3d8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001c8 <__do_global_dtors_aux>:
 80001c8:	b510      	push	{r4, lr}
 80001ca:	4c05      	ldr	r4, [pc, #20]	; (80001e0 <__do_global_dtors_aux+0x18>)
 80001cc:	7823      	ldrb	r3, [r4, #0]
 80001ce:	b933      	cbnz	r3, 80001de <__do_global_dtors_aux+0x16>
 80001d0:	4b04      	ldr	r3, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x1c>)
 80001d2:	b113      	cbz	r3, 80001da <__do_global_dtors_aux+0x12>
 80001d4:	4804      	ldr	r0, [pc, #16]	; (80001e8 <__do_global_dtors_aux+0x20>)
 80001d6:	f3af 8000 	nop.w
 80001da:	2301      	movs	r3, #1
 80001dc:	7023      	strb	r3, [r4, #0]
 80001de:	bd10      	pop	{r4, pc}
 80001e0:	2002c988 	.word	0x2002c988
 80001e4:	00000000 	.word	0x00000000
 80001e8:	0800a094 	.word	0x0800a094

080001ec <frame_dummy>:
 80001ec:	b508      	push	{r3, lr}
 80001ee:	4b03      	ldr	r3, [pc, #12]	; (80001fc <frame_dummy+0x10>)
 80001f0:	b11b      	cbz	r3, 80001fa <frame_dummy+0xe>
 80001f2:	4903      	ldr	r1, [pc, #12]	; (8000200 <frame_dummy+0x14>)
 80001f4:	4803      	ldr	r0, [pc, #12]	; (8000204 <frame_dummy+0x18>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	bd08      	pop	{r3, pc}
 80001fc:	00000000 	.word	0x00000000
 8000200:	2002c98c 	.word	0x2002c98c
 8000204:	0800a094 	.word	0x0800a094

08000208 <__aeabi_drsub>:
 8000208:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 800020c:	e002      	b.n	8000214 <__adddf3>
 800020e:	bf00      	nop

08000210 <__aeabi_dsub>:
 8000210:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000214 <__adddf3>:
 8000214:	b530      	push	{r4, r5, lr}
 8000216:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800021a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800021e:	ea94 0f05 	teq	r4, r5
 8000222:	bf08      	it	eq
 8000224:	ea90 0f02 	teqeq	r0, r2
 8000228:	bf1f      	itttt	ne
 800022a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800022e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000232:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000236:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800023a:	f000 80e2 	beq.w	8000402 <__adddf3+0x1ee>
 800023e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000242:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000246:	bfb8      	it	lt
 8000248:	426d      	neglt	r5, r5
 800024a:	dd0c      	ble.n	8000266 <__adddf3+0x52>
 800024c:	442c      	add	r4, r5
 800024e:	ea80 0202 	eor.w	r2, r0, r2
 8000252:	ea81 0303 	eor.w	r3, r1, r3
 8000256:	ea82 0000 	eor.w	r0, r2, r0
 800025a:	ea83 0101 	eor.w	r1, r3, r1
 800025e:	ea80 0202 	eor.w	r2, r0, r2
 8000262:	ea81 0303 	eor.w	r3, r1, r3
 8000266:	2d36      	cmp	r5, #54	; 0x36
 8000268:	bf88      	it	hi
 800026a:	bd30      	pophi	{r4, r5, pc}
 800026c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000270:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000274:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000278:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800027c:	d002      	beq.n	8000284 <__adddf3+0x70>
 800027e:	4240      	negs	r0, r0
 8000280:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000284:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000288:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800028c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000290:	d002      	beq.n	8000298 <__adddf3+0x84>
 8000292:	4252      	negs	r2, r2
 8000294:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000298:	ea94 0f05 	teq	r4, r5
 800029c:	f000 80a7 	beq.w	80003ee <__adddf3+0x1da>
 80002a0:	f1a4 0401 	sub.w	r4, r4, #1
 80002a4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002a8:	db0d      	blt.n	80002c6 <__adddf3+0xb2>
 80002aa:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002ae:	fa22 f205 	lsr.w	r2, r2, r5
 80002b2:	1880      	adds	r0, r0, r2
 80002b4:	f141 0100 	adc.w	r1, r1, #0
 80002b8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002bc:	1880      	adds	r0, r0, r2
 80002be:	fa43 f305 	asr.w	r3, r3, r5
 80002c2:	4159      	adcs	r1, r3
 80002c4:	e00e      	b.n	80002e4 <__adddf3+0xd0>
 80002c6:	f1a5 0520 	sub.w	r5, r5, #32
 80002ca:	f10e 0e20 	add.w	lr, lr, #32
 80002ce:	2a01      	cmp	r2, #1
 80002d0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002d4:	bf28      	it	cs
 80002d6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002da:	fa43 f305 	asr.w	r3, r3, r5
 80002de:	18c0      	adds	r0, r0, r3
 80002e0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002e4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002e8:	d507      	bpl.n	80002fa <__adddf3+0xe6>
 80002ea:	f04f 0e00 	mov.w	lr, #0
 80002ee:	f1dc 0c00 	rsbs	ip, ip, #0
 80002f2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002f6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002fa:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002fe:	d31b      	bcc.n	8000338 <__adddf3+0x124>
 8000300:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000304:	d30c      	bcc.n	8000320 <__adddf3+0x10c>
 8000306:	0849      	lsrs	r1, r1, #1
 8000308:	ea5f 0030 	movs.w	r0, r0, rrx
 800030c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000310:	f104 0401 	add.w	r4, r4, #1
 8000314:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000318:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 800031c:	f080 809a 	bcs.w	8000454 <__adddf3+0x240>
 8000320:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000324:	bf08      	it	eq
 8000326:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800032a:	f150 0000 	adcs.w	r0, r0, #0
 800032e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000332:	ea41 0105 	orr.w	r1, r1, r5
 8000336:	bd30      	pop	{r4, r5, pc}
 8000338:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800033c:	4140      	adcs	r0, r0
 800033e:	eb41 0101 	adc.w	r1, r1, r1
 8000342:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000346:	f1a4 0401 	sub.w	r4, r4, #1
 800034a:	d1e9      	bne.n	8000320 <__adddf3+0x10c>
 800034c:	f091 0f00 	teq	r1, #0
 8000350:	bf04      	itt	eq
 8000352:	4601      	moveq	r1, r0
 8000354:	2000      	moveq	r0, #0
 8000356:	fab1 f381 	clz	r3, r1
 800035a:	bf08      	it	eq
 800035c:	3320      	addeq	r3, #32
 800035e:	f1a3 030b 	sub.w	r3, r3, #11
 8000362:	f1b3 0220 	subs.w	r2, r3, #32
 8000366:	da0c      	bge.n	8000382 <__adddf3+0x16e>
 8000368:	320c      	adds	r2, #12
 800036a:	dd08      	ble.n	800037e <__adddf3+0x16a>
 800036c:	f102 0c14 	add.w	ip, r2, #20
 8000370:	f1c2 020c 	rsb	r2, r2, #12
 8000374:	fa01 f00c 	lsl.w	r0, r1, ip
 8000378:	fa21 f102 	lsr.w	r1, r1, r2
 800037c:	e00c      	b.n	8000398 <__adddf3+0x184>
 800037e:	f102 0214 	add.w	r2, r2, #20
 8000382:	bfd8      	it	le
 8000384:	f1c2 0c20 	rsble	ip, r2, #32
 8000388:	fa01 f102 	lsl.w	r1, r1, r2
 800038c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000390:	bfdc      	itt	le
 8000392:	ea41 010c 	orrle.w	r1, r1, ip
 8000396:	4090      	lslle	r0, r2
 8000398:	1ae4      	subs	r4, r4, r3
 800039a:	bfa2      	ittt	ge
 800039c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003a0:	4329      	orrge	r1, r5
 80003a2:	bd30      	popge	{r4, r5, pc}
 80003a4:	ea6f 0404 	mvn.w	r4, r4
 80003a8:	3c1f      	subs	r4, #31
 80003aa:	da1c      	bge.n	80003e6 <__adddf3+0x1d2>
 80003ac:	340c      	adds	r4, #12
 80003ae:	dc0e      	bgt.n	80003ce <__adddf3+0x1ba>
 80003b0:	f104 0414 	add.w	r4, r4, #20
 80003b4:	f1c4 0220 	rsb	r2, r4, #32
 80003b8:	fa20 f004 	lsr.w	r0, r0, r4
 80003bc:	fa01 f302 	lsl.w	r3, r1, r2
 80003c0:	ea40 0003 	orr.w	r0, r0, r3
 80003c4:	fa21 f304 	lsr.w	r3, r1, r4
 80003c8:	ea45 0103 	orr.w	r1, r5, r3
 80003cc:	bd30      	pop	{r4, r5, pc}
 80003ce:	f1c4 040c 	rsb	r4, r4, #12
 80003d2:	f1c4 0220 	rsb	r2, r4, #32
 80003d6:	fa20 f002 	lsr.w	r0, r0, r2
 80003da:	fa01 f304 	lsl.w	r3, r1, r4
 80003de:	ea40 0003 	orr.w	r0, r0, r3
 80003e2:	4629      	mov	r1, r5
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ea:	4629      	mov	r1, r5
 80003ec:	bd30      	pop	{r4, r5, pc}
 80003ee:	f094 0f00 	teq	r4, #0
 80003f2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003f6:	bf06      	itte	eq
 80003f8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003fc:	3401      	addeq	r4, #1
 80003fe:	3d01      	subne	r5, #1
 8000400:	e74e      	b.n	80002a0 <__adddf3+0x8c>
 8000402:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000406:	bf18      	it	ne
 8000408:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800040c:	d029      	beq.n	8000462 <__adddf3+0x24e>
 800040e:	ea94 0f05 	teq	r4, r5
 8000412:	bf08      	it	eq
 8000414:	ea90 0f02 	teqeq	r0, r2
 8000418:	d005      	beq.n	8000426 <__adddf3+0x212>
 800041a:	ea54 0c00 	orrs.w	ip, r4, r0
 800041e:	bf04      	itt	eq
 8000420:	4619      	moveq	r1, r3
 8000422:	4610      	moveq	r0, r2
 8000424:	bd30      	pop	{r4, r5, pc}
 8000426:	ea91 0f03 	teq	r1, r3
 800042a:	bf1e      	ittt	ne
 800042c:	2100      	movne	r1, #0
 800042e:	2000      	movne	r0, #0
 8000430:	bd30      	popne	{r4, r5, pc}
 8000432:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000436:	d105      	bne.n	8000444 <__adddf3+0x230>
 8000438:	0040      	lsls	r0, r0, #1
 800043a:	4149      	adcs	r1, r1
 800043c:	bf28      	it	cs
 800043e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000442:	bd30      	pop	{r4, r5, pc}
 8000444:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000448:	bf3c      	itt	cc
 800044a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800044e:	bd30      	popcc	{r4, r5, pc}
 8000450:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000454:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000458:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800045c:	f04f 0000 	mov.w	r0, #0
 8000460:	bd30      	pop	{r4, r5, pc}
 8000462:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000466:	bf1a      	itte	ne
 8000468:	4619      	movne	r1, r3
 800046a:	4610      	movne	r0, r2
 800046c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000470:	bf1c      	itt	ne
 8000472:	460b      	movne	r3, r1
 8000474:	4602      	movne	r2, r0
 8000476:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800047a:	bf06      	itte	eq
 800047c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000480:	ea91 0f03 	teqeq	r1, r3
 8000484:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000488:	bd30      	pop	{r4, r5, pc}
 800048a:	bf00      	nop

0800048c <__aeabi_ui2d>:
 800048c:	f090 0f00 	teq	r0, #0
 8000490:	bf04      	itt	eq
 8000492:	2100      	moveq	r1, #0
 8000494:	4770      	bxeq	lr
 8000496:	b530      	push	{r4, r5, lr}
 8000498:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800049c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004a0:	f04f 0500 	mov.w	r5, #0
 80004a4:	f04f 0100 	mov.w	r1, #0
 80004a8:	e750      	b.n	800034c <__adddf3+0x138>
 80004aa:	bf00      	nop

080004ac <__aeabi_i2d>:
 80004ac:	f090 0f00 	teq	r0, #0
 80004b0:	bf04      	itt	eq
 80004b2:	2100      	moveq	r1, #0
 80004b4:	4770      	bxeq	lr
 80004b6:	b530      	push	{r4, r5, lr}
 80004b8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004bc:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004c0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004c4:	bf48      	it	mi
 80004c6:	4240      	negmi	r0, r0
 80004c8:	f04f 0100 	mov.w	r1, #0
 80004cc:	e73e      	b.n	800034c <__adddf3+0x138>
 80004ce:	bf00      	nop

080004d0 <__aeabi_f2d>:
 80004d0:	0042      	lsls	r2, r0, #1
 80004d2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004d6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004da:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004de:	bf1f      	itttt	ne
 80004e0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004e4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004e8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004ec:	4770      	bxne	lr
 80004ee:	f092 0f00 	teq	r2, #0
 80004f2:	bf14      	ite	ne
 80004f4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004f8:	4770      	bxeq	lr
 80004fa:	b530      	push	{r4, r5, lr}
 80004fc:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000500:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000504:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000508:	e720      	b.n	800034c <__adddf3+0x138>
 800050a:	bf00      	nop

0800050c <__aeabi_ul2d>:
 800050c:	ea50 0201 	orrs.w	r2, r0, r1
 8000510:	bf08      	it	eq
 8000512:	4770      	bxeq	lr
 8000514:	b530      	push	{r4, r5, lr}
 8000516:	f04f 0500 	mov.w	r5, #0
 800051a:	e00a      	b.n	8000532 <__aeabi_l2d+0x16>

0800051c <__aeabi_l2d>:
 800051c:	ea50 0201 	orrs.w	r2, r0, r1
 8000520:	bf08      	it	eq
 8000522:	4770      	bxeq	lr
 8000524:	b530      	push	{r4, r5, lr}
 8000526:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800052a:	d502      	bpl.n	8000532 <__aeabi_l2d+0x16>
 800052c:	4240      	negs	r0, r0
 800052e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000532:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000536:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800053a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800053e:	f43f aedc 	beq.w	80002fa <__adddf3+0xe6>
 8000542:	f04f 0203 	mov.w	r2, #3
 8000546:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800054a:	bf18      	it	ne
 800054c:	3203      	addne	r2, #3
 800054e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000552:	bf18      	it	ne
 8000554:	3203      	addne	r2, #3
 8000556:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800055a:	f1c2 0320 	rsb	r3, r2, #32
 800055e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000562:	fa20 f002 	lsr.w	r0, r0, r2
 8000566:	fa01 fe03 	lsl.w	lr, r1, r3
 800056a:	ea40 000e 	orr.w	r0, r0, lr
 800056e:	fa21 f102 	lsr.w	r1, r1, r2
 8000572:	4414      	add	r4, r2
 8000574:	e6c1      	b.n	80002fa <__adddf3+0xe6>
 8000576:	bf00      	nop

08000578 <__aeabi_dmul>:
 8000578:	b570      	push	{r4, r5, r6, lr}
 800057a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800057e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000582:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000586:	bf1d      	ittte	ne
 8000588:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800058c:	ea94 0f0c 	teqne	r4, ip
 8000590:	ea95 0f0c 	teqne	r5, ip
 8000594:	f000 f8de 	bleq	8000754 <__aeabi_dmul+0x1dc>
 8000598:	442c      	add	r4, r5
 800059a:	ea81 0603 	eor.w	r6, r1, r3
 800059e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005a2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005a6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005aa:	bf18      	it	ne
 80005ac:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005b0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005b8:	d038      	beq.n	800062c <__aeabi_dmul+0xb4>
 80005ba:	fba0 ce02 	umull	ip, lr, r0, r2
 80005be:	f04f 0500 	mov.w	r5, #0
 80005c2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005c6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005ca:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005ce:	f04f 0600 	mov.w	r6, #0
 80005d2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005d6:	f09c 0f00 	teq	ip, #0
 80005da:	bf18      	it	ne
 80005dc:	f04e 0e01 	orrne.w	lr, lr, #1
 80005e0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005e4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005e8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005ec:	d204      	bcs.n	80005f8 <__aeabi_dmul+0x80>
 80005ee:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005f2:	416d      	adcs	r5, r5
 80005f4:	eb46 0606 	adc.w	r6, r6, r6
 80005f8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005fc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000600:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000604:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000608:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800060c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000610:	bf88      	it	hi
 8000612:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000616:	d81e      	bhi.n	8000656 <__aeabi_dmul+0xde>
 8000618:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800061c:	bf08      	it	eq
 800061e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000622:	f150 0000 	adcs.w	r0, r0, #0
 8000626:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800062a:	bd70      	pop	{r4, r5, r6, pc}
 800062c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000630:	ea46 0101 	orr.w	r1, r6, r1
 8000634:	ea40 0002 	orr.w	r0, r0, r2
 8000638:	ea81 0103 	eor.w	r1, r1, r3
 800063c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000640:	bfc2      	ittt	gt
 8000642:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000646:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800064a:	bd70      	popgt	{r4, r5, r6, pc}
 800064c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000650:	f04f 0e00 	mov.w	lr, #0
 8000654:	3c01      	subs	r4, #1
 8000656:	f300 80ab 	bgt.w	80007b0 <__aeabi_dmul+0x238>
 800065a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800065e:	bfde      	ittt	le
 8000660:	2000      	movle	r0, #0
 8000662:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000666:	bd70      	pople	{r4, r5, r6, pc}
 8000668:	f1c4 0400 	rsb	r4, r4, #0
 800066c:	3c20      	subs	r4, #32
 800066e:	da35      	bge.n	80006dc <__aeabi_dmul+0x164>
 8000670:	340c      	adds	r4, #12
 8000672:	dc1b      	bgt.n	80006ac <__aeabi_dmul+0x134>
 8000674:	f104 0414 	add.w	r4, r4, #20
 8000678:	f1c4 0520 	rsb	r5, r4, #32
 800067c:	fa00 f305 	lsl.w	r3, r0, r5
 8000680:	fa20 f004 	lsr.w	r0, r0, r4
 8000684:	fa01 f205 	lsl.w	r2, r1, r5
 8000688:	ea40 0002 	orr.w	r0, r0, r2
 800068c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000690:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000694:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000698:	fa21 f604 	lsr.w	r6, r1, r4
 800069c:	eb42 0106 	adc.w	r1, r2, r6
 80006a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006a4:	bf08      	it	eq
 80006a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f1c4 040c 	rsb	r4, r4, #12
 80006b0:	f1c4 0520 	rsb	r5, r4, #32
 80006b4:	fa00 f304 	lsl.w	r3, r0, r4
 80006b8:	fa20 f005 	lsr.w	r0, r0, r5
 80006bc:	fa01 f204 	lsl.w	r2, r1, r4
 80006c0:	ea40 0002 	orr.w	r0, r0, r2
 80006c4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006cc:	f141 0100 	adc.w	r1, r1, #0
 80006d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d4:	bf08      	it	eq
 80006d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f1c4 0520 	rsb	r5, r4, #32
 80006e0:	fa00 f205 	lsl.w	r2, r0, r5
 80006e4:	ea4e 0e02 	orr.w	lr, lr, r2
 80006e8:	fa20 f304 	lsr.w	r3, r0, r4
 80006ec:	fa01 f205 	lsl.w	r2, r1, r5
 80006f0:	ea43 0302 	orr.w	r3, r3, r2
 80006f4:	fa21 f004 	lsr.w	r0, r1, r4
 80006f8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006fc:	fa21 f204 	lsr.w	r2, r1, r4
 8000700:	ea20 0002 	bic.w	r0, r0, r2
 8000704:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000708:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800070c:	bf08      	it	eq
 800070e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000712:	bd70      	pop	{r4, r5, r6, pc}
 8000714:	f094 0f00 	teq	r4, #0
 8000718:	d10f      	bne.n	800073a <__aeabi_dmul+0x1c2>
 800071a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800071e:	0040      	lsls	r0, r0, #1
 8000720:	eb41 0101 	adc.w	r1, r1, r1
 8000724:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000728:	bf08      	it	eq
 800072a:	3c01      	subeq	r4, #1
 800072c:	d0f7      	beq.n	800071e <__aeabi_dmul+0x1a6>
 800072e:	ea41 0106 	orr.w	r1, r1, r6
 8000732:	f095 0f00 	teq	r5, #0
 8000736:	bf18      	it	ne
 8000738:	4770      	bxne	lr
 800073a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800073e:	0052      	lsls	r2, r2, #1
 8000740:	eb43 0303 	adc.w	r3, r3, r3
 8000744:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000748:	bf08      	it	eq
 800074a:	3d01      	subeq	r5, #1
 800074c:	d0f7      	beq.n	800073e <__aeabi_dmul+0x1c6>
 800074e:	ea43 0306 	orr.w	r3, r3, r6
 8000752:	4770      	bx	lr
 8000754:	ea94 0f0c 	teq	r4, ip
 8000758:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800075c:	bf18      	it	ne
 800075e:	ea95 0f0c 	teqne	r5, ip
 8000762:	d00c      	beq.n	800077e <__aeabi_dmul+0x206>
 8000764:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000768:	bf18      	it	ne
 800076a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800076e:	d1d1      	bne.n	8000714 <__aeabi_dmul+0x19c>
 8000770:	ea81 0103 	eor.w	r1, r1, r3
 8000774:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000778:	f04f 0000 	mov.w	r0, #0
 800077c:	bd70      	pop	{r4, r5, r6, pc}
 800077e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000782:	bf06      	itte	eq
 8000784:	4610      	moveq	r0, r2
 8000786:	4619      	moveq	r1, r3
 8000788:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800078c:	d019      	beq.n	80007c2 <__aeabi_dmul+0x24a>
 800078e:	ea94 0f0c 	teq	r4, ip
 8000792:	d102      	bne.n	800079a <__aeabi_dmul+0x222>
 8000794:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000798:	d113      	bne.n	80007c2 <__aeabi_dmul+0x24a>
 800079a:	ea95 0f0c 	teq	r5, ip
 800079e:	d105      	bne.n	80007ac <__aeabi_dmul+0x234>
 80007a0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007a4:	bf1c      	itt	ne
 80007a6:	4610      	movne	r0, r2
 80007a8:	4619      	movne	r1, r3
 80007aa:	d10a      	bne.n	80007c2 <__aeabi_dmul+0x24a>
 80007ac:	ea81 0103 	eor.w	r1, r1, r3
 80007b0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007b4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007b8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007bc:	f04f 0000 	mov.w	r0, #0
 80007c0:	bd70      	pop	{r4, r5, r6, pc}
 80007c2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007c6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007ca:	bd70      	pop	{r4, r5, r6, pc}

080007cc <__aeabi_ddiv>:
 80007cc:	b570      	push	{r4, r5, r6, lr}
 80007ce:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007d2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007d6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007da:	bf1d      	ittte	ne
 80007dc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007e0:	ea94 0f0c 	teqne	r4, ip
 80007e4:	ea95 0f0c 	teqne	r5, ip
 80007e8:	f000 f8a7 	bleq	800093a <__aeabi_ddiv+0x16e>
 80007ec:	eba4 0405 	sub.w	r4, r4, r5
 80007f0:	ea81 0e03 	eor.w	lr, r1, r3
 80007f4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007fc:	f000 8088 	beq.w	8000910 <__aeabi_ddiv+0x144>
 8000800:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000804:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000808:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800080c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000810:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000814:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000818:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800081c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000820:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000824:	429d      	cmp	r5, r3
 8000826:	bf08      	it	eq
 8000828:	4296      	cmpeq	r6, r2
 800082a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800082e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000832:	d202      	bcs.n	800083a <__aeabi_ddiv+0x6e>
 8000834:	085b      	lsrs	r3, r3, #1
 8000836:	ea4f 0232 	mov.w	r2, r2, rrx
 800083a:	1ab6      	subs	r6, r6, r2
 800083c:	eb65 0503 	sbc.w	r5, r5, r3
 8000840:	085b      	lsrs	r3, r3, #1
 8000842:	ea4f 0232 	mov.w	r2, r2, rrx
 8000846:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800084a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800084e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000852:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000856:	bf22      	ittt	cs
 8000858:	1ab6      	subcs	r6, r6, r2
 800085a:	4675      	movcs	r5, lr
 800085c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000860:	085b      	lsrs	r3, r3, #1
 8000862:	ea4f 0232 	mov.w	r2, r2, rrx
 8000866:	ebb6 0e02 	subs.w	lr, r6, r2
 800086a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800086e:	bf22      	ittt	cs
 8000870:	1ab6      	subcs	r6, r6, r2
 8000872:	4675      	movcs	r5, lr
 8000874:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000878:	085b      	lsrs	r3, r3, #1
 800087a:	ea4f 0232 	mov.w	r2, r2, rrx
 800087e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000882:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000886:	bf22      	ittt	cs
 8000888:	1ab6      	subcs	r6, r6, r2
 800088a:	4675      	movcs	r5, lr
 800088c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000890:	085b      	lsrs	r3, r3, #1
 8000892:	ea4f 0232 	mov.w	r2, r2, rrx
 8000896:	ebb6 0e02 	subs.w	lr, r6, r2
 800089a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800089e:	bf22      	ittt	cs
 80008a0:	1ab6      	subcs	r6, r6, r2
 80008a2:	4675      	movcs	r5, lr
 80008a4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008a8:	ea55 0e06 	orrs.w	lr, r5, r6
 80008ac:	d018      	beq.n	80008e0 <__aeabi_ddiv+0x114>
 80008ae:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008b2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008b6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008ba:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008be:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008c2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008c6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008ca:	d1c0      	bne.n	800084e <__aeabi_ddiv+0x82>
 80008cc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008d0:	d10b      	bne.n	80008ea <__aeabi_ddiv+0x11e>
 80008d2:	ea41 0100 	orr.w	r1, r1, r0
 80008d6:	f04f 0000 	mov.w	r0, #0
 80008da:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008de:	e7b6      	b.n	800084e <__aeabi_ddiv+0x82>
 80008e0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008e4:	bf04      	itt	eq
 80008e6:	4301      	orreq	r1, r0
 80008e8:	2000      	moveq	r0, #0
 80008ea:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008ee:	bf88      	it	hi
 80008f0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008f4:	f63f aeaf 	bhi.w	8000656 <__aeabi_dmul+0xde>
 80008f8:	ebb5 0c03 	subs.w	ip, r5, r3
 80008fc:	bf04      	itt	eq
 80008fe:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000902:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000906:	f150 0000 	adcs.w	r0, r0, #0
 800090a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800090e:	bd70      	pop	{r4, r5, r6, pc}
 8000910:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000914:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000918:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800091c:	bfc2      	ittt	gt
 800091e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000922:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000926:	bd70      	popgt	{r4, r5, r6, pc}
 8000928:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800092c:	f04f 0e00 	mov.w	lr, #0
 8000930:	3c01      	subs	r4, #1
 8000932:	e690      	b.n	8000656 <__aeabi_dmul+0xde>
 8000934:	ea45 0e06 	orr.w	lr, r5, r6
 8000938:	e68d      	b.n	8000656 <__aeabi_dmul+0xde>
 800093a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800093e:	ea94 0f0c 	teq	r4, ip
 8000942:	bf08      	it	eq
 8000944:	ea95 0f0c 	teqeq	r5, ip
 8000948:	f43f af3b 	beq.w	80007c2 <__aeabi_dmul+0x24a>
 800094c:	ea94 0f0c 	teq	r4, ip
 8000950:	d10a      	bne.n	8000968 <__aeabi_ddiv+0x19c>
 8000952:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000956:	f47f af34 	bne.w	80007c2 <__aeabi_dmul+0x24a>
 800095a:	ea95 0f0c 	teq	r5, ip
 800095e:	f47f af25 	bne.w	80007ac <__aeabi_dmul+0x234>
 8000962:	4610      	mov	r0, r2
 8000964:	4619      	mov	r1, r3
 8000966:	e72c      	b.n	80007c2 <__aeabi_dmul+0x24a>
 8000968:	ea95 0f0c 	teq	r5, ip
 800096c:	d106      	bne.n	800097c <__aeabi_ddiv+0x1b0>
 800096e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000972:	f43f aefd 	beq.w	8000770 <__aeabi_dmul+0x1f8>
 8000976:	4610      	mov	r0, r2
 8000978:	4619      	mov	r1, r3
 800097a:	e722      	b.n	80007c2 <__aeabi_dmul+0x24a>
 800097c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000980:	bf18      	it	ne
 8000982:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000986:	f47f aec5 	bne.w	8000714 <__aeabi_dmul+0x19c>
 800098a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800098e:	f47f af0d 	bne.w	80007ac <__aeabi_dmul+0x234>
 8000992:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000996:	f47f aeeb 	bne.w	8000770 <__aeabi_dmul+0x1f8>
 800099a:	e712      	b.n	80007c2 <__aeabi_dmul+0x24a>

0800099c <__aeabi_d2iz>:
 800099c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80009a0:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80009a4:	d215      	bcs.n	80009d2 <__aeabi_d2iz+0x36>
 80009a6:	d511      	bpl.n	80009cc <__aeabi_d2iz+0x30>
 80009a8:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80009ac:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80009b0:	d912      	bls.n	80009d8 <__aeabi_d2iz+0x3c>
 80009b2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80009b6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80009ba:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80009be:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80009c2:	fa23 f002 	lsr.w	r0, r3, r2
 80009c6:	bf18      	it	ne
 80009c8:	4240      	negne	r0, r0
 80009ca:	4770      	bx	lr
 80009cc:	f04f 0000 	mov.w	r0, #0
 80009d0:	4770      	bx	lr
 80009d2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80009d6:	d105      	bne.n	80009e4 <__aeabi_d2iz+0x48>
 80009d8:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 80009dc:	bf08      	it	eq
 80009de:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 80009e2:	4770      	bx	lr
 80009e4:	f04f 0000 	mov.w	r0, #0
 80009e8:	4770      	bx	lr
 80009ea:	bf00      	nop

080009ec <__aeabi_uldivmod>:
 80009ec:	b953      	cbnz	r3, 8000a04 <__aeabi_uldivmod+0x18>
 80009ee:	b94a      	cbnz	r2, 8000a04 <__aeabi_uldivmod+0x18>
 80009f0:	2900      	cmp	r1, #0
 80009f2:	bf08      	it	eq
 80009f4:	2800      	cmpeq	r0, #0
 80009f6:	bf1c      	itt	ne
 80009f8:	f04f 31ff 	movne.w	r1, #4294967295
 80009fc:	f04f 30ff 	movne.w	r0, #4294967295
 8000a00:	f000 b97a 	b.w	8000cf8 <__aeabi_idiv0>
 8000a04:	f1ad 0c08 	sub.w	ip, sp, #8
 8000a08:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000a0c:	f000 f806 	bl	8000a1c <__udivmoddi4>
 8000a10:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000a14:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000a18:	b004      	add	sp, #16
 8000a1a:	4770      	bx	lr

08000a1c <__udivmoddi4>:
 8000a1c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000a20:	468c      	mov	ip, r1
 8000a22:	460d      	mov	r5, r1
 8000a24:	4604      	mov	r4, r0
 8000a26:	9e08      	ldr	r6, [sp, #32]
 8000a28:	2b00      	cmp	r3, #0
 8000a2a:	d151      	bne.n	8000ad0 <__udivmoddi4+0xb4>
 8000a2c:	428a      	cmp	r2, r1
 8000a2e:	4617      	mov	r7, r2
 8000a30:	d96d      	bls.n	8000b0e <__udivmoddi4+0xf2>
 8000a32:	fab2 fe82 	clz	lr, r2
 8000a36:	f1be 0f00 	cmp.w	lr, #0
 8000a3a:	d00b      	beq.n	8000a54 <__udivmoddi4+0x38>
 8000a3c:	f1ce 0c20 	rsb	ip, lr, #32
 8000a40:	fa01 f50e 	lsl.w	r5, r1, lr
 8000a44:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000a48:	fa02 f70e 	lsl.w	r7, r2, lr
 8000a4c:	ea4c 0c05 	orr.w	ip, ip, r5
 8000a50:	fa00 f40e 	lsl.w	r4, r0, lr
 8000a54:	ea4f 4a17 	mov.w	sl, r7, lsr #16
 8000a58:	0c25      	lsrs	r5, r4, #16
 8000a5a:	fbbc f8fa 	udiv	r8, ip, sl
 8000a5e:	fa1f f987 	uxth.w	r9, r7
 8000a62:	fb0a cc18 	mls	ip, sl, r8, ip
 8000a66:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 8000a6a:	fb08 f309 	mul.w	r3, r8, r9
 8000a6e:	42ab      	cmp	r3, r5
 8000a70:	d90a      	bls.n	8000a88 <__udivmoddi4+0x6c>
 8000a72:	19ed      	adds	r5, r5, r7
 8000a74:	f108 32ff 	add.w	r2, r8, #4294967295
 8000a78:	f080 8123 	bcs.w	8000cc2 <__udivmoddi4+0x2a6>
 8000a7c:	42ab      	cmp	r3, r5
 8000a7e:	f240 8120 	bls.w	8000cc2 <__udivmoddi4+0x2a6>
 8000a82:	f1a8 0802 	sub.w	r8, r8, #2
 8000a86:	443d      	add	r5, r7
 8000a88:	1aed      	subs	r5, r5, r3
 8000a8a:	b2a4      	uxth	r4, r4
 8000a8c:	fbb5 f0fa 	udiv	r0, r5, sl
 8000a90:	fb0a 5510 	mls	r5, sl, r0, r5
 8000a94:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000a98:	fb00 f909 	mul.w	r9, r0, r9
 8000a9c:	45a1      	cmp	r9, r4
 8000a9e:	d909      	bls.n	8000ab4 <__udivmoddi4+0x98>
 8000aa0:	19e4      	adds	r4, r4, r7
 8000aa2:	f100 33ff 	add.w	r3, r0, #4294967295
 8000aa6:	f080 810a 	bcs.w	8000cbe <__udivmoddi4+0x2a2>
 8000aaa:	45a1      	cmp	r9, r4
 8000aac:	f240 8107 	bls.w	8000cbe <__udivmoddi4+0x2a2>
 8000ab0:	3802      	subs	r0, #2
 8000ab2:	443c      	add	r4, r7
 8000ab4:	eba4 0409 	sub.w	r4, r4, r9
 8000ab8:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000abc:	2100      	movs	r1, #0
 8000abe:	2e00      	cmp	r6, #0
 8000ac0:	d061      	beq.n	8000b86 <__udivmoddi4+0x16a>
 8000ac2:	fa24 f40e 	lsr.w	r4, r4, lr
 8000ac6:	2300      	movs	r3, #0
 8000ac8:	6034      	str	r4, [r6, #0]
 8000aca:	6073      	str	r3, [r6, #4]
 8000acc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ad0:	428b      	cmp	r3, r1
 8000ad2:	d907      	bls.n	8000ae4 <__udivmoddi4+0xc8>
 8000ad4:	2e00      	cmp	r6, #0
 8000ad6:	d054      	beq.n	8000b82 <__udivmoddi4+0x166>
 8000ad8:	2100      	movs	r1, #0
 8000ada:	e886 0021 	stmia.w	r6, {r0, r5}
 8000ade:	4608      	mov	r0, r1
 8000ae0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ae4:	fab3 f183 	clz	r1, r3
 8000ae8:	2900      	cmp	r1, #0
 8000aea:	f040 808e 	bne.w	8000c0a <__udivmoddi4+0x1ee>
 8000aee:	42ab      	cmp	r3, r5
 8000af0:	d302      	bcc.n	8000af8 <__udivmoddi4+0xdc>
 8000af2:	4282      	cmp	r2, r0
 8000af4:	f200 80fa 	bhi.w	8000cec <__udivmoddi4+0x2d0>
 8000af8:	1a84      	subs	r4, r0, r2
 8000afa:	eb65 0503 	sbc.w	r5, r5, r3
 8000afe:	2001      	movs	r0, #1
 8000b00:	46ac      	mov	ip, r5
 8000b02:	2e00      	cmp	r6, #0
 8000b04:	d03f      	beq.n	8000b86 <__udivmoddi4+0x16a>
 8000b06:	e886 1010 	stmia.w	r6, {r4, ip}
 8000b0a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b0e:	b912      	cbnz	r2, 8000b16 <__udivmoddi4+0xfa>
 8000b10:	2701      	movs	r7, #1
 8000b12:	fbb7 f7f2 	udiv	r7, r7, r2
 8000b16:	fab7 fe87 	clz	lr, r7
 8000b1a:	f1be 0f00 	cmp.w	lr, #0
 8000b1e:	d134      	bne.n	8000b8a <__udivmoddi4+0x16e>
 8000b20:	1beb      	subs	r3, r5, r7
 8000b22:	0c3a      	lsrs	r2, r7, #16
 8000b24:	fa1f fc87 	uxth.w	ip, r7
 8000b28:	2101      	movs	r1, #1
 8000b2a:	fbb3 f8f2 	udiv	r8, r3, r2
 8000b2e:	0c25      	lsrs	r5, r4, #16
 8000b30:	fb02 3318 	mls	r3, r2, r8, r3
 8000b34:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8000b38:	fb0c f308 	mul.w	r3, ip, r8
 8000b3c:	42ab      	cmp	r3, r5
 8000b3e:	d907      	bls.n	8000b50 <__udivmoddi4+0x134>
 8000b40:	19ed      	adds	r5, r5, r7
 8000b42:	f108 30ff 	add.w	r0, r8, #4294967295
 8000b46:	d202      	bcs.n	8000b4e <__udivmoddi4+0x132>
 8000b48:	42ab      	cmp	r3, r5
 8000b4a:	f200 80d1 	bhi.w	8000cf0 <__udivmoddi4+0x2d4>
 8000b4e:	4680      	mov	r8, r0
 8000b50:	1aed      	subs	r5, r5, r3
 8000b52:	b2a3      	uxth	r3, r4
 8000b54:	fbb5 f0f2 	udiv	r0, r5, r2
 8000b58:	fb02 5510 	mls	r5, r2, r0, r5
 8000b5c:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
 8000b60:	fb0c fc00 	mul.w	ip, ip, r0
 8000b64:	45a4      	cmp	ip, r4
 8000b66:	d907      	bls.n	8000b78 <__udivmoddi4+0x15c>
 8000b68:	19e4      	adds	r4, r4, r7
 8000b6a:	f100 33ff 	add.w	r3, r0, #4294967295
 8000b6e:	d202      	bcs.n	8000b76 <__udivmoddi4+0x15a>
 8000b70:	45a4      	cmp	ip, r4
 8000b72:	f200 80b8 	bhi.w	8000ce6 <__udivmoddi4+0x2ca>
 8000b76:	4618      	mov	r0, r3
 8000b78:	eba4 040c 	sub.w	r4, r4, ip
 8000b7c:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000b80:	e79d      	b.n	8000abe <__udivmoddi4+0xa2>
 8000b82:	4631      	mov	r1, r6
 8000b84:	4630      	mov	r0, r6
 8000b86:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b8a:	f1ce 0420 	rsb	r4, lr, #32
 8000b8e:	fa05 f30e 	lsl.w	r3, r5, lr
 8000b92:	fa07 f70e 	lsl.w	r7, r7, lr
 8000b96:	fa20 f804 	lsr.w	r8, r0, r4
 8000b9a:	0c3a      	lsrs	r2, r7, #16
 8000b9c:	fa25 f404 	lsr.w	r4, r5, r4
 8000ba0:	ea48 0803 	orr.w	r8, r8, r3
 8000ba4:	fbb4 f1f2 	udiv	r1, r4, r2
 8000ba8:	ea4f 4518 	mov.w	r5, r8, lsr #16
 8000bac:	fb02 4411 	mls	r4, r2, r1, r4
 8000bb0:	fa1f fc87 	uxth.w	ip, r7
 8000bb4:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
 8000bb8:	fb01 f30c 	mul.w	r3, r1, ip
 8000bbc:	42ab      	cmp	r3, r5
 8000bbe:	fa00 f40e 	lsl.w	r4, r0, lr
 8000bc2:	d909      	bls.n	8000bd8 <__udivmoddi4+0x1bc>
 8000bc4:	19ed      	adds	r5, r5, r7
 8000bc6:	f101 30ff 	add.w	r0, r1, #4294967295
 8000bca:	f080 808a 	bcs.w	8000ce2 <__udivmoddi4+0x2c6>
 8000bce:	42ab      	cmp	r3, r5
 8000bd0:	f240 8087 	bls.w	8000ce2 <__udivmoddi4+0x2c6>
 8000bd4:	3902      	subs	r1, #2
 8000bd6:	443d      	add	r5, r7
 8000bd8:	1aeb      	subs	r3, r5, r3
 8000bda:	fa1f f588 	uxth.w	r5, r8
 8000bde:	fbb3 f0f2 	udiv	r0, r3, r2
 8000be2:	fb02 3310 	mls	r3, r2, r0, r3
 8000be6:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8000bea:	fb00 f30c 	mul.w	r3, r0, ip
 8000bee:	42ab      	cmp	r3, r5
 8000bf0:	d907      	bls.n	8000c02 <__udivmoddi4+0x1e6>
 8000bf2:	19ed      	adds	r5, r5, r7
 8000bf4:	f100 38ff 	add.w	r8, r0, #4294967295
 8000bf8:	d26f      	bcs.n	8000cda <__udivmoddi4+0x2be>
 8000bfa:	42ab      	cmp	r3, r5
 8000bfc:	d96d      	bls.n	8000cda <__udivmoddi4+0x2be>
 8000bfe:	3802      	subs	r0, #2
 8000c00:	443d      	add	r5, r7
 8000c02:	1aeb      	subs	r3, r5, r3
 8000c04:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000c08:	e78f      	b.n	8000b2a <__udivmoddi4+0x10e>
 8000c0a:	f1c1 0720 	rsb	r7, r1, #32
 8000c0e:	fa22 f807 	lsr.w	r8, r2, r7
 8000c12:	408b      	lsls	r3, r1
 8000c14:	fa05 f401 	lsl.w	r4, r5, r1
 8000c18:	ea48 0303 	orr.w	r3, r8, r3
 8000c1c:	fa20 fe07 	lsr.w	lr, r0, r7
 8000c20:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 8000c24:	40fd      	lsrs	r5, r7
 8000c26:	ea4e 0e04 	orr.w	lr, lr, r4
 8000c2a:	fbb5 f9fc 	udiv	r9, r5, ip
 8000c2e:	ea4f 441e 	mov.w	r4, lr, lsr #16
 8000c32:	fb0c 5519 	mls	r5, ip, r9, r5
 8000c36:	fa1f f883 	uxth.w	r8, r3
 8000c3a:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 8000c3e:	fb09 f408 	mul.w	r4, r9, r8
 8000c42:	42ac      	cmp	r4, r5
 8000c44:	fa02 f201 	lsl.w	r2, r2, r1
 8000c48:	fa00 fa01 	lsl.w	sl, r0, r1
 8000c4c:	d908      	bls.n	8000c60 <__udivmoddi4+0x244>
 8000c4e:	18ed      	adds	r5, r5, r3
 8000c50:	f109 30ff 	add.w	r0, r9, #4294967295
 8000c54:	d243      	bcs.n	8000cde <__udivmoddi4+0x2c2>
 8000c56:	42ac      	cmp	r4, r5
 8000c58:	d941      	bls.n	8000cde <__udivmoddi4+0x2c2>
 8000c5a:	f1a9 0902 	sub.w	r9, r9, #2
 8000c5e:	441d      	add	r5, r3
 8000c60:	1b2d      	subs	r5, r5, r4
 8000c62:	fa1f fe8e 	uxth.w	lr, lr
 8000c66:	fbb5 f0fc 	udiv	r0, r5, ip
 8000c6a:	fb0c 5510 	mls	r5, ip, r0, r5
 8000c6e:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
 8000c72:	fb00 f808 	mul.w	r8, r0, r8
 8000c76:	45a0      	cmp	r8, r4
 8000c78:	d907      	bls.n	8000c8a <__udivmoddi4+0x26e>
 8000c7a:	18e4      	adds	r4, r4, r3
 8000c7c:	f100 35ff 	add.w	r5, r0, #4294967295
 8000c80:	d229      	bcs.n	8000cd6 <__udivmoddi4+0x2ba>
 8000c82:	45a0      	cmp	r8, r4
 8000c84:	d927      	bls.n	8000cd6 <__udivmoddi4+0x2ba>
 8000c86:	3802      	subs	r0, #2
 8000c88:	441c      	add	r4, r3
 8000c8a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000c8e:	eba4 0408 	sub.w	r4, r4, r8
 8000c92:	fba0 8902 	umull	r8, r9, r0, r2
 8000c96:	454c      	cmp	r4, r9
 8000c98:	46c6      	mov	lr, r8
 8000c9a:	464d      	mov	r5, r9
 8000c9c:	d315      	bcc.n	8000cca <__udivmoddi4+0x2ae>
 8000c9e:	d012      	beq.n	8000cc6 <__udivmoddi4+0x2aa>
 8000ca0:	b156      	cbz	r6, 8000cb8 <__udivmoddi4+0x29c>
 8000ca2:	ebba 030e 	subs.w	r3, sl, lr
 8000ca6:	eb64 0405 	sbc.w	r4, r4, r5
 8000caa:	fa04 f707 	lsl.w	r7, r4, r7
 8000cae:	40cb      	lsrs	r3, r1
 8000cb0:	431f      	orrs	r7, r3
 8000cb2:	40cc      	lsrs	r4, r1
 8000cb4:	6037      	str	r7, [r6, #0]
 8000cb6:	6074      	str	r4, [r6, #4]
 8000cb8:	2100      	movs	r1, #0
 8000cba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cbe:	4618      	mov	r0, r3
 8000cc0:	e6f8      	b.n	8000ab4 <__udivmoddi4+0x98>
 8000cc2:	4690      	mov	r8, r2
 8000cc4:	e6e0      	b.n	8000a88 <__udivmoddi4+0x6c>
 8000cc6:	45c2      	cmp	sl, r8
 8000cc8:	d2ea      	bcs.n	8000ca0 <__udivmoddi4+0x284>
 8000cca:	ebb8 0e02 	subs.w	lr, r8, r2
 8000cce:	eb69 0503 	sbc.w	r5, r9, r3
 8000cd2:	3801      	subs	r0, #1
 8000cd4:	e7e4      	b.n	8000ca0 <__udivmoddi4+0x284>
 8000cd6:	4628      	mov	r0, r5
 8000cd8:	e7d7      	b.n	8000c8a <__udivmoddi4+0x26e>
 8000cda:	4640      	mov	r0, r8
 8000cdc:	e791      	b.n	8000c02 <__udivmoddi4+0x1e6>
 8000cde:	4681      	mov	r9, r0
 8000ce0:	e7be      	b.n	8000c60 <__udivmoddi4+0x244>
 8000ce2:	4601      	mov	r1, r0
 8000ce4:	e778      	b.n	8000bd8 <__udivmoddi4+0x1bc>
 8000ce6:	3802      	subs	r0, #2
 8000ce8:	443c      	add	r4, r7
 8000cea:	e745      	b.n	8000b78 <__udivmoddi4+0x15c>
 8000cec:	4608      	mov	r0, r1
 8000cee:	e708      	b.n	8000b02 <__udivmoddi4+0xe6>
 8000cf0:	f1a8 0802 	sub.w	r8, r8, #2
 8000cf4:	443d      	add	r5, r7
 8000cf6:	e72b      	b.n	8000b50 <__udivmoddi4+0x134>

08000cf8 <__aeabi_idiv0>:
 8000cf8:	4770      	bx	lr
 8000cfa:	bf00      	nop

08000cfc <ft5336_Init>:
  *         from MCU to FT5336 : ie I2C channel initialization (if required).
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address of FT5336).
  * @retval None
  */
void ft5336_Init(uint16_t DeviceAddr)
{
 8000cfc:	b580      	push	{r7, lr}
 8000cfe:	b082      	sub	sp, #8
 8000d00:	af00      	add	r7, sp, #0
 8000d02:	4603      	mov	r3, r0
 8000d04:	80fb      	strh	r3, [r7, #6]
  /* Wait at least 200ms after power up before accessing registers
   * Trsi timing (Time of starting to report point after resetting) from FT5336GQQ datasheet */
  TS_IO_Delay(200);
 8000d06:	20c8      	movs	r0, #200	; 0xc8
 8000d08:	f000 fc32 	bl	8001570 <TS_IO_Delay>

  /* Initialize I2C link if needed */
  ft5336_I2C_InitializeIfRequired();
 8000d0c:	f000 fa7a 	bl	8001204 <ft5336_I2C_InitializeIfRequired>
}
 8000d10:	bf00      	nop
 8000d12:	3708      	adds	r7, #8
 8000d14:	46bd      	mov	sp, r7
 8000d16:	bd80      	pop	{r7, pc}

08000d18 <ft5336_Reset>:
  *         @note : Not applicable to FT5336.
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address of FT5336).
  * @retval None
  */
void ft5336_Reset(uint16_t DeviceAddr)
{
 8000d18:	b480      	push	{r7}
 8000d1a:	b083      	sub	sp, #12
 8000d1c:	af00      	add	r7, sp, #0
 8000d1e:	4603      	mov	r3, r0
 8000d20:	80fb      	strh	r3, [r7, #6]
  /* Do nothing */
  /* No software reset sequence available in FT5336 IC */
}
 8000d22:	bf00      	nop
 8000d24:	370c      	adds	r7, #12
 8000d26:	46bd      	mov	sp, r7
 8000d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d2c:	4770      	bx	lr

08000d2e <ft5336_ReadID>:
  *         able to read the FT5336 device ID, and verify this is a FT5336.
  * @param  DeviceAddr: I2C FT5336 Slave address.
  * @retval The Device ID (two bytes).
  */
uint16_t ft5336_ReadID(uint16_t DeviceAddr)
{
 8000d2e:	b580      	push	{r7, lr}
 8000d30:	b084      	sub	sp, #16
 8000d32:	af00      	add	r7, sp, #0
 8000d34:	4603      	mov	r3, r0
 8000d36:	80fb      	strh	r3, [r7, #6]
  volatile uint8_t ucReadId = 0;
 8000d38:	2300      	movs	r3, #0
 8000d3a:	737b      	strb	r3, [r7, #13]
  uint8_t nbReadAttempts = 0;
 8000d3c:	2300      	movs	r3, #0
 8000d3e:	73fb      	strb	r3, [r7, #15]
  uint8_t bFoundDevice = 0; /* Device not found by default */
 8000d40:	2300      	movs	r3, #0
 8000d42:	73bb      	strb	r3, [r7, #14]

  /* Initialize I2C link if needed */
  ft5336_I2C_InitializeIfRequired();
 8000d44:	f000 fa5e 	bl	8001204 <ft5336_I2C_InitializeIfRequired>

  /* At maximum 4 attempts to read ID : exit at first finding of the searched device ID */
  for(nbReadAttempts = 0; ((nbReadAttempts < 3) && !(bFoundDevice)); nbReadAttempts++)
 8000d48:	2300      	movs	r3, #0
 8000d4a:	73fb      	strb	r3, [r7, #15]
 8000d4c:	e010      	b.n	8000d70 <ft5336_ReadID+0x42>
  {
    /* Read register FT5336_CHIP_ID_REG as DeviceID detection */
    ucReadId = TS_IO_Read(DeviceAddr, FT5336_CHIP_ID_REG);
 8000d4e:	88fb      	ldrh	r3, [r7, #6]
 8000d50:	b2db      	uxtb	r3, r3
 8000d52:	21a8      	movs	r1, #168	; 0xa8
 8000d54:	4618      	mov	r0, r3
 8000d56:	f000 fbed 	bl	8001534 <TS_IO_Read>
 8000d5a:	4603      	mov	r3, r0
 8000d5c:	737b      	strb	r3, [r7, #13]

    /* Found the searched device ID ? */
    if(ucReadId == FT5336_ID_VALUE)
 8000d5e:	7b7b      	ldrb	r3, [r7, #13]
 8000d60:	b2db      	uxtb	r3, r3
 8000d62:	2b51      	cmp	r3, #81	; 0x51
 8000d64:	d101      	bne.n	8000d6a <ft5336_ReadID+0x3c>
    {
      /* Set device as found */
      bFoundDevice = 1;
 8000d66:	2301      	movs	r3, #1
 8000d68:	73bb      	strb	r3, [r7, #14]
  for(nbReadAttempts = 0; ((nbReadAttempts < 3) && !(bFoundDevice)); nbReadAttempts++)
 8000d6a:	7bfb      	ldrb	r3, [r7, #15]
 8000d6c:	3301      	adds	r3, #1
 8000d6e:	73fb      	strb	r3, [r7, #15]
 8000d70:	7bfb      	ldrb	r3, [r7, #15]
 8000d72:	2b02      	cmp	r3, #2
 8000d74:	d802      	bhi.n	8000d7c <ft5336_ReadID+0x4e>
 8000d76:	7bbb      	ldrb	r3, [r7, #14]
 8000d78:	2b00      	cmp	r3, #0
 8000d7a:	d0e8      	beq.n	8000d4e <ft5336_ReadID+0x20>
    }
  }

  /* Return the device ID value */
  return (ucReadId);
 8000d7c:	7b7b      	ldrb	r3, [r7, #13]
 8000d7e:	b2db      	uxtb	r3, r3
 8000d80:	b29b      	uxth	r3, r3
}
 8000d82:	4618      	mov	r0, r3
 8000d84:	3710      	adds	r7, #16
 8000d86:	46bd      	mov	sp, r7
 8000d88:	bd80      	pop	{r7, pc}

08000d8a <ft5336_TS_Start>:
  * @brief  Configures the touch Screen IC device to start detecting touches
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address).
  * @retval None.
  */
void ft5336_TS_Start(uint16_t DeviceAddr)
{
 8000d8a:	b580      	push	{r7, lr}
 8000d8c:	b082      	sub	sp, #8
 8000d8e:	af00      	add	r7, sp, #0
 8000d90:	4603      	mov	r3, r0
 8000d92:	80fb      	strh	r3, [r7, #6]
  /* Minimum static configuration of FT5336 */
  FT5336_ASSERT(ft5336_TS_Configure(DeviceAddr));
 8000d94:	88fb      	ldrh	r3, [r7, #6]
 8000d96:	4618      	mov	r0, r3
 8000d98:	f000 fa44 	bl	8001224 <ft5336_TS_Configure>

  /* By default set FT5336 IC in Polling mode : no INT generation on FT5336 for new touch available */
  /* Note TS_INT is active low                                                                      */
  ft5336_TS_DisableIT(DeviceAddr);
 8000d9c:	88fb      	ldrh	r3, [r7, #6]
 8000d9e:	4618      	mov	r0, r3
 8000da0:	f000 f932 	bl	8001008 <ft5336_TS_DisableIT>
}
 8000da4:	bf00      	nop
 8000da6:	3708      	adds	r7, #8
 8000da8:	46bd      	mov	sp, r7
 8000daa:	bd80      	pop	{r7, pc}

08000dac <ft5336_TS_DetectTouch>:
  *         variables).
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval : Number of active touches detected (can be 0, 1 or 2).
  */
uint8_t ft5336_TS_DetectTouch(uint16_t DeviceAddr)
{
 8000dac:	b580      	push	{r7, lr}
 8000dae:	b084      	sub	sp, #16
 8000db0:	af00      	add	r7, sp, #0
 8000db2:	4603      	mov	r3, r0
 8000db4:	80fb      	strh	r3, [r7, #6]
  volatile uint8_t nbTouch = 0;
 8000db6:	2300      	movs	r3, #0
 8000db8:	73fb      	strb	r3, [r7, #15]

  /* Read register FT5336_TD_STAT_REG to check number of touches detection */
  nbTouch = TS_IO_Read(DeviceAddr, FT5336_TD_STAT_REG);
 8000dba:	88fb      	ldrh	r3, [r7, #6]
 8000dbc:	b2db      	uxtb	r3, r3
 8000dbe:	2102      	movs	r1, #2
 8000dc0:	4618      	mov	r0, r3
 8000dc2:	f000 fbb7 	bl	8001534 <TS_IO_Read>
 8000dc6:	4603      	mov	r3, r0
 8000dc8:	73fb      	strb	r3, [r7, #15]
  nbTouch &= FT5336_TD_STAT_MASK;
 8000dca:	7bfb      	ldrb	r3, [r7, #15]
 8000dcc:	b2db      	uxtb	r3, r3
 8000dce:	f003 030f 	and.w	r3, r3, #15
 8000dd2:	b2db      	uxtb	r3, r3
 8000dd4:	73fb      	strb	r3, [r7, #15]

  if(nbTouch > FT5336_MAX_DETECTABLE_TOUCH)
 8000dd6:	7bfb      	ldrb	r3, [r7, #15]
 8000dd8:	b2db      	uxtb	r3, r3
 8000dda:	2b05      	cmp	r3, #5
 8000ddc:	d901      	bls.n	8000de2 <ft5336_TS_DetectTouch+0x36>
  {
    /* If invalid number of touch detected, set it to zero */
    nbTouch = 0;
 8000dde:	2300      	movs	r3, #0
 8000de0:	73fb      	strb	r3, [r7, #15]
  }

  /* Update ft5336 driver internal global : current number of active touches */
  ft5336_handle.currActiveTouchNb = nbTouch;
 8000de2:	7bfb      	ldrb	r3, [r7, #15]
 8000de4:	b2da      	uxtb	r2, r3
 8000de6:	4b05      	ldr	r3, [pc, #20]	; (8000dfc <ft5336_TS_DetectTouch+0x50>)
 8000de8:	705a      	strb	r2, [r3, #1]

  /* Reset current active touch index on which to work on */
  ft5336_handle.currActiveTouchIdx = 0;
 8000dea:	4b04      	ldr	r3, [pc, #16]	; (8000dfc <ft5336_TS_DetectTouch+0x50>)
 8000dec:	2200      	movs	r2, #0
 8000dee:	709a      	strb	r2, [r3, #2]

  return(nbTouch);
 8000df0:	7bfb      	ldrb	r3, [r7, #15]
 8000df2:	b2db      	uxtb	r3, r3
}
 8000df4:	4618      	mov	r0, r3
 8000df6:	3710      	adds	r7, #16
 8000df8:	46bd      	mov	sp, r7
 8000dfa:	bd80      	pop	{r7, pc}
 8000dfc:	2002c9a4 	.word	0x2002c9a4

08000e00 <ft5336_TS_GetXY>:
  * @param  X: Pointer to X position value
  * @param  Y: Pointer to Y position value
  * @retval None.
  */
void ft5336_TS_GetXY(uint16_t DeviceAddr, uint16_t *X, uint16_t *Y)
{
 8000e00:	b580      	push	{r7, lr}
 8000e02:	b086      	sub	sp, #24
 8000e04:	af00      	add	r7, sp, #0
 8000e06:	4603      	mov	r3, r0
 8000e08:	60b9      	str	r1, [r7, #8]
 8000e0a:	607a      	str	r2, [r7, #4]
 8000e0c:	81fb      	strh	r3, [r7, #14]
  volatile uint8_t ucReadData = 0;
 8000e0e:	2300      	movs	r3, #0
 8000e10:	74fb      	strb	r3, [r7, #19]
  static uint16_t coord;
  uint8_t regAddressXLow = 0;
 8000e12:	2300      	movs	r3, #0
 8000e14:	75fb      	strb	r3, [r7, #23]
  uint8_t regAddressXHigh = 0;
 8000e16:	2300      	movs	r3, #0
 8000e18:	75bb      	strb	r3, [r7, #22]
  uint8_t regAddressYLow = 0;
 8000e1a:	2300      	movs	r3, #0
 8000e1c:	757b      	strb	r3, [r7, #21]
  uint8_t regAddressYHigh = 0;
 8000e1e:	2300      	movs	r3, #0
 8000e20:	753b      	strb	r3, [r7, #20]

  if(ft5336_handle.currActiveTouchIdx < ft5336_handle.currActiveTouchNb)
 8000e22:	4b6d      	ldr	r3, [pc, #436]	; (8000fd8 <ft5336_TS_GetXY+0x1d8>)
 8000e24:	789a      	ldrb	r2, [r3, #2]
 8000e26:	4b6c      	ldr	r3, [pc, #432]	; (8000fd8 <ft5336_TS_GetXY+0x1d8>)
 8000e28:	785b      	ldrb	r3, [r3, #1]
 8000e2a:	429a      	cmp	r2, r3
 8000e2c:	f080 80cf 	bcs.w	8000fce <ft5336_TS_GetXY+0x1ce>
  {
    switch(ft5336_handle.currActiveTouchIdx)
 8000e30:	4b69      	ldr	r3, [pc, #420]	; (8000fd8 <ft5336_TS_GetXY+0x1d8>)
 8000e32:	789b      	ldrb	r3, [r3, #2]
 8000e34:	2b09      	cmp	r3, #9
 8000e36:	d871      	bhi.n	8000f1c <ft5336_TS_GetXY+0x11c>
 8000e38:	a201      	add	r2, pc, #4	; (adr r2, 8000e40 <ft5336_TS_GetXY+0x40>)
 8000e3a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000e3e:	bf00      	nop
 8000e40:	08000e69 	.word	0x08000e69
 8000e44:	08000e7b 	.word	0x08000e7b
 8000e48:	08000e8d 	.word	0x08000e8d
 8000e4c:	08000e9f 	.word	0x08000e9f
 8000e50:	08000eb1 	.word	0x08000eb1
 8000e54:	08000ec3 	.word	0x08000ec3
 8000e58:	08000ed5 	.word	0x08000ed5
 8000e5c:	08000ee7 	.word	0x08000ee7
 8000e60:	08000ef9 	.word	0x08000ef9
 8000e64:	08000f0b 	.word	0x08000f0b
    {
    case 0 :
      regAddressXLow  = FT5336_P1_XL_REG;
 8000e68:	2304      	movs	r3, #4
 8000e6a:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P1_XH_REG;
 8000e6c:	2303      	movs	r3, #3
 8000e6e:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P1_YL_REG;
 8000e70:	2306      	movs	r3, #6
 8000e72:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P1_YH_REG;
 8000e74:	2305      	movs	r3, #5
 8000e76:	753b      	strb	r3, [r7, #20]
      break;
 8000e78:	e051      	b.n	8000f1e <ft5336_TS_GetXY+0x11e>

    case 1 :
      regAddressXLow  = FT5336_P2_XL_REG;
 8000e7a:	230a      	movs	r3, #10
 8000e7c:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P2_XH_REG;
 8000e7e:	2309      	movs	r3, #9
 8000e80:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P2_YL_REG;
 8000e82:	230c      	movs	r3, #12
 8000e84:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P2_YH_REG;
 8000e86:	230b      	movs	r3, #11
 8000e88:	753b      	strb	r3, [r7, #20]
      break;
 8000e8a:	e048      	b.n	8000f1e <ft5336_TS_GetXY+0x11e>

    case 2 :
      regAddressXLow  = FT5336_P3_XL_REG;
 8000e8c:	2310      	movs	r3, #16
 8000e8e:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P3_XH_REG;
 8000e90:	230f      	movs	r3, #15
 8000e92:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P3_YL_REG;
 8000e94:	2312      	movs	r3, #18
 8000e96:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P3_YH_REG;
 8000e98:	2311      	movs	r3, #17
 8000e9a:	753b      	strb	r3, [r7, #20]
      break;
 8000e9c:	e03f      	b.n	8000f1e <ft5336_TS_GetXY+0x11e>

    case 3 :
      regAddressXLow  = FT5336_P4_XL_REG;
 8000e9e:	2316      	movs	r3, #22
 8000ea0:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P4_XH_REG;
 8000ea2:	2315      	movs	r3, #21
 8000ea4:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P4_YL_REG;
 8000ea6:	2318      	movs	r3, #24
 8000ea8:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P4_YH_REG;
 8000eaa:	2317      	movs	r3, #23
 8000eac:	753b      	strb	r3, [r7, #20]
      break;
 8000eae:	e036      	b.n	8000f1e <ft5336_TS_GetXY+0x11e>

    case 4 :
      regAddressXLow  = FT5336_P5_XL_REG;
 8000eb0:	231c      	movs	r3, #28
 8000eb2:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P5_XH_REG;
 8000eb4:	231b      	movs	r3, #27
 8000eb6:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P5_YL_REG;
 8000eb8:	231e      	movs	r3, #30
 8000eba:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P5_YH_REG;
 8000ebc:	231d      	movs	r3, #29
 8000ebe:	753b      	strb	r3, [r7, #20]
      break;
 8000ec0:	e02d      	b.n	8000f1e <ft5336_TS_GetXY+0x11e>

    case 5 :
      regAddressXLow  = FT5336_P6_XL_REG;
 8000ec2:	2322      	movs	r3, #34	; 0x22
 8000ec4:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P6_XH_REG;
 8000ec6:	2321      	movs	r3, #33	; 0x21
 8000ec8:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P6_YL_REG;
 8000eca:	2324      	movs	r3, #36	; 0x24
 8000ecc:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P6_YH_REG;
 8000ece:	2323      	movs	r3, #35	; 0x23
 8000ed0:	753b      	strb	r3, [r7, #20]
      break;
 8000ed2:	e024      	b.n	8000f1e <ft5336_TS_GetXY+0x11e>

    case 6 :
      regAddressXLow  = FT5336_P7_XL_REG;
 8000ed4:	2328      	movs	r3, #40	; 0x28
 8000ed6:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P7_XH_REG;
 8000ed8:	2327      	movs	r3, #39	; 0x27
 8000eda:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P7_YL_REG;
 8000edc:	232a      	movs	r3, #42	; 0x2a
 8000ede:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P7_YH_REG;
 8000ee0:	2329      	movs	r3, #41	; 0x29
 8000ee2:	753b      	strb	r3, [r7, #20]
      break;
 8000ee4:	e01b      	b.n	8000f1e <ft5336_TS_GetXY+0x11e>

    case 7 :
      regAddressXLow  = FT5336_P8_XL_REG;
 8000ee6:	232e      	movs	r3, #46	; 0x2e
 8000ee8:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P8_XH_REG;
 8000eea:	232d      	movs	r3, #45	; 0x2d
 8000eec:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P8_YL_REG;
 8000eee:	2330      	movs	r3, #48	; 0x30
 8000ef0:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P8_YH_REG;
 8000ef2:	232f      	movs	r3, #47	; 0x2f
 8000ef4:	753b      	strb	r3, [r7, #20]
      break;
 8000ef6:	e012      	b.n	8000f1e <ft5336_TS_GetXY+0x11e>

    case 8 :
      regAddressXLow  = FT5336_P9_XL_REG;
 8000ef8:	2334      	movs	r3, #52	; 0x34
 8000efa:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P9_XH_REG;
 8000efc:	2333      	movs	r3, #51	; 0x33
 8000efe:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P9_YL_REG;
 8000f00:	2336      	movs	r3, #54	; 0x36
 8000f02:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P9_YH_REG;
 8000f04:	2335      	movs	r3, #53	; 0x35
 8000f06:	753b      	strb	r3, [r7, #20]
      break;
 8000f08:	e009      	b.n	8000f1e <ft5336_TS_GetXY+0x11e>

    case 9 :
      regAddressXLow  = FT5336_P10_XL_REG;
 8000f0a:	233a      	movs	r3, #58	; 0x3a
 8000f0c:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P10_XH_REG;
 8000f0e:	2339      	movs	r3, #57	; 0x39
 8000f10:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P10_YL_REG;
 8000f12:	233c      	movs	r3, #60	; 0x3c
 8000f14:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P10_YH_REG;
 8000f16:	233b      	movs	r3, #59	; 0x3b
 8000f18:	753b      	strb	r3, [r7, #20]
      break;
 8000f1a:	e000      	b.n	8000f1e <ft5336_TS_GetXY+0x11e>

    default :
      break;
 8000f1c:	bf00      	nop

    } /* end switch(ft5336_handle.currActiveTouchIdx) */

    /* Read low part of X position */
    ucReadData = TS_IO_Read(DeviceAddr, regAddressXLow);
 8000f1e:	89fb      	ldrh	r3, [r7, #14]
 8000f20:	b2db      	uxtb	r3, r3
 8000f22:	7dfa      	ldrb	r2, [r7, #23]
 8000f24:	4611      	mov	r1, r2
 8000f26:	4618      	mov	r0, r3
 8000f28:	f000 fb04 	bl	8001534 <TS_IO_Read>
 8000f2c:	4603      	mov	r3, r0
 8000f2e:	74fb      	strb	r3, [r7, #19]
    coord = (ucReadData & FT5336_TOUCH_POS_LSB_MASK) >> FT5336_TOUCH_POS_LSB_SHIFT;
 8000f30:	7cfb      	ldrb	r3, [r7, #19]
 8000f32:	b2db      	uxtb	r3, r3
 8000f34:	b29a      	uxth	r2, r3
 8000f36:	4b29      	ldr	r3, [pc, #164]	; (8000fdc <ft5336_TS_GetXY+0x1dc>)
 8000f38:	801a      	strh	r2, [r3, #0]

    /* Read high part of X position */
    ucReadData = TS_IO_Read(DeviceAddr, regAddressXHigh);
 8000f3a:	89fb      	ldrh	r3, [r7, #14]
 8000f3c:	b2db      	uxtb	r3, r3
 8000f3e:	7dba      	ldrb	r2, [r7, #22]
 8000f40:	4611      	mov	r1, r2
 8000f42:	4618      	mov	r0, r3
 8000f44:	f000 faf6 	bl	8001534 <TS_IO_Read>
 8000f48:	4603      	mov	r3, r0
 8000f4a:	74fb      	strb	r3, [r7, #19]
    coord |= ((ucReadData & FT5336_TOUCH_POS_MSB_MASK) >> FT5336_TOUCH_POS_MSB_SHIFT) << 8;
 8000f4c:	7cfb      	ldrb	r3, [r7, #19]
 8000f4e:	b2db      	uxtb	r3, r3
 8000f50:	021b      	lsls	r3, r3, #8
 8000f52:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8000f56:	b21a      	sxth	r2, r3
 8000f58:	4b20      	ldr	r3, [pc, #128]	; (8000fdc <ft5336_TS_GetXY+0x1dc>)
 8000f5a:	881b      	ldrh	r3, [r3, #0]
 8000f5c:	b21b      	sxth	r3, r3
 8000f5e:	4313      	orrs	r3, r2
 8000f60:	b21b      	sxth	r3, r3
 8000f62:	b29a      	uxth	r2, r3
 8000f64:	4b1d      	ldr	r3, [pc, #116]	; (8000fdc <ft5336_TS_GetXY+0x1dc>)
 8000f66:	801a      	strh	r2, [r3, #0]

    /* Send back ready X position to caller */
    *X = coord;
 8000f68:	4b1c      	ldr	r3, [pc, #112]	; (8000fdc <ft5336_TS_GetXY+0x1dc>)
 8000f6a:	881a      	ldrh	r2, [r3, #0]
 8000f6c:	68bb      	ldr	r3, [r7, #8]
 8000f6e:	801a      	strh	r2, [r3, #0]

    /* Read low part of Y position */
    ucReadData = TS_IO_Read(DeviceAddr, regAddressYLow);
 8000f70:	89fb      	ldrh	r3, [r7, #14]
 8000f72:	b2db      	uxtb	r3, r3
 8000f74:	7d7a      	ldrb	r2, [r7, #21]
 8000f76:	4611      	mov	r1, r2
 8000f78:	4618      	mov	r0, r3
 8000f7a:	f000 fadb 	bl	8001534 <TS_IO_Read>
 8000f7e:	4603      	mov	r3, r0
 8000f80:	74fb      	strb	r3, [r7, #19]
    coord = (ucReadData & FT5336_TOUCH_POS_LSB_MASK) >> FT5336_TOUCH_POS_LSB_SHIFT;
 8000f82:	7cfb      	ldrb	r3, [r7, #19]
 8000f84:	b2db      	uxtb	r3, r3
 8000f86:	b29a      	uxth	r2, r3
 8000f88:	4b14      	ldr	r3, [pc, #80]	; (8000fdc <ft5336_TS_GetXY+0x1dc>)
 8000f8a:	801a      	strh	r2, [r3, #0]

    /* Read high part of Y position */
    ucReadData = TS_IO_Read(DeviceAddr, regAddressYHigh);
 8000f8c:	89fb      	ldrh	r3, [r7, #14]
 8000f8e:	b2db      	uxtb	r3, r3
 8000f90:	7d3a      	ldrb	r2, [r7, #20]
 8000f92:	4611      	mov	r1, r2
 8000f94:	4618      	mov	r0, r3
 8000f96:	f000 facd 	bl	8001534 <TS_IO_Read>
 8000f9a:	4603      	mov	r3, r0
 8000f9c:	74fb      	strb	r3, [r7, #19]
    coord |= ((ucReadData & FT5336_TOUCH_POS_MSB_MASK) >> FT5336_TOUCH_POS_MSB_SHIFT) << 8;
 8000f9e:	7cfb      	ldrb	r3, [r7, #19]
 8000fa0:	b2db      	uxtb	r3, r3
 8000fa2:	021b      	lsls	r3, r3, #8
 8000fa4:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8000fa8:	b21a      	sxth	r2, r3
 8000faa:	4b0c      	ldr	r3, [pc, #48]	; (8000fdc <ft5336_TS_GetXY+0x1dc>)
 8000fac:	881b      	ldrh	r3, [r3, #0]
 8000fae:	b21b      	sxth	r3, r3
 8000fb0:	4313      	orrs	r3, r2
 8000fb2:	b21b      	sxth	r3, r3
 8000fb4:	b29a      	uxth	r2, r3
 8000fb6:	4b09      	ldr	r3, [pc, #36]	; (8000fdc <ft5336_TS_GetXY+0x1dc>)
 8000fb8:	801a      	strh	r2, [r3, #0]

    /* Send back ready Y position to caller */
    *Y = coord;
 8000fba:	4b08      	ldr	r3, [pc, #32]	; (8000fdc <ft5336_TS_GetXY+0x1dc>)
 8000fbc:	881a      	ldrh	r2, [r3, #0]
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	801a      	strh	r2, [r3, #0]

    ft5336_handle.currActiveTouchIdx++; /* next call will work on next touch */
 8000fc2:	4b05      	ldr	r3, [pc, #20]	; (8000fd8 <ft5336_TS_GetXY+0x1d8>)
 8000fc4:	789b      	ldrb	r3, [r3, #2]
 8000fc6:	3301      	adds	r3, #1
 8000fc8:	b2da      	uxtb	r2, r3
 8000fca:	4b03      	ldr	r3, [pc, #12]	; (8000fd8 <ft5336_TS_GetXY+0x1d8>)
 8000fcc:	709a      	strb	r2, [r3, #2]

  } /* of if(ft5336_handle.currActiveTouchIdx < ft5336_handle.currActiveTouchNb) */
}
 8000fce:	bf00      	nop
 8000fd0:	3718      	adds	r7, #24
 8000fd2:	46bd      	mov	sp, r7
 8000fd4:	bd80      	pop	{r7, pc}
 8000fd6:	bf00      	nop
 8000fd8:	2002c9a4 	.word	0x2002c9a4
 8000fdc:	2002c9a8 	.word	0x2002c9a8

08000fe0 <ft5336_TS_EnableIT>:
  *         connected to MCU as EXTI.
  * @param  DeviceAddr: Device address on communication Bus (Slave I2C address of FT5336).
  * @retval None
  */
void ft5336_TS_EnableIT(uint16_t DeviceAddr)
{
 8000fe0:	b580      	push	{r7, lr}
 8000fe2:	b084      	sub	sp, #16
 8000fe4:	af00      	add	r7, sp, #0
 8000fe6:	4603      	mov	r3, r0
 8000fe8:	80fb      	strh	r3, [r7, #6]
   uint8_t regValue = 0;
 8000fea:	2300      	movs	r3, #0
 8000fec:	73fb      	strb	r3, [r7, #15]
   regValue = (FT5336_G_MODE_INTERRUPT_TRIGGER & (FT5336_G_MODE_INTERRUPT_MASK >> FT5336_G_MODE_INTERRUPT_SHIFT)) << FT5336_G_MODE_INTERRUPT_SHIFT;
 8000fee:	2301      	movs	r3, #1
 8000ff0:	73fb      	strb	r3, [r7, #15]

   /* Set interrupt trigger mode in FT5336_GMODE_REG */
   TS_IO_Write(DeviceAddr, FT5336_GMODE_REG, regValue);
 8000ff2:	88fb      	ldrh	r3, [r7, #6]
 8000ff4:	b2db      	uxtb	r3, r3
 8000ff6:	7bfa      	ldrb	r2, [r7, #15]
 8000ff8:	21a4      	movs	r1, #164	; 0xa4
 8000ffa:	4618      	mov	r0, r3
 8000ffc:	f000 fa80 	bl	8001500 <TS_IO_Write>
}
 8001000:	bf00      	nop
 8001002:	3710      	adds	r7, #16
 8001004:	46bd      	mov	sp, r7
 8001006:	bd80      	pop	{r7, pc}

08001008 <ft5336_TS_DisableIT>:
  *         connected to MCU as EXTI.
  * @param  DeviceAddr: Device address on communication Bus (Slave I2C address of FT5336).
  * @retval None
  */
void ft5336_TS_DisableIT(uint16_t DeviceAddr)
{
 8001008:	b580      	push	{r7, lr}
 800100a:	b084      	sub	sp, #16
 800100c:	af00      	add	r7, sp, #0
 800100e:	4603      	mov	r3, r0
 8001010:	80fb      	strh	r3, [r7, #6]
  uint8_t regValue = 0;
 8001012:	2300      	movs	r3, #0
 8001014:	73fb      	strb	r3, [r7, #15]
  regValue = (FT5336_G_MODE_INTERRUPT_POLLING & (FT5336_G_MODE_INTERRUPT_MASK >> FT5336_G_MODE_INTERRUPT_SHIFT)) << FT5336_G_MODE_INTERRUPT_SHIFT;
 8001016:	2300      	movs	r3, #0
 8001018:	73fb      	strb	r3, [r7, #15]

  /* Set interrupt polling mode in FT5336_GMODE_REG */
  TS_IO_Write(DeviceAddr, FT5336_GMODE_REG, regValue);
 800101a:	88fb      	ldrh	r3, [r7, #6]
 800101c:	b2db      	uxtb	r3, r3
 800101e:	7bfa      	ldrb	r2, [r7, #15]
 8001020:	21a4      	movs	r1, #164	; 0xa4
 8001022:	4618      	mov	r0, r3
 8001024:	f000 fa6c 	bl	8001500 <TS_IO_Write>
}
 8001028:	bf00      	nop
 800102a:	3710      	adds	r7, #16
 800102c:	46bd      	mov	sp, r7
 800102e:	bd80      	pop	{r7, pc}

08001030 <ft5336_TS_ITStatus>:
  *         @note : This feature is not applicable to FT5336.
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address of FT5336).
  * @retval TS interrupts status : always return 0 here
  */
uint8_t ft5336_TS_ITStatus(uint16_t DeviceAddr)
{
 8001030:	b480      	push	{r7}
 8001032:	b083      	sub	sp, #12
 8001034:	af00      	add	r7, sp, #0
 8001036:	4603      	mov	r3, r0
 8001038:	80fb      	strh	r3, [r7, #6]
  /* Always return 0 as feature not applicable to FT5336 */
  return 0;
 800103a:	2300      	movs	r3, #0
}
 800103c:	4618      	mov	r0, r3
 800103e:	370c      	adds	r7, #12
 8001040:	46bd      	mov	sp, r7
 8001042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001046:	4770      	bx	lr

08001048 <ft5336_TS_ClearIT>:
  *         @note : This feature is not applicable to FT5336.
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address of FT5336).
  * @retval None
  */
void ft5336_TS_ClearIT(uint16_t DeviceAddr)
{
 8001048:	b480      	push	{r7}
 800104a:	b083      	sub	sp, #12
 800104c:	af00      	add	r7, sp, #0
 800104e:	4603      	mov	r3, r0
 8001050:	80fb      	strh	r3, [r7, #6]
  /* Nothing to be done here for FT5336 */
}
 8001052:	bf00      	nop
 8001054:	370c      	adds	r7, #12
 8001056:	46bd      	mov	sp, r7
 8001058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800105c:	4770      	bx	lr

0800105e <ft5336_TS_GetGestureID>:
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address of FT5336).
  * @param  pGestureId : Pointer to get last touch gesture Identification.
  * @retval None.
  */
void ft5336_TS_GetGestureID(uint16_t DeviceAddr, uint32_t * pGestureId)
{
 800105e:	b580      	push	{r7, lr}
 8001060:	b084      	sub	sp, #16
 8001062:	af00      	add	r7, sp, #0
 8001064:	4603      	mov	r3, r0
 8001066:	6039      	str	r1, [r7, #0]
 8001068:	80fb      	strh	r3, [r7, #6]
  volatile uint8_t ucReadData = 0;
 800106a:	2300      	movs	r3, #0
 800106c:	73fb      	strb	r3, [r7, #15]

  ucReadData = TS_IO_Read(DeviceAddr, FT5336_GEST_ID_REG);
 800106e:	88fb      	ldrh	r3, [r7, #6]
 8001070:	b2db      	uxtb	r3, r3
 8001072:	2101      	movs	r1, #1
 8001074:	4618      	mov	r0, r3
 8001076:	f000 fa5d 	bl	8001534 <TS_IO_Read>
 800107a:	4603      	mov	r3, r0
 800107c:	73fb      	strb	r3, [r7, #15]

  * pGestureId = ucReadData;
 800107e:	7bfb      	ldrb	r3, [r7, #15]
 8001080:	b2db      	uxtb	r3, r3
 8001082:	461a      	mov	r2, r3
 8001084:	683b      	ldr	r3, [r7, #0]
 8001086:	601a      	str	r2, [r3, #0]
}
 8001088:	bf00      	nop
 800108a:	3710      	adds	r7, #16
 800108c:	46bd      	mov	sp, r7
 800108e:	bd80      	pop	{r7, pc}

08001090 <ft5336_TS_GetTouchInfo>:
void ft5336_TS_GetTouchInfo(uint16_t   DeviceAddr,
                            uint32_t   touchIdx,
                            uint32_t * pWeight,
                            uint32_t * pArea,
                            uint32_t * pEvent)
{
 8001090:	b580      	push	{r7, lr}
 8001092:	b086      	sub	sp, #24
 8001094:	af00      	add	r7, sp, #0
 8001096:	60b9      	str	r1, [r7, #8]
 8001098:	607a      	str	r2, [r7, #4]
 800109a:	603b      	str	r3, [r7, #0]
 800109c:	4603      	mov	r3, r0
 800109e:	81fb      	strh	r3, [r7, #14]
  volatile uint8_t ucReadData = 0;
 80010a0:	2300      	movs	r3, #0
 80010a2:	753b      	strb	r3, [r7, #20]
  uint8_t regAddressXHigh = 0;
 80010a4:	2300      	movs	r3, #0
 80010a6:	75fb      	strb	r3, [r7, #23]
  uint8_t regAddressPWeight = 0;
 80010a8:	2300      	movs	r3, #0
 80010aa:	75bb      	strb	r3, [r7, #22]
  uint8_t regAddressPMisc = 0;
 80010ac:	2300      	movs	r3, #0
 80010ae:	757b      	strb	r3, [r7, #21]

  if(touchIdx < ft5336_handle.currActiveTouchNb)
 80010b0:	4b4d      	ldr	r3, [pc, #308]	; (80011e8 <ft5336_TS_GetTouchInfo+0x158>)
 80010b2:	785b      	ldrb	r3, [r3, #1]
 80010b4:	461a      	mov	r2, r3
 80010b6:	68bb      	ldr	r3, [r7, #8]
 80010b8:	429a      	cmp	r2, r3
 80010ba:	f240 8090 	bls.w	80011de <ft5336_TS_GetTouchInfo+0x14e>
  {
    switch(touchIdx)
 80010be:	68bb      	ldr	r3, [r7, #8]
 80010c0:	2b09      	cmp	r3, #9
 80010c2:	d85d      	bhi.n	8001180 <ft5336_TS_GetTouchInfo+0xf0>
 80010c4:	a201      	add	r2, pc, #4	; (adr r2, 80010cc <ft5336_TS_GetTouchInfo+0x3c>)
 80010c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80010ca:	bf00      	nop
 80010cc:	080010f5 	.word	0x080010f5
 80010d0:	08001103 	.word	0x08001103
 80010d4:	08001111 	.word	0x08001111
 80010d8:	0800111f 	.word	0x0800111f
 80010dc:	0800112d 	.word	0x0800112d
 80010e0:	0800113b 	.word	0x0800113b
 80010e4:	08001149 	.word	0x08001149
 80010e8:	08001157 	.word	0x08001157
 80010ec:	08001165 	.word	0x08001165
 80010f0:	08001173 	.word	0x08001173
    {
    case 0 :
      regAddressXHigh   = FT5336_P1_XH_REG;
 80010f4:	2303      	movs	r3, #3
 80010f6:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P1_WEIGHT_REG;
 80010f8:	2307      	movs	r3, #7
 80010fa:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P1_MISC_REG;
 80010fc:	2308      	movs	r3, #8
 80010fe:	757b      	strb	r3, [r7, #21]
      break;
 8001100:	e03f      	b.n	8001182 <ft5336_TS_GetTouchInfo+0xf2>

    case 1 :
      regAddressXHigh   = FT5336_P2_XH_REG;
 8001102:	2309      	movs	r3, #9
 8001104:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P2_WEIGHT_REG;
 8001106:	230d      	movs	r3, #13
 8001108:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P2_MISC_REG;
 800110a:	230e      	movs	r3, #14
 800110c:	757b      	strb	r3, [r7, #21]
      break;
 800110e:	e038      	b.n	8001182 <ft5336_TS_GetTouchInfo+0xf2>

    case 2 :
      regAddressXHigh   = FT5336_P3_XH_REG;
 8001110:	230f      	movs	r3, #15
 8001112:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P3_WEIGHT_REG;
 8001114:	2313      	movs	r3, #19
 8001116:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P3_MISC_REG;
 8001118:	2314      	movs	r3, #20
 800111a:	757b      	strb	r3, [r7, #21]
      break;
 800111c:	e031      	b.n	8001182 <ft5336_TS_GetTouchInfo+0xf2>

    case 3 :
      regAddressXHigh   = FT5336_P4_XH_REG;
 800111e:	2315      	movs	r3, #21
 8001120:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P4_WEIGHT_REG;
 8001122:	2319      	movs	r3, #25
 8001124:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P4_MISC_REG;
 8001126:	231a      	movs	r3, #26
 8001128:	757b      	strb	r3, [r7, #21]
      break;
 800112a:	e02a      	b.n	8001182 <ft5336_TS_GetTouchInfo+0xf2>

    case 4 :
      regAddressXHigh   = FT5336_P5_XH_REG;
 800112c:	231b      	movs	r3, #27
 800112e:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P5_WEIGHT_REG;
 8001130:	231f      	movs	r3, #31
 8001132:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P5_MISC_REG;
 8001134:	2320      	movs	r3, #32
 8001136:	757b      	strb	r3, [r7, #21]
      break;
 8001138:	e023      	b.n	8001182 <ft5336_TS_GetTouchInfo+0xf2>

    case 5 :
      regAddressXHigh   = FT5336_P6_XH_REG;
 800113a:	2321      	movs	r3, #33	; 0x21
 800113c:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P6_WEIGHT_REG;
 800113e:	2325      	movs	r3, #37	; 0x25
 8001140:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P6_MISC_REG;
 8001142:	2326      	movs	r3, #38	; 0x26
 8001144:	757b      	strb	r3, [r7, #21]
      break;
 8001146:	e01c      	b.n	8001182 <ft5336_TS_GetTouchInfo+0xf2>

    case 6 :
      regAddressXHigh   = FT5336_P7_XH_REG;
 8001148:	2327      	movs	r3, #39	; 0x27
 800114a:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P7_WEIGHT_REG;
 800114c:	232b      	movs	r3, #43	; 0x2b
 800114e:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P7_MISC_REG;
 8001150:	232c      	movs	r3, #44	; 0x2c
 8001152:	757b      	strb	r3, [r7, #21]
      break;
 8001154:	e015      	b.n	8001182 <ft5336_TS_GetTouchInfo+0xf2>

    case 7 :
      regAddressXHigh   = FT5336_P8_XH_REG;
 8001156:	232d      	movs	r3, #45	; 0x2d
 8001158:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P8_WEIGHT_REG;
 800115a:	2331      	movs	r3, #49	; 0x31
 800115c:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P8_MISC_REG;
 800115e:	2332      	movs	r3, #50	; 0x32
 8001160:	757b      	strb	r3, [r7, #21]
      break;
 8001162:	e00e      	b.n	8001182 <ft5336_TS_GetTouchInfo+0xf2>

    case 8 :
      regAddressXHigh   = FT5336_P9_XH_REG;
 8001164:	2333      	movs	r3, #51	; 0x33
 8001166:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P9_WEIGHT_REG;
 8001168:	2337      	movs	r3, #55	; 0x37
 800116a:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P9_MISC_REG;
 800116c:	2338      	movs	r3, #56	; 0x38
 800116e:	757b      	strb	r3, [r7, #21]
      break;
 8001170:	e007      	b.n	8001182 <ft5336_TS_GetTouchInfo+0xf2>

    case 9 :
      regAddressXHigh   = FT5336_P10_XH_REG;
 8001172:	2339      	movs	r3, #57	; 0x39
 8001174:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P10_WEIGHT_REG;
 8001176:	233d      	movs	r3, #61	; 0x3d
 8001178:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P10_MISC_REG;
 800117a:	233e      	movs	r3, #62	; 0x3e
 800117c:	757b      	strb	r3, [r7, #21]
      break;
 800117e:	e000      	b.n	8001182 <ft5336_TS_GetTouchInfo+0xf2>

    default :
      break;
 8001180:	bf00      	nop

    } /* end switch(touchIdx) */

    /* Read Event Id of touch index */
    ucReadData = TS_IO_Read(DeviceAddr, regAddressXHigh);
 8001182:	89fb      	ldrh	r3, [r7, #14]
 8001184:	b2db      	uxtb	r3, r3
 8001186:	7dfa      	ldrb	r2, [r7, #23]
 8001188:	4611      	mov	r1, r2
 800118a:	4618      	mov	r0, r3
 800118c:	f000 f9d2 	bl	8001534 <TS_IO_Read>
 8001190:	4603      	mov	r3, r0
 8001192:	753b      	strb	r3, [r7, #20]
    * pEvent = (ucReadData & FT5336_TOUCH_EVT_FLAG_MASK) >> FT5336_TOUCH_EVT_FLAG_SHIFT;
 8001194:	7d3b      	ldrb	r3, [r7, #20]
 8001196:	b2db      	uxtb	r3, r3
 8001198:	119b      	asrs	r3, r3, #6
 800119a:	f003 0203 	and.w	r2, r3, #3
 800119e:	6a3b      	ldr	r3, [r7, #32]
 80011a0:	601a      	str	r2, [r3, #0]

    /* Read weight of touch index */
    ucReadData = TS_IO_Read(DeviceAddr, regAddressPWeight);
 80011a2:	89fb      	ldrh	r3, [r7, #14]
 80011a4:	b2db      	uxtb	r3, r3
 80011a6:	7dba      	ldrb	r2, [r7, #22]
 80011a8:	4611      	mov	r1, r2
 80011aa:	4618      	mov	r0, r3
 80011ac:	f000 f9c2 	bl	8001534 <TS_IO_Read>
 80011b0:	4603      	mov	r3, r0
 80011b2:	753b      	strb	r3, [r7, #20]
    * pWeight = (ucReadData & FT5336_TOUCH_WEIGHT_MASK) >> FT5336_TOUCH_WEIGHT_SHIFT;
 80011b4:	7d3b      	ldrb	r3, [r7, #20]
 80011b6:	b2db      	uxtb	r3, r3
 80011b8:	461a      	mov	r2, r3
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	601a      	str	r2, [r3, #0]

    /* Read area of touch index */
    ucReadData = TS_IO_Read(DeviceAddr, regAddressPMisc);
 80011be:	89fb      	ldrh	r3, [r7, #14]
 80011c0:	b2db      	uxtb	r3, r3
 80011c2:	7d7a      	ldrb	r2, [r7, #21]
 80011c4:	4611      	mov	r1, r2
 80011c6:	4618      	mov	r0, r3
 80011c8:	f000 f9b4 	bl	8001534 <TS_IO_Read>
 80011cc:	4603      	mov	r3, r0
 80011ce:	753b      	strb	r3, [r7, #20]
    * pArea = (ucReadData & FT5336_TOUCH_AREA_MASK) >> FT5336_TOUCH_AREA_SHIFT;
 80011d0:	7d3b      	ldrb	r3, [r7, #20]
 80011d2:	b2db      	uxtb	r3, r3
 80011d4:	111b      	asrs	r3, r3, #4
 80011d6:	f003 0204 	and.w	r2, r3, #4
 80011da:	683b      	ldr	r3, [r7, #0]
 80011dc:	601a      	str	r2, [r3, #0]

  } /* of if(touchIdx < ft5336_handle.currActiveTouchNb) */
}
 80011de:	bf00      	nop
 80011e0:	3718      	adds	r7, #24
 80011e2:	46bd      	mov	sp, r7
 80011e4:	bd80      	pop	{r7, pc}
 80011e6:	bf00      	nop
 80011e8:	2002c9a4 	.word	0x2002c9a4

080011ec <ft5336_Get_I2C_InitializedStatus>:
  * @brief  Return the status of I2C was initialized or not.
  * @param  None.
  * @retval : I2C initialization status.
  */
static uint8_t ft5336_Get_I2C_InitializedStatus(void)
{
 80011ec:	b480      	push	{r7}
 80011ee:	af00      	add	r7, sp, #0
  return(ft5336_handle.i2cInitialized);
 80011f0:	4b03      	ldr	r3, [pc, #12]	; (8001200 <ft5336_Get_I2C_InitializedStatus+0x14>)
 80011f2:	781b      	ldrb	r3, [r3, #0]
}
 80011f4:	4618      	mov	r0, r3
 80011f6:	46bd      	mov	sp, r7
 80011f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011fc:	4770      	bx	lr
 80011fe:	bf00      	nop
 8001200:	2002c9a4 	.word	0x2002c9a4

08001204 <ft5336_I2C_InitializeIfRequired>:
  * @brief  I2C initialize if needed.
  * @param  None.
  * @retval : None.
  */
static void ft5336_I2C_InitializeIfRequired(void)
{
 8001204:	b580      	push	{r7, lr}
 8001206:	af00      	add	r7, sp, #0
  if(ft5336_Get_I2C_InitializedStatus() == FT5336_I2C_NOT_INITIALIZED)
 8001208:	f7ff fff0 	bl	80011ec <ft5336_Get_I2C_InitializedStatus>
 800120c:	4603      	mov	r3, r0
 800120e:	2b00      	cmp	r3, #0
 8001210:	d104      	bne.n	800121c <ft5336_I2C_InitializeIfRequired+0x18>
  {
    /* Initialize TS IO BUS layer (I2C) */
    TS_IO_Init();
 8001212:	f000 f96b 	bl	80014ec <TS_IO_Init>

    /* Set state to initialized */
    ft5336_handle.i2cInitialized = FT5336_I2C_INITIALIZED;
 8001216:	4b02      	ldr	r3, [pc, #8]	; (8001220 <ft5336_I2C_InitializeIfRequired+0x1c>)
 8001218:	2201      	movs	r2, #1
 800121a:	701a      	strb	r2, [r3, #0]
  }
}
 800121c:	bf00      	nop
 800121e:	bd80      	pop	{r7, pc}
 8001220:	2002c9a4 	.word	0x2002c9a4

08001224 <ft5336_TS_Configure>:
  * @brief  Basic static configuration of TouchScreen
  * @param  DeviceAddr: FT5336 Device address for communication on I2C Bus.
  * @retval Status FT5336_STATUS_OK or FT5336_STATUS_NOT_OK.
  */
static uint32_t ft5336_TS_Configure(uint16_t DeviceAddr)
{
 8001224:	b480      	push	{r7}
 8001226:	b085      	sub	sp, #20
 8001228:	af00      	add	r7, sp, #0
 800122a:	4603      	mov	r3, r0
 800122c:	80fb      	strh	r3, [r7, #6]
  uint32_t status = FT5336_STATUS_OK;
 800122e:	2300      	movs	r3, #0
 8001230:	60fb      	str	r3, [r7, #12]

  /* Nothing special to be done for FT5336 */

  return(status);
 8001232:	68fb      	ldr	r3, [r7, #12]
}
 8001234:	4618      	mov	r0, r3
 8001236:	3714      	adds	r7, #20
 8001238:	46bd      	mov	sp, r7
 800123a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800123e:	4770      	bx	lr

08001240 <I2Cx_MspInit>:
  * @brief  Initializes I2C MSP.
  * @param  i2c_handler : I2C handler
  * @retval None
  */
static void I2Cx_MspInit(I2C_HandleTypeDef *i2c_handler)
{
 8001240:	b580      	push	{r7, lr}
 8001242:	b08c      	sub	sp, #48	; 0x30
 8001244:	af00      	add	r7, sp, #0
 8001246:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef  gpio_init_structure;
  
  if (i2c_handler == (I2C_HandleTypeDef*)(&hI2cAudioHandler))
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	4a51      	ldr	r2, [pc, #324]	; (8001390 <I2Cx_MspInit+0x150>)
 800124c:	4293      	cmp	r3, r2
 800124e:	d14d      	bne.n	80012ec <I2Cx_MspInit+0xac>
  {
    /* AUDIO and LCD I2C MSP init */

    /*** Configure the GPIOs ***/
    /* Enable GPIO clock */
    DISCOVERY_AUDIO_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 8001250:	4a50      	ldr	r2, [pc, #320]	; (8001394 <I2Cx_MspInit+0x154>)
 8001252:	4b50      	ldr	r3, [pc, #320]	; (8001394 <I2Cx_MspInit+0x154>)
 8001254:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001256:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800125a:	6313      	str	r3, [r2, #48]	; 0x30
 800125c:	4b4d      	ldr	r3, [pc, #308]	; (8001394 <I2Cx_MspInit+0x154>)
 800125e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001260:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001264:	61bb      	str	r3, [r7, #24]
 8001266:	69bb      	ldr	r3, [r7, #24]

    /* Configure I2C Tx as alternate function */
    gpio_init_structure.Pin = DISCOVERY_AUDIO_I2Cx_SCL_PIN;
 8001268:	2380      	movs	r3, #128	; 0x80
 800126a:	61fb      	str	r3, [r7, #28]
    gpio_init_structure.Mode = GPIO_MODE_AF_OD;
 800126c:	2312      	movs	r3, #18
 800126e:	623b      	str	r3, [r7, #32]
    gpio_init_structure.Pull = GPIO_NOPULL;
 8001270:	2300      	movs	r3, #0
 8001272:	627b      	str	r3, [r7, #36]	; 0x24
    gpio_init_structure.Speed = GPIO_SPEED_FAST;
 8001274:	2302      	movs	r3, #2
 8001276:	62bb      	str	r3, [r7, #40]	; 0x28
    gpio_init_structure.Alternate = DISCOVERY_AUDIO_I2Cx_SCL_SDA_AF;
 8001278:	2304      	movs	r3, #4
 800127a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(DISCOVERY_AUDIO_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 800127c:	f107 031c 	add.w	r3, r7, #28
 8001280:	4619      	mov	r1, r3
 8001282:	4845      	ldr	r0, [pc, #276]	; (8001398 <I2Cx_MspInit+0x158>)
 8001284:	f002 fe50 	bl	8003f28 <HAL_GPIO_Init>

    /* Configure I2C Rx as alternate function */
    gpio_init_structure.Pin = DISCOVERY_AUDIO_I2Cx_SDA_PIN;
 8001288:	f44f 7380 	mov.w	r3, #256	; 0x100
 800128c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(DISCOVERY_AUDIO_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 800128e:	f107 031c 	add.w	r3, r7, #28
 8001292:	4619      	mov	r1, r3
 8001294:	4840      	ldr	r0, [pc, #256]	; (8001398 <I2Cx_MspInit+0x158>)
 8001296:	f002 fe47 	bl	8003f28 <HAL_GPIO_Init>

    /*** Configure the I2C peripheral ***/
    /* Enable I2C clock */
    DISCOVERY_AUDIO_I2Cx_CLK_ENABLE();
 800129a:	4a3e      	ldr	r2, [pc, #248]	; (8001394 <I2Cx_MspInit+0x154>)
 800129c:	4b3d      	ldr	r3, [pc, #244]	; (8001394 <I2Cx_MspInit+0x154>)
 800129e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012a0:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80012a4:	6413      	str	r3, [r2, #64]	; 0x40
 80012a6:	4b3b      	ldr	r3, [pc, #236]	; (8001394 <I2Cx_MspInit+0x154>)
 80012a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012aa:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80012ae:	617b      	str	r3, [r7, #20]
 80012b0:	697b      	ldr	r3, [r7, #20]

    /* Force the I2C peripheral clock reset */
    DISCOVERY_AUDIO_I2Cx_FORCE_RESET();
 80012b2:	4a38      	ldr	r2, [pc, #224]	; (8001394 <I2Cx_MspInit+0x154>)
 80012b4:	4b37      	ldr	r3, [pc, #220]	; (8001394 <I2Cx_MspInit+0x154>)
 80012b6:	6a1b      	ldr	r3, [r3, #32]
 80012b8:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80012bc:	6213      	str	r3, [r2, #32]

    /* Release the I2C peripheral clock reset */
    DISCOVERY_AUDIO_I2Cx_RELEASE_RESET();
 80012be:	4a35      	ldr	r2, [pc, #212]	; (8001394 <I2Cx_MspInit+0x154>)
 80012c0:	4b34      	ldr	r3, [pc, #208]	; (8001394 <I2Cx_MspInit+0x154>)
 80012c2:	6a1b      	ldr	r3, [r3, #32]
 80012c4:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80012c8:	6213      	str	r3, [r2, #32]

    /* Enable and set I2Cx Interrupt to a lower priority */
    HAL_NVIC_SetPriority(DISCOVERY_AUDIO_I2Cx_EV_IRQn, 0x0F, 0);
 80012ca:	2200      	movs	r2, #0
 80012cc:	210f      	movs	r1, #15
 80012ce:	2048      	movs	r0, #72	; 0x48
 80012d0:	f001 ff87 	bl	80031e2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_AUDIO_I2Cx_EV_IRQn);
 80012d4:	2048      	movs	r0, #72	; 0x48
 80012d6:	f001 ffa0 	bl	800321a <HAL_NVIC_EnableIRQ>

    /* Enable and set I2Cx Interrupt to a lower priority */
    HAL_NVIC_SetPriority(DISCOVERY_AUDIO_I2Cx_ER_IRQn, 0x0F, 0);
 80012da:	2200      	movs	r2, #0
 80012dc:	210f      	movs	r1, #15
 80012de:	2049      	movs	r0, #73	; 0x49
 80012e0:	f001 ff7f 	bl	80031e2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_AUDIO_I2Cx_ER_IRQn);
 80012e4:	2049      	movs	r0, #73	; 0x49
 80012e6:	f001 ff98 	bl	800321a <HAL_NVIC_EnableIRQ>

    /* Enable and set I2Cx Interrupt to a lower priority */
    HAL_NVIC_SetPriority(DISCOVERY_EXT_I2Cx_ER_IRQn, 0x0F, 0);
    HAL_NVIC_EnableIRQ(DISCOVERY_EXT_I2Cx_ER_IRQn);
  }
}
 80012ea:	e04d      	b.n	8001388 <I2Cx_MspInit+0x148>
    DISCOVERY_EXT_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 80012ec:	4a29      	ldr	r2, [pc, #164]	; (8001394 <I2Cx_MspInit+0x154>)
 80012ee:	4b29      	ldr	r3, [pc, #164]	; (8001394 <I2Cx_MspInit+0x154>)
 80012f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012f2:	f043 0302 	orr.w	r3, r3, #2
 80012f6:	6313      	str	r3, [r2, #48]	; 0x30
 80012f8:	4b26      	ldr	r3, [pc, #152]	; (8001394 <I2Cx_MspInit+0x154>)
 80012fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012fc:	f003 0302 	and.w	r3, r3, #2
 8001300:	613b      	str	r3, [r7, #16]
 8001302:	693b      	ldr	r3, [r7, #16]
    gpio_init_structure.Pin = DISCOVERY_EXT_I2Cx_SCL_PIN;
 8001304:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001308:	61fb      	str	r3, [r7, #28]
    gpio_init_structure.Mode = GPIO_MODE_AF_OD;
 800130a:	2312      	movs	r3, #18
 800130c:	623b      	str	r3, [r7, #32]
    gpio_init_structure.Pull = GPIO_NOPULL;
 800130e:	2300      	movs	r3, #0
 8001310:	627b      	str	r3, [r7, #36]	; 0x24
    gpio_init_structure.Speed = GPIO_SPEED_FAST;
 8001312:	2302      	movs	r3, #2
 8001314:	62bb      	str	r3, [r7, #40]	; 0x28
    gpio_init_structure.Alternate = DISCOVERY_EXT_I2Cx_SCL_SDA_AF;
 8001316:	2304      	movs	r3, #4
 8001318:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(DISCOVERY_EXT_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 800131a:	f107 031c 	add.w	r3, r7, #28
 800131e:	4619      	mov	r1, r3
 8001320:	481e      	ldr	r0, [pc, #120]	; (800139c <I2Cx_MspInit+0x15c>)
 8001322:	f002 fe01 	bl	8003f28 <HAL_GPIO_Init>
    gpio_init_structure.Pin = DISCOVERY_EXT_I2Cx_SDA_PIN;
 8001326:	f44f 7300 	mov.w	r3, #512	; 0x200
 800132a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(DISCOVERY_EXT_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 800132c:	f107 031c 	add.w	r3, r7, #28
 8001330:	4619      	mov	r1, r3
 8001332:	481a      	ldr	r0, [pc, #104]	; (800139c <I2Cx_MspInit+0x15c>)
 8001334:	f002 fdf8 	bl	8003f28 <HAL_GPIO_Init>
    DISCOVERY_EXT_I2Cx_CLK_ENABLE();
 8001338:	4a16      	ldr	r2, [pc, #88]	; (8001394 <I2Cx_MspInit+0x154>)
 800133a:	4b16      	ldr	r3, [pc, #88]	; (8001394 <I2Cx_MspInit+0x154>)
 800133c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800133e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001342:	6413      	str	r3, [r2, #64]	; 0x40
 8001344:	4b13      	ldr	r3, [pc, #76]	; (8001394 <I2Cx_MspInit+0x154>)
 8001346:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001348:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800134c:	60fb      	str	r3, [r7, #12]
 800134e:	68fb      	ldr	r3, [r7, #12]
    DISCOVERY_EXT_I2Cx_FORCE_RESET();
 8001350:	4a10      	ldr	r2, [pc, #64]	; (8001394 <I2Cx_MspInit+0x154>)
 8001352:	4b10      	ldr	r3, [pc, #64]	; (8001394 <I2Cx_MspInit+0x154>)
 8001354:	6a1b      	ldr	r3, [r3, #32]
 8001356:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800135a:	6213      	str	r3, [r2, #32]
    DISCOVERY_EXT_I2Cx_RELEASE_RESET();
 800135c:	4a0d      	ldr	r2, [pc, #52]	; (8001394 <I2Cx_MspInit+0x154>)
 800135e:	4b0d      	ldr	r3, [pc, #52]	; (8001394 <I2Cx_MspInit+0x154>)
 8001360:	6a1b      	ldr	r3, [r3, #32]
 8001362:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8001366:	6213      	str	r3, [r2, #32]
    HAL_NVIC_SetPriority(DISCOVERY_EXT_I2Cx_EV_IRQn, 0x0F, 0);
 8001368:	2200      	movs	r2, #0
 800136a:	210f      	movs	r1, #15
 800136c:	201f      	movs	r0, #31
 800136e:	f001 ff38 	bl	80031e2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_EXT_I2Cx_EV_IRQn);
 8001372:	201f      	movs	r0, #31
 8001374:	f001 ff51 	bl	800321a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(DISCOVERY_EXT_I2Cx_ER_IRQn, 0x0F, 0);
 8001378:	2200      	movs	r2, #0
 800137a:	210f      	movs	r1, #15
 800137c:	2020      	movs	r0, #32
 800137e:	f001 ff30 	bl	80031e2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_EXT_I2Cx_ER_IRQn);
 8001382:	2020      	movs	r0, #32
 8001384:	f001 ff49 	bl	800321a <HAL_NVIC_EnableIRQ>
}
 8001388:	bf00      	nop
 800138a:	3730      	adds	r7, #48	; 0x30
 800138c:	46bd      	mov	sp, r7
 800138e:	bd80      	pop	{r7, pc}
 8001390:	2002c9ac 	.word	0x2002c9ac
 8001394:	40023800 	.word	0x40023800
 8001398:	40021c00 	.word	0x40021c00
 800139c:	40020400 	.word	0x40020400

080013a0 <I2Cx_Init>:
  * @brief  Initializes I2C HAL.
  * @param  i2c_handler : I2C handler
  * @retval None
  */
static void I2Cx_Init(I2C_HandleTypeDef *i2c_handler)
{
 80013a0:	b580      	push	{r7, lr}
 80013a2:	b082      	sub	sp, #8
 80013a4:	af00      	add	r7, sp, #0
 80013a6:	6078      	str	r0, [r7, #4]
  if(HAL_I2C_GetState(i2c_handler) == HAL_I2C_STATE_RESET)
 80013a8:	6878      	ldr	r0, [r7, #4]
 80013aa:	f003 fab7 	bl	800491c <HAL_I2C_GetState>
 80013ae:	4603      	mov	r3, r0
 80013b0:	2b00      	cmp	r3, #0
 80013b2:	d125      	bne.n	8001400 <I2Cx_Init+0x60>
  {
    if (i2c_handler == (I2C_HandleTypeDef*)(&hI2cAudioHandler))
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	4a14      	ldr	r2, [pc, #80]	; (8001408 <I2Cx_Init+0x68>)
 80013b8:	4293      	cmp	r3, r2
 80013ba:	d103      	bne.n	80013c4 <I2Cx_Init+0x24>
    {
      /* Audio and LCD I2C configuration */
      i2c_handler->Instance = DISCOVERY_AUDIO_I2Cx;
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	4a13      	ldr	r2, [pc, #76]	; (800140c <I2Cx_Init+0x6c>)
 80013c0:	601a      	str	r2, [r3, #0]
 80013c2:	e002      	b.n	80013ca <I2Cx_Init+0x2a>
    }
    else
    {
      /* External, camera and Arduino connector  I2C configuration */
      i2c_handler->Instance = DISCOVERY_EXT_I2Cx;
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	4a12      	ldr	r2, [pc, #72]	; (8001410 <I2Cx_Init+0x70>)
 80013c8:	601a      	str	r2, [r3, #0]
    }
    i2c_handler->Init.Timing           = DISCOVERY_I2Cx_TIMING;
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	4a11      	ldr	r2, [pc, #68]	; (8001414 <I2Cx_Init+0x74>)
 80013ce:	605a      	str	r2, [r3, #4]
    i2c_handler->Init.OwnAddress1      = 0;
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	2200      	movs	r2, #0
 80013d4:	609a      	str	r2, [r3, #8]
    i2c_handler->Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	2201      	movs	r2, #1
 80013da:	60da      	str	r2, [r3, #12]
    i2c_handler->Init.DualAddressMode  = I2C_DUALADDRESS_DISABLE;
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	2200      	movs	r2, #0
 80013e0:	611a      	str	r2, [r3, #16]
    i2c_handler->Init.OwnAddress2      = 0;
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	2200      	movs	r2, #0
 80013e6:	615a      	str	r2, [r3, #20]
    i2c_handler->Init.GeneralCallMode  = I2C_GENERALCALL_DISABLE;
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	2200      	movs	r2, #0
 80013ec:	61da      	str	r2, [r3, #28]
    i2c_handler->Init.NoStretchMode    = I2C_NOSTRETCH_DISABLE;
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	2200      	movs	r2, #0
 80013f2:	621a      	str	r2, [r3, #32]

    /* Init the I2C */
    I2Cx_MspInit(i2c_handler);
 80013f4:	6878      	ldr	r0, [r7, #4]
 80013f6:	f7ff ff23 	bl	8001240 <I2Cx_MspInit>
    HAL_I2C_Init(i2c_handler);
 80013fa:	6878      	ldr	r0, [r7, #4]
 80013fc:	f002 ff70 	bl	80042e0 <HAL_I2C_Init>
  }
}
 8001400:	bf00      	nop
 8001402:	3708      	adds	r7, #8
 8001404:	46bd      	mov	sp, r7
 8001406:	bd80      	pop	{r7, pc}
 8001408:	2002c9ac 	.word	0x2002c9ac
 800140c:	40005c00 	.word	0x40005c00
 8001410:	40005400 	.word	0x40005400
 8001414:	40912732 	.word	0x40912732

08001418 <I2Cx_ReadMultiple>:
                                           uint8_t Addr,
                                           uint16_t Reg,
                                           uint16_t MemAddress,
                                           uint8_t *Buffer,
                                           uint16_t Length)
{
 8001418:	b580      	push	{r7, lr}
 800141a:	b08a      	sub	sp, #40	; 0x28
 800141c:	af04      	add	r7, sp, #16
 800141e:	60f8      	str	r0, [r7, #12]
 8001420:	4608      	mov	r0, r1
 8001422:	4611      	mov	r1, r2
 8001424:	461a      	mov	r2, r3
 8001426:	4603      	mov	r3, r0
 8001428:	72fb      	strb	r3, [r7, #11]
 800142a:	460b      	mov	r3, r1
 800142c:	813b      	strh	r3, [r7, #8]
 800142e:	4613      	mov	r3, r2
 8001430:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 8001432:	2300      	movs	r3, #0
 8001434:	75fb      	strb	r3, [r7, #23]

  status = HAL_I2C_Mem_Read(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 8001436:	7afb      	ldrb	r3, [r7, #11]
 8001438:	b299      	uxth	r1, r3
 800143a:	88f8      	ldrh	r0, [r7, #6]
 800143c:	893a      	ldrh	r2, [r7, #8]
 800143e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001442:	9302      	str	r3, [sp, #8]
 8001444:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001446:	9301      	str	r3, [sp, #4]
 8001448:	6a3b      	ldr	r3, [r7, #32]
 800144a:	9300      	str	r3, [sp, #0]
 800144c:	4603      	mov	r3, r0
 800144e:	68f8      	ldr	r0, [r7, #12]
 8001450:	f003 f93e 	bl	80046d0 <HAL_I2C_Mem_Read>
 8001454:	4603      	mov	r3, r0
 8001456:	75fb      	strb	r3, [r7, #23]

  /* Check the communication status */
  if(status != HAL_OK)
 8001458:	7dfb      	ldrb	r3, [r7, #23]
 800145a:	2b00      	cmp	r3, #0
 800145c:	d004      	beq.n	8001468 <I2Cx_ReadMultiple+0x50>
  {
    /* I2C error occurred */
    I2Cx_Error(i2c_handler, Addr);
 800145e:	7afb      	ldrb	r3, [r7, #11]
 8001460:	4619      	mov	r1, r3
 8001462:	68f8      	ldr	r0, [r7, #12]
 8001464:	f000 f832 	bl	80014cc <I2Cx_Error>
  }
  return status;    
 8001468:	7dfb      	ldrb	r3, [r7, #23]
}
 800146a:	4618      	mov	r0, r3
 800146c:	3718      	adds	r7, #24
 800146e:	46bd      	mov	sp, r7
 8001470:	bd80      	pop	{r7, pc}

08001472 <I2Cx_WriteMultiple>:
                                            uint8_t Addr,
                                            uint16_t Reg,
                                            uint16_t MemAddress,
                                            uint8_t *Buffer,
                                            uint16_t Length)
{
 8001472:	b580      	push	{r7, lr}
 8001474:	b08a      	sub	sp, #40	; 0x28
 8001476:	af04      	add	r7, sp, #16
 8001478:	60f8      	str	r0, [r7, #12]
 800147a:	4608      	mov	r0, r1
 800147c:	4611      	mov	r1, r2
 800147e:	461a      	mov	r2, r3
 8001480:	4603      	mov	r3, r0
 8001482:	72fb      	strb	r3, [r7, #11]
 8001484:	460b      	mov	r3, r1
 8001486:	813b      	strh	r3, [r7, #8]
 8001488:	4613      	mov	r3, r2
 800148a:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 800148c:	2300      	movs	r3, #0
 800148e:	75fb      	strb	r3, [r7, #23]
  
  status = HAL_I2C_Mem_Write(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 8001490:	7afb      	ldrb	r3, [r7, #11]
 8001492:	b299      	uxth	r1, r3
 8001494:	88f8      	ldrh	r0, [r7, #6]
 8001496:	893a      	ldrh	r2, [r7, #8]
 8001498:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800149c:	9302      	str	r3, [sp, #8]
 800149e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80014a0:	9301      	str	r3, [sp, #4]
 80014a2:	6a3b      	ldr	r3, [r7, #32]
 80014a4:	9300      	str	r3, [sp, #0]
 80014a6:	4603      	mov	r3, r0
 80014a8:	68f8      	ldr	r0, [r7, #12]
 80014aa:	f002 ffeb 	bl	8004484 <HAL_I2C_Mem_Write>
 80014ae:	4603      	mov	r3, r0
 80014b0:	75fb      	strb	r3, [r7, #23]
  
  /* Check the communication status */
  if(status != HAL_OK)
 80014b2:	7dfb      	ldrb	r3, [r7, #23]
 80014b4:	2b00      	cmp	r3, #0
 80014b6:	d004      	beq.n	80014c2 <I2Cx_WriteMultiple+0x50>
  {
    /* Re-Initiaize the I2C Bus */
    I2Cx_Error(i2c_handler, Addr);
 80014b8:	7afb      	ldrb	r3, [r7, #11]
 80014ba:	4619      	mov	r1, r3
 80014bc:	68f8      	ldr	r0, [r7, #12]
 80014be:	f000 f805 	bl	80014cc <I2Cx_Error>
  }
  return status;
 80014c2:	7dfb      	ldrb	r3, [r7, #23]
}
 80014c4:	4618      	mov	r0, r3
 80014c6:	3718      	adds	r7, #24
 80014c8:	46bd      	mov	sp, r7
 80014ca:	bd80      	pop	{r7, pc}

080014cc <I2Cx_Error>:
  * @param  i2c_handler : I2C handler
  * @param  Addr: I2C Address
  * @retval None
  */
static void I2Cx_Error(I2C_HandleTypeDef *i2c_handler, uint8_t Addr)
{
 80014cc:	b580      	push	{r7, lr}
 80014ce:	b082      	sub	sp, #8
 80014d0:	af00      	add	r7, sp, #0
 80014d2:	6078      	str	r0, [r7, #4]
 80014d4:	460b      	mov	r3, r1
 80014d6:	70fb      	strb	r3, [r7, #3]
  /* De-initialize the I2C communication bus */
  HAL_I2C_DeInit(i2c_handler);
 80014d8:	6878      	ldr	r0, [r7, #4]
 80014da:	f002 ff8f 	bl	80043fc <HAL_I2C_DeInit>
  
  /* Re-Initialize the I2C communication bus */
  I2Cx_Init(i2c_handler);
 80014de:	6878      	ldr	r0, [r7, #4]
 80014e0:	f7ff ff5e 	bl	80013a0 <I2Cx_Init>
}
 80014e4:	bf00      	nop
 80014e6:	3708      	adds	r7, #8
 80014e8:	46bd      	mov	sp, r7
 80014ea:	bd80      	pop	{r7, pc}

080014ec <TS_IO_Init>:
/**
  * @brief  Initializes Touchscreen low level.
  * @retval None
  */
void TS_IO_Init(void)
{
 80014ec:	b580      	push	{r7, lr}
 80014ee:	af00      	add	r7, sp, #0
  I2Cx_Init(&hI2cAudioHandler);
 80014f0:	4802      	ldr	r0, [pc, #8]	; (80014fc <TS_IO_Init+0x10>)
 80014f2:	f7ff ff55 	bl	80013a0 <I2Cx_Init>
}
 80014f6:	bf00      	nop
 80014f8:	bd80      	pop	{r7, pc}
 80014fa:	bf00      	nop
 80014fc:	2002c9ac 	.word	0x2002c9ac

08001500 <TS_IO_Write>:
  * @param  Reg: Reg address
  * @param  Value: Data to be written
  * @retval None
  */
void TS_IO_Write(uint8_t Addr, uint8_t Reg, uint8_t Value)
{
 8001500:	b580      	push	{r7, lr}
 8001502:	b084      	sub	sp, #16
 8001504:	af02      	add	r7, sp, #8
 8001506:	4603      	mov	r3, r0
 8001508:	71fb      	strb	r3, [r7, #7]
 800150a:	460b      	mov	r3, r1
 800150c:	71bb      	strb	r3, [r7, #6]
 800150e:	4613      	mov	r3, r2
 8001510:	717b      	strb	r3, [r7, #5]
  I2Cx_WriteMultiple(&hI2cAudioHandler, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT,(uint8_t*)&Value, 1);
 8001512:	79bb      	ldrb	r3, [r7, #6]
 8001514:	b29a      	uxth	r2, r3
 8001516:	79f9      	ldrb	r1, [r7, #7]
 8001518:	2301      	movs	r3, #1
 800151a:	9301      	str	r3, [sp, #4]
 800151c:	1d7b      	adds	r3, r7, #5
 800151e:	9300      	str	r3, [sp, #0]
 8001520:	2301      	movs	r3, #1
 8001522:	4803      	ldr	r0, [pc, #12]	; (8001530 <TS_IO_Write+0x30>)
 8001524:	f7ff ffa5 	bl	8001472 <I2Cx_WriteMultiple>
}
 8001528:	bf00      	nop
 800152a:	3708      	adds	r7, #8
 800152c:	46bd      	mov	sp, r7
 800152e:	bd80      	pop	{r7, pc}
 8001530:	2002c9ac 	.word	0x2002c9ac

08001534 <TS_IO_Read>:
  * @param  Addr: I2C address
  * @param  Reg: Reg address
  * @retval Data to be read
  */
uint8_t TS_IO_Read(uint8_t Addr, uint8_t Reg)
{
 8001534:	b580      	push	{r7, lr}
 8001536:	b086      	sub	sp, #24
 8001538:	af02      	add	r7, sp, #8
 800153a:	4603      	mov	r3, r0
 800153c:	460a      	mov	r2, r1
 800153e:	71fb      	strb	r3, [r7, #7]
 8001540:	4613      	mov	r3, r2
 8001542:	71bb      	strb	r3, [r7, #6]
  uint8_t read_value = 0;
 8001544:	2300      	movs	r3, #0
 8001546:	73fb      	strb	r3, [r7, #15]

  I2Cx_ReadMultiple(&hI2cAudioHandler, Addr, Reg, I2C_MEMADD_SIZE_8BIT, (uint8_t*)&read_value, 1);
 8001548:	79bb      	ldrb	r3, [r7, #6]
 800154a:	b29a      	uxth	r2, r3
 800154c:	79f9      	ldrb	r1, [r7, #7]
 800154e:	2301      	movs	r3, #1
 8001550:	9301      	str	r3, [sp, #4]
 8001552:	f107 030f 	add.w	r3, r7, #15
 8001556:	9300      	str	r3, [sp, #0]
 8001558:	2301      	movs	r3, #1
 800155a:	4804      	ldr	r0, [pc, #16]	; (800156c <TS_IO_Read+0x38>)
 800155c:	f7ff ff5c 	bl	8001418 <I2Cx_ReadMultiple>

  return read_value;
 8001560:	7bfb      	ldrb	r3, [r7, #15]
}
 8001562:	4618      	mov	r0, r3
 8001564:	3710      	adds	r7, #16
 8001566:	46bd      	mov	sp, r7
 8001568:	bd80      	pop	{r7, pc}
 800156a:	bf00      	nop
 800156c:	2002c9ac 	.word	0x2002c9ac

08001570 <TS_IO_Delay>:
  * @brief  TS delay
  * @param  Delay: Delay in ms
  * @retval None
  */
void TS_IO_Delay(uint32_t Delay)
{
 8001570:	b580      	push	{r7, lr}
 8001572:	b082      	sub	sp, #8
 8001574:	af00      	add	r7, sp, #0
 8001576:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8001578:	6878      	ldr	r0, [r7, #4]
 800157a:	f001 fd3b 	bl	8002ff4 <HAL_Delay>
}
 800157e:	bf00      	nop
 8001580:	3708      	adds	r7, #8
 8001582:	46bd      	mov	sp, r7
 8001584:	bd80      	pop	{r7, pc}
	...

08001588 <BSP_LCD_Init>:
/**
  * @brief  Initializes the LCD.
  * @retval LCD state
  */
uint8_t BSP_LCD_Init(void)
{    
 8001588:	b580      	push	{r7, lr}
 800158a:	af00      	add	r7, sp, #0
  /* Select the used LCD */

  /* The RK043FN48H LCD 480x272 is selected */
  /* Timing Configuration */
  hLtdcHandler.Init.HorizontalSync = (RK043FN48H_HSYNC - 1);
 800158c:	4b31      	ldr	r3, [pc, #196]	; (8001654 <BSP_LCD_Init+0xcc>)
 800158e:	2228      	movs	r2, #40	; 0x28
 8001590:	615a      	str	r2, [r3, #20]
  hLtdcHandler.Init.VerticalSync = (RK043FN48H_VSYNC - 1);
 8001592:	4b30      	ldr	r3, [pc, #192]	; (8001654 <BSP_LCD_Init+0xcc>)
 8001594:	2209      	movs	r2, #9
 8001596:	619a      	str	r2, [r3, #24]
  hLtdcHandler.Init.AccumulatedHBP = (RK043FN48H_HSYNC + RK043FN48H_HBP - 1);
 8001598:	4b2e      	ldr	r3, [pc, #184]	; (8001654 <BSP_LCD_Init+0xcc>)
 800159a:	2235      	movs	r2, #53	; 0x35
 800159c:	61da      	str	r2, [r3, #28]
  hLtdcHandler.Init.AccumulatedVBP = (RK043FN48H_VSYNC + RK043FN48H_VBP - 1);
 800159e:	4b2d      	ldr	r3, [pc, #180]	; (8001654 <BSP_LCD_Init+0xcc>)
 80015a0:	220b      	movs	r2, #11
 80015a2:	621a      	str	r2, [r3, #32]
  hLtdcHandler.Init.AccumulatedActiveH = (RK043FN48H_HEIGHT + RK043FN48H_VSYNC + RK043FN48H_VBP - 1);
 80015a4:	4b2b      	ldr	r3, [pc, #172]	; (8001654 <BSP_LCD_Init+0xcc>)
 80015a6:	f240 121b 	movw	r2, #283	; 0x11b
 80015aa:	629a      	str	r2, [r3, #40]	; 0x28
  hLtdcHandler.Init.AccumulatedActiveW = (RK043FN48H_WIDTH + RK043FN48H_HSYNC + RK043FN48H_HBP - 1);
 80015ac:	4b29      	ldr	r3, [pc, #164]	; (8001654 <BSP_LCD_Init+0xcc>)
 80015ae:	f240 2215 	movw	r2, #533	; 0x215
 80015b2:	625a      	str	r2, [r3, #36]	; 0x24
  hLtdcHandler.Init.TotalHeigh = (RK043FN48H_HEIGHT + RK043FN48H_VSYNC + RK043FN48H_VBP + RK043FN48H_VFP - 1);
 80015b4:	4b27      	ldr	r3, [pc, #156]	; (8001654 <BSP_LCD_Init+0xcc>)
 80015b6:	f240 121d 	movw	r2, #285	; 0x11d
 80015ba:	631a      	str	r2, [r3, #48]	; 0x30
  hLtdcHandler.Init.TotalWidth = (RK043FN48H_WIDTH + RK043FN48H_HSYNC + RK043FN48H_HBP + RK043FN48H_HFP - 1);
 80015bc:	4b25      	ldr	r3, [pc, #148]	; (8001654 <BSP_LCD_Init+0xcc>)
 80015be:	f240 2235 	movw	r2, #565	; 0x235
 80015c2:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* LCD clock configuration */
  BSP_LCD_ClockConfig(&hLtdcHandler, NULL);
 80015c4:	2100      	movs	r1, #0
 80015c6:	4823      	ldr	r0, [pc, #140]	; (8001654 <BSP_LCD_Init+0xcc>)
 80015c8:	f000 ff64 	bl	8002494 <BSP_LCD_ClockConfig>

  /* Initialize the LCD pixel width and pixel height */
  hLtdcHandler.LayerCfg->ImageWidth  = RK043FN48H_WIDTH;
 80015cc:	4b21      	ldr	r3, [pc, #132]	; (8001654 <BSP_LCD_Init+0xcc>)
 80015ce:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 80015d2:	661a      	str	r2, [r3, #96]	; 0x60
  hLtdcHandler.LayerCfg->ImageHeight = RK043FN48H_HEIGHT;
 80015d4:	4b1f      	ldr	r3, [pc, #124]	; (8001654 <BSP_LCD_Init+0xcc>)
 80015d6:	f44f 7288 	mov.w	r2, #272	; 0x110
 80015da:	665a      	str	r2, [r3, #100]	; 0x64

  /* Background value */
  hLtdcHandler.Init.Backcolor.Blue = 0;
 80015dc:	4b1d      	ldr	r3, [pc, #116]	; (8001654 <BSP_LCD_Init+0xcc>)
 80015de:	2200      	movs	r2, #0
 80015e0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hLtdcHandler.Init.Backcolor.Green = 0;
 80015e4:	4b1b      	ldr	r3, [pc, #108]	; (8001654 <BSP_LCD_Init+0xcc>)
 80015e6:	2200      	movs	r2, #0
 80015e8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  hLtdcHandler.Init.Backcolor.Red = 0;
 80015ec:	4b19      	ldr	r3, [pc, #100]	; (8001654 <BSP_LCD_Init+0xcc>)
 80015ee:	2200      	movs	r2, #0
 80015f0:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
  
  /* Polarity */
  hLtdcHandler.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 80015f4:	4b17      	ldr	r3, [pc, #92]	; (8001654 <BSP_LCD_Init+0xcc>)
 80015f6:	2200      	movs	r2, #0
 80015f8:	605a      	str	r2, [r3, #4]
  hLtdcHandler.Init.VSPolarity = LTDC_VSPOLARITY_AL; 
 80015fa:	4b16      	ldr	r3, [pc, #88]	; (8001654 <BSP_LCD_Init+0xcc>)
 80015fc:	2200      	movs	r2, #0
 80015fe:	609a      	str	r2, [r3, #8]
  hLtdcHandler.Init.DEPolarity = LTDC_DEPOLARITY_AL;  
 8001600:	4b14      	ldr	r3, [pc, #80]	; (8001654 <BSP_LCD_Init+0xcc>)
 8001602:	2200      	movs	r2, #0
 8001604:	60da      	str	r2, [r3, #12]
  hLtdcHandler.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8001606:	4b13      	ldr	r3, [pc, #76]	; (8001654 <BSP_LCD_Init+0xcc>)
 8001608:	2200      	movs	r2, #0
 800160a:	611a      	str	r2, [r3, #16]
  hLtdcHandler.Instance = LTDC;
 800160c:	4b11      	ldr	r3, [pc, #68]	; (8001654 <BSP_LCD_Init+0xcc>)
 800160e:	4a12      	ldr	r2, [pc, #72]	; (8001658 <BSP_LCD_Init+0xd0>)
 8001610:	601a      	str	r2, [r3, #0]

  if(HAL_LTDC_GetState(&hLtdcHandler) == HAL_LTDC_STATE_RESET)
 8001612:	4810      	ldr	r0, [pc, #64]	; (8001654 <BSP_LCD_Init+0xcc>)
 8001614:	f003 fd98 	bl	8005148 <HAL_LTDC_GetState>
 8001618:	4603      	mov	r3, r0
 800161a:	2b00      	cmp	r3, #0
 800161c:	d103      	bne.n	8001626 <BSP_LCD_Init+0x9e>
  {
    /* Initialize the LCD Msp: this __weak function can be rewritten by the application */
    BSP_LCD_MspInit(&hLtdcHandler, NULL);
 800161e:	2100      	movs	r1, #0
 8001620:	480c      	ldr	r0, [pc, #48]	; (8001654 <BSP_LCD_Init+0xcc>)
 8001622:	f000 fe5d 	bl	80022e0 <BSP_LCD_MspInit>
  }
  HAL_LTDC_Init(&hLtdcHandler);
 8001626:	480b      	ldr	r0, [pc, #44]	; (8001654 <BSP_LCD_Init+0xcc>)
 8001628:	f003 fbaa 	bl	8004d80 <HAL_LTDC_Init>

  /* Assert display enable LCD_DISP pin */
  HAL_GPIO_WritePin(LCD_DISP_GPIO_PORT, LCD_DISP_PIN, GPIO_PIN_SET);
 800162c:	2201      	movs	r2, #1
 800162e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001632:	480a      	ldr	r0, [pc, #40]	; (800165c <BSP_LCD_Init+0xd4>)
 8001634:	f002 fe3a 	bl	80042ac <HAL_GPIO_WritePin>

  /* Assert backlight LCD_BL_CTRL pin */
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_PORT, LCD_BL_CTRL_PIN, GPIO_PIN_SET);
 8001638:	2201      	movs	r2, #1
 800163a:	2108      	movs	r1, #8
 800163c:	4808      	ldr	r0, [pc, #32]	; (8001660 <BSP_LCD_Init+0xd8>)
 800163e:	f002 fe35 	bl	80042ac <HAL_GPIO_WritePin>

#if !defined(DATA_IN_ExtSDRAM)
  /* Initialize the SDRAM */
  BSP_SDRAM_Init();
 8001642:	f001 f88b 	bl	800275c <BSP_SDRAM_Init>
#endif
    
  /* Initialize the font */
  BSP_LCD_SetFont(&LCD_DEFAULT_FONT);
 8001646:	4807      	ldr	r0, [pc, #28]	; (8001664 <BSP_LCD_Init+0xdc>)
 8001648:	f000 f8d8 	bl	80017fc <BSP_LCD_SetFont>
  
  return LCD_OK;
 800164c:	2300      	movs	r3, #0
}
 800164e:	4618      	mov	r0, r3
 8001650:	bd80      	pop	{r7, pc}
 8001652:	bf00      	nop
 8001654:	2002cba8 	.word	0x2002cba8
 8001658:	40016800 	.word	0x40016800
 800165c:	40022000 	.word	0x40022000
 8001660:	40022800 	.word	0x40022800
 8001664:	20000028 	.word	0x20000028

08001668 <BSP_LCD_GetXSize>:
/**
  * @brief  Gets the LCD X size.
  * @retval Used LCD X size
  */
uint32_t BSP_LCD_GetXSize(void)
{
 8001668:	b480      	push	{r7}
 800166a:	af00      	add	r7, sp, #0
  return hLtdcHandler.LayerCfg[ActiveLayer].ImageWidth;
 800166c:	4b06      	ldr	r3, [pc, #24]	; (8001688 <BSP_LCD_GetXSize+0x20>)
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	4a06      	ldr	r2, [pc, #24]	; (800168c <BSP_LCD_GetXSize+0x24>)
 8001672:	2134      	movs	r1, #52	; 0x34
 8001674:	fb01 f303 	mul.w	r3, r1, r3
 8001678:	4413      	add	r3, r2
 800167a:	3360      	adds	r3, #96	; 0x60
 800167c:	681b      	ldr	r3, [r3, #0]
}
 800167e:	4618      	mov	r0, r3
 8001680:	46bd      	mov	sp, r7
 8001682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001686:	4770      	bx	lr
 8001688:	2002ca38 	.word	0x2002ca38
 800168c:	2002cba8 	.word	0x2002cba8

08001690 <BSP_LCD_GetYSize>:
/**
  * @brief  Gets the LCD Y size.
  * @retval Used LCD Y size
  */
uint32_t BSP_LCD_GetYSize(void)
{
 8001690:	b480      	push	{r7}
 8001692:	af00      	add	r7, sp, #0
  return hLtdcHandler.LayerCfg[ActiveLayer].ImageHeight;
 8001694:	4b06      	ldr	r3, [pc, #24]	; (80016b0 <BSP_LCD_GetYSize+0x20>)
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	4a06      	ldr	r2, [pc, #24]	; (80016b4 <BSP_LCD_GetYSize+0x24>)
 800169a:	2134      	movs	r1, #52	; 0x34
 800169c:	fb01 f303 	mul.w	r3, r1, r3
 80016a0:	4413      	add	r3, r2
 80016a2:	3364      	adds	r3, #100	; 0x64
 80016a4:	681b      	ldr	r3, [r3, #0]
}
 80016a6:	4618      	mov	r0, r3
 80016a8:	46bd      	mov	sp, r7
 80016aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ae:	4770      	bx	lr
 80016b0:	2002ca38 	.word	0x2002ca38
 80016b4:	2002cba8 	.word	0x2002cba8

080016b8 <BSP_LCD_LayerDefaultInit>:
  * @param  LayerIndex: Layer foreground or background
  * @param  FB_Address: Layer frame buffer
  * @retval None
  */
void BSP_LCD_LayerDefaultInit(uint16_t LayerIndex, uint32_t FB_Address)
{     
 80016b8:	b580      	push	{r7, lr}
 80016ba:	b090      	sub	sp, #64	; 0x40
 80016bc:	af00      	add	r7, sp, #0
 80016be:	4603      	mov	r3, r0
 80016c0:	6039      	str	r1, [r7, #0]
 80016c2:	80fb      	strh	r3, [r7, #6]
  LCD_LayerCfgTypeDef  layer_cfg;

  /* Layer Init */
  layer_cfg.WindowX0 = 0;
 80016c4:	2300      	movs	r3, #0
 80016c6:	60fb      	str	r3, [r7, #12]
  layer_cfg.WindowX1 = BSP_LCD_GetXSize();
 80016c8:	f7ff ffce 	bl	8001668 <BSP_LCD_GetXSize>
 80016cc:	4603      	mov	r3, r0
 80016ce:	613b      	str	r3, [r7, #16]
  layer_cfg.WindowY0 = 0;
 80016d0:	2300      	movs	r3, #0
 80016d2:	617b      	str	r3, [r7, #20]
  layer_cfg.WindowY1 = BSP_LCD_GetYSize(); 
 80016d4:	f7ff ffdc 	bl	8001690 <BSP_LCD_GetYSize>
 80016d8:	4603      	mov	r3, r0
 80016da:	61bb      	str	r3, [r7, #24]
  layer_cfg.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 80016dc:	2300      	movs	r3, #0
 80016de:	61fb      	str	r3, [r7, #28]
  layer_cfg.FBStartAdress = FB_Address;
 80016e0:	683b      	ldr	r3, [r7, #0]
 80016e2:	633b      	str	r3, [r7, #48]	; 0x30
  layer_cfg.Alpha = 255;
 80016e4:	23ff      	movs	r3, #255	; 0xff
 80016e6:	623b      	str	r3, [r7, #32]
  layer_cfg.Alpha0 = 0;
 80016e8:	2300      	movs	r3, #0
 80016ea:	627b      	str	r3, [r7, #36]	; 0x24
  layer_cfg.Backcolor.Blue = 0;
 80016ec:	2300      	movs	r3, #0
 80016ee:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
  layer_cfg.Backcolor.Green = 0;
 80016f2:	2300      	movs	r3, #0
 80016f4:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  layer_cfg.Backcolor.Red = 0;
 80016f8:	2300      	movs	r3, #0
 80016fa:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  layer_cfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 80016fe:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001702:	62bb      	str	r3, [r7, #40]	; 0x28
  layer_cfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 8001704:	2307      	movs	r3, #7
 8001706:	62fb      	str	r3, [r7, #44]	; 0x2c
  layer_cfg.ImageWidth = BSP_LCD_GetXSize();
 8001708:	f7ff ffae 	bl	8001668 <BSP_LCD_GetXSize>
 800170c:	4603      	mov	r3, r0
 800170e:	637b      	str	r3, [r7, #52]	; 0x34
  layer_cfg.ImageHeight = BSP_LCD_GetYSize();
 8001710:	f7ff ffbe 	bl	8001690 <BSP_LCD_GetYSize>
 8001714:	4603      	mov	r3, r0
 8001716:	63bb      	str	r3, [r7, #56]	; 0x38
  
  HAL_LTDC_ConfigLayer(&hLtdcHandler, &layer_cfg, LayerIndex); 
 8001718:	88fa      	ldrh	r2, [r7, #6]
 800171a:	f107 030c 	add.w	r3, r7, #12
 800171e:	4619      	mov	r1, r3
 8001720:	4812      	ldr	r0, [pc, #72]	; (800176c <BSP_LCD_LayerDefaultInit+0xb4>)
 8001722:	f003 fcd3 	bl	80050cc <HAL_LTDC_ConfigLayer>

  DrawProp[LayerIndex].BackColor = LCD_COLOR_WHITE;
 8001726:	88fa      	ldrh	r2, [r7, #6]
 8001728:	4911      	ldr	r1, [pc, #68]	; (8001770 <BSP_LCD_LayerDefaultInit+0xb8>)
 800172a:	4613      	mov	r3, r2
 800172c:	005b      	lsls	r3, r3, #1
 800172e:	4413      	add	r3, r2
 8001730:	009b      	lsls	r3, r3, #2
 8001732:	440b      	add	r3, r1
 8001734:	3304      	adds	r3, #4
 8001736:	f04f 32ff 	mov.w	r2, #4294967295
 800173a:	601a      	str	r2, [r3, #0]
  DrawProp[LayerIndex].pFont     = &Font24;
 800173c:	88fa      	ldrh	r2, [r7, #6]
 800173e:	490c      	ldr	r1, [pc, #48]	; (8001770 <BSP_LCD_LayerDefaultInit+0xb8>)
 8001740:	4613      	mov	r3, r2
 8001742:	005b      	lsls	r3, r3, #1
 8001744:	4413      	add	r3, r2
 8001746:	009b      	lsls	r3, r3, #2
 8001748:	440b      	add	r3, r1
 800174a:	3308      	adds	r3, #8
 800174c:	4a09      	ldr	r2, [pc, #36]	; (8001774 <BSP_LCD_LayerDefaultInit+0xbc>)
 800174e:	601a      	str	r2, [r3, #0]
  DrawProp[LayerIndex].TextColor = LCD_COLOR_BLACK; 
 8001750:	88fa      	ldrh	r2, [r7, #6]
 8001752:	4907      	ldr	r1, [pc, #28]	; (8001770 <BSP_LCD_LayerDefaultInit+0xb8>)
 8001754:	4613      	mov	r3, r2
 8001756:	005b      	lsls	r3, r3, #1
 8001758:	4413      	add	r3, r2
 800175a:	009b      	lsls	r3, r3, #2
 800175c:	440b      	add	r3, r1
 800175e:	f04f 427f 	mov.w	r2, #4278190080	; 0xff000000
 8001762:	601a      	str	r2, [r3, #0]
}
 8001764:	bf00      	nop
 8001766:	3740      	adds	r7, #64	; 0x40
 8001768:	46bd      	mov	sp, r7
 800176a:	bd80      	pop	{r7, pc}
 800176c:	2002cba8 	.word	0x2002cba8
 8001770:	2002ca3c 	.word	0x2002ca3c
 8001774:	20000028 	.word	0x20000028

08001778 <BSP_LCD_SelectLayer>:
  * @brief  Selects the LCD Layer.
  * @param  LayerIndex: Layer foreground or background
  * @retval None
  */
void BSP_LCD_SelectLayer(uint32_t LayerIndex)
{
 8001778:	b480      	push	{r7}
 800177a:	b083      	sub	sp, #12
 800177c:	af00      	add	r7, sp, #0
 800177e:	6078      	str	r0, [r7, #4]
  ActiveLayer = LayerIndex;
 8001780:	4a04      	ldr	r2, [pc, #16]	; (8001794 <BSP_LCD_SelectLayer+0x1c>)
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	6013      	str	r3, [r2, #0]
} 
 8001786:	bf00      	nop
 8001788:	370c      	adds	r7, #12
 800178a:	46bd      	mov	sp, r7
 800178c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001790:	4770      	bx	lr
 8001792:	bf00      	nop
 8001794:	2002ca38 	.word	0x2002ca38

08001798 <BSP_LCD_SetTextColor>:
  * @brief  Sets the LCD text color.
  * @param  Color: Text color code ARGB(8-8-8-8)
  * @retval None
  */
void BSP_LCD_SetTextColor(uint32_t Color)
{
 8001798:	b480      	push	{r7}
 800179a:	b083      	sub	sp, #12
 800179c:	af00      	add	r7, sp, #0
 800179e:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].TextColor = Color;
 80017a0:	4b07      	ldr	r3, [pc, #28]	; (80017c0 <BSP_LCD_SetTextColor+0x28>)
 80017a2:	681a      	ldr	r2, [r3, #0]
 80017a4:	4907      	ldr	r1, [pc, #28]	; (80017c4 <BSP_LCD_SetTextColor+0x2c>)
 80017a6:	4613      	mov	r3, r2
 80017a8:	005b      	lsls	r3, r3, #1
 80017aa:	4413      	add	r3, r2
 80017ac:	009b      	lsls	r3, r3, #2
 80017ae:	440b      	add	r3, r1
 80017b0:	687a      	ldr	r2, [r7, #4]
 80017b2:	601a      	str	r2, [r3, #0]
}
 80017b4:	bf00      	nop
 80017b6:	370c      	adds	r7, #12
 80017b8:	46bd      	mov	sp, r7
 80017ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017be:	4770      	bx	lr
 80017c0:	2002ca38 	.word	0x2002ca38
 80017c4:	2002ca3c 	.word	0x2002ca3c

080017c8 <BSP_LCD_SetBackColor>:
  * @brief  Sets the LCD background color.
  * @param  Color: Layer background color code ARGB(8-8-8-8)
  * @retval None
  */
void BSP_LCD_SetBackColor(uint32_t Color)
{
 80017c8:	b480      	push	{r7}
 80017ca:	b083      	sub	sp, #12
 80017cc:	af00      	add	r7, sp, #0
 80017ce:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].BackColor = Color;
 80017d0:	4b08      	ldr	r3, [pc, #32]	; (80017f4 <BSP_LCD_SetBackColor+0x2c>)
 80017d2:	681a      	ldr	r2, [r3, #0]
 80017d4:	4908      	ldr	r1, [pc, #32]	; (80017f8 <BSP_LCD_SetBackColor+0x30>)
 80017d6:	4613      	mov	r3, r2
 80017d8:	005b      	lsls	r3, r3, #1
 80017da:	4413      	add	r3, r2
 80017dc:	009b      	lsls	r3, r3, #2
 80017de:	440b      	add	r3, r1
 80017e0:	3304      	adds	r3, #4
 80017e2:	687a      	ldr	r2, [r7, #4]
 80017e4:	601a      	str	r2, [r3, #0]
}
 80017e6:	bf00      	nop
 80017e8:	370c      	adds	r7, #12
 80017ea:	46bd      	mov	sp, r7
 80017ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f0:	4770      	bx	lr
 80017f2:	bf00      	nop
 80017f4:	2002ca38 	.word	0x2002ca38
 80017f8:	2002ca3c 	.word	0x2002ca3c

080017fc <BSP_LCD_SetFont>:
  * @brief  Sets the LCD text font.
  * @param  fonts: Layer font to be used
  * @retval None
  */
void BSP_LCD_SetFont(sFONT *fonts)
{
 80017fc:	b480      	push	{r7}
 80017fe:	b083      	sub	sp, #12
 8001800:	af00      	add	r7, sp, #0
 8001802:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].pFont = fonts;
 8001804:	4b08      	ldr	r3, [pc, #32]	; (8001828 <BSP_LCD_SetFont+0x2c>)
 8001806:	681a      	ldr	r2, [r3, #0]
 8001808:	4908      	ldr	r1, [pc, #32]	; (800182c <BSP_LCD_SetFont+0x30>)
 800180a:	4613      	mov	r3, r2
 800180c:	005b      	lsls	r3, r3, #1
 800180e:	4413      	add	r3, r2
 8001810:	009b      	lsls	r3, r3, #2
 8001812:	440b      	add	r3, r1
 8001814:	3308      	adds	r3, #8
 8001816:	687a      	ldr	r2, [r7, #4]
 8001818:	601a      	str	r2, [r3, #0]
}
 800181a:	bf00      	nop
 800181c:	370c      	adds	r7, #12
 800181e:	46bd      	mov	sp, r7
 8001820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001824:	4770      	bx	lr
 8001826:	bf00      	nop
 8001828:	2002ca38 	.word	0x2002ca38
 800182c:	2002ca3c 	.word	0x2002ca3c

08001830 <BSP_LCD_GetFont>:
/**
  * @brief  Gets the LCD text font.
  * @retval Used layer font
  */
sFONT *BSP_LCD_GetFont(void)
{
 8001830:	b480      	push	{r7}
 8001832:	af00      	add	r7, sp, #0
  return DrawProp[ActiveLayer].pFont;
 8001834:	4b07      	ldr	r3, [pc, #28]	; (8001854 <BSP_LCD_GetFont+0x24>)
 8001836:	681a      	ldr	r2, [r3, #0]
 8001838:	4907      	ldr	r1, [pc, #28]	; (8001858 <BSP_LCD_GetFont+0x28>)
 800183a:	4613      	mov	r3, r2
 800183c:	005b      	lsls	r3, r3, #1
 800183e:	4413      	add	r3, r2
 8001840:	009b      	lsls	r3, r3, #2
 8001842:	440b      	add	r3, r1
 8001844:	3308      	adds	r3, #8
 8001846:	681b      	ldr	r3, [r3, #0]
}
 8001848:	4618      	mov	r0, r3
 800184a:	46bd      	mov	sp, r7
 800184c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001850:	4770      	bx	lr
 8001852:	bf00      	nop
 8001854:	2002ca38 	.word	0x2002ca38
 8001858:	2002ca3c 	.word	0x2002ca3c

0800185c <BSP_LCD_Clear>:
  * @brief  Clears the hole LCD.
  * @param  Color: Color of the background
  * @retval None
  */
void BSP_LCD_Clear(uint32_t Color)
{ 
 800185c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800185e:	b085      	sub	sp, #20
 8001860:	af02      	add	r7, sp, #8
 8001862:	6078      	str	r0, [r7, #4]
  /* Clear the LCD */ 
  LL_FillBuffer(ActiveLayer, (uint32_t *)(hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress), BSP_LCD_GetXSize(), BSP_LCD_GetYSize(), 0, Color);
 8001864:	4b0f      	ldr	r3, [pc, #60]	; (80018a4 <BSP_LCD_Clear+0x48>)
 8001866:	681c      	ldr	r4, [r3, #0]
 8001868:	4b0e      	ldr	r3, [pc, #56]	; (80018a4 <BSP_LCD_Clear+0x48>)
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	4a0e      	ldr	r2, [pc, #56]	; (80018a8 <BSP_LCD_Clear+0x4c>)
 800186e:	2134      	movs	r1, #52	; 0x34
 8001870:	fb01 f303 	mul.w	r3, r1, r3
 8001874:	4413      	add	r3, r2
 8001876:	335c      	adds	r3, #92	; 0x5c
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	461d      	mov	r5, r3
 800187c:	f7ff fef4 	bl	8001668 <BSP_LCD_GetXSize>
 8001880:	4606      	mov	r6, r0
 8001882:	f7ff ff05 	bl	8001690 <BSP_LCD_GetYSize>
 8001886:	4602      	mov	r2, r0
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	9301      	str	r3, [sp, #4]
 800188c:	2300      	movs	r3, #0
 800188e:	9300      	str	r3, [sp, #0]
 8001890:	4613      	mov	r3, r2
 8001892:	4632      	mov	r2, r6
 8001894:	4629      	mov	r1, r5
 8001896:	4620      	mov	r0, r4
 8001898:	f000 fed0 	bl	800263c <LL_FillBuffer>
}
 800189c:	bf00      	nop
 800189e:	370c      	adds	r7, #12
 80018a0:	46bd      	mov	sp, r7
 80018a2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80018a4:	2002ca38 	.word	0x2002ca38
 80018a8:	2002cba8 	.word	0x2002cba8

080018ac <BSP_LCD_DisplayChar>:
  * @param  Ascii: Character ascii code
  *           This parameter must be a number between Min_Data = 0x20 and Max_Data = 0x7E 
  * @retval None
  */
void BSP_LCD_DisplayChar(uint16_t Xpos, uint16_t Ypos, uint8_t Ascii)
{
 80018ac:	b590      	push	{r4, r7, lr}
 80018ae:	b083      	sub	sp, #12
 80018b0:	af00      	add	r7, sp, #0
 80018b2:	4603      	mov	r3, r0
 80018b4:	80fb      	strh	r3, [r7, #6]
 80018b6:	460b      	mov	r3, r1
 80018b8:	80bb      	strh	r3, [r7, #4]
 80018ba:	4613      	mov	r3, r2
 80018bc:	70fb      	strb	r3, [r7, #3]
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 80018be:	4b1b      	ldr	r3, [pc, #108]	; (800192c <BSP_LCD_DisplayChar+0x80>)
 80018c0:	681a      	ldr	r2, [r3, #0]
 80018c2:	491b      	ldr	r1, [pc, #108]	; (8001930 <BSP_LCD_DisplayChar+0x84>)
 80018c4:	4613      	mov	r3, r2
 80018c6:	005b      	lsls	r3, r3, #1
 80018c8:	4413      	add	r3, r2
 80018ca:	009b      	lsls	r3, r3, #2
 80018cc:	440b      	add	r3, r1
 80018ce:	3308      	adds	r3, #8
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	6819      	ldr	r1, [r3, #0]
 80018d4:	78fb      	ldrb	r3, [r7, #3]
 80018d6:	f1a3 0020 	sub.w	r0, r3, #32
    DrawProp[ActiveLayer].pFont->Height * ((DrawProp[ActiveLayer].pFont->Width + 7) / 8)]);
 80018da:	4b14      	ldr	r3, [pc, #80]	; (800192c <BSP_LCD_DisplayChar+0x80>)
 80018dc:	681a      	ldr	r2, [r3, #0]
 80018de:	4c14      	ldr	r4, [pc, #80]	; (8001930 <BSP_LCD_DisplayChar+0x84>)
 80018e0:	4613      	mov	r3, r2
 80018e2:	005b      	lsls	r3, r3, #1
 80018e4:	4413      	add	r3, r2
 80018e6:	009b      	lsls	r3, r3, #2
 80018e8:	4423      	add	r3, r4
 80018ea:	3308      	adds	r3, #8
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	88db      	ldrh	r3, [r3, #6]
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 80018f0:	fb03 f000 	mul.w	r0, r3, r0
    DrawProp[ActiveLayer].pFont->Height * ((DrawProp[ActiveLayer].pFont->Width + 7) / 8)]);
 80018f4:	4b0d      	ldr	r3, [pc, #52]	; (800192c <BSP_LCD_DisplayChar+0x80>)
 80018f6:	681a      	ldr	r2, [r3, #0]
 80018f8:	4c0d      	ldr	r4, [pc, #52]	; (8001930 <BSP_LCD_DisplayChar+0x84>)
 80018fa:	4613      	mov	r3, r2
 80018fc:	005b      	lsls	r3, r3, #1
 80018fe:	4413      	add	r3, r2
 8001900:	009b      	lsls	r3, r3, #2
 8001902:	4423      	add	r3, r4
 8001904:	3308      	adds	r3, #8
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	889b      	ldrh	r3, [r3, #4]
 800190a:	3307      	adds	r3, #7
 800190c:	2b00      	cmp	r3, #0
 800190e:	da00      	bge.n	8001912 <BSP_LCD_DisplayChar+0x66>
 8001910:	3307      	adds	r3, #7
 8001912:	10db      	asrs	r3, r3, #3
 8001914:	fb03 f300 	mul.w	r3, r3, r0
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 8001918:	18ca      	adds	r2, r1, r3
 800191a:	88b9      	ldrh	r1, [r7, #4]
 800191c:	88fb      	ldrh	r3, [r7, #6]
 800191e:	4618      	mov	r0, r3
 8001920:	f000 fdd4 	bl	80024cc <DrawChar>
}
 8001924:	bf00      	nop
 8001926:	370c      	adds	r7, #12
 8001928:	46bd      	mov	sp, r7
 800192a:	bd90      	pop	{r4, r7, pc}
 800192c:	2002ca38 	.word	0x2002ca38
 8001930:	2002ca3c 	.word	0x2002ca3c

08001934 <BSP_LCD_DisplayStringAt>:
  *            @arg  RIGHT_MODE
  *            @arg  LEFT_MODE   
  * @retval None
  */
void BSP_LCD_DisplayStringAt(uint16_t Xpos, uint16_t Ypos, uint8_t *Text, Text_AlignModeTypdef Mode)
{
 8001934:	b5b0      	push	{r4, r5, r7, lr}
 8001936:	b088      	sub	sp, #32
 8001938:	af00      	add	r7, sp, #0
 800193a:	60ba      	str	r2, [r7, #8]
 800193c:	461a      	mov	r2, r3
 800193e:	4603      	mov	r3, r0
 8001940:	81fb      	strh	r3, [r7, #14]
 8001942:	460b      	mov	r3, r1
 8001944:	81bb      	strh	r3, [r7, #12]
 8001946:	4613      	mov	r3, r2
 8001948:	71fb      	strb	r3, [r7, #7]
  uint16_t ref_column = 1, i = 0;
 800194a:	2301      	movs	r3, #1
 800194c:	83fb      	strh	r3, [r7, #30]
 800194e:	2300      	movs	r3, #0
 8001950:	83bb      	strh	r3, [r7, #28]
  uint32_t size = 0, xsize = 0; 
 8001952:	2300      	movs	r3, #0
 8001954:	61bb      	str	r3, [r7, #24]
 8001956:	2300      	movs	r3, #0
 8001958:	613b      	str	r3, [r7, #16]
  uint8_t  *ptr = Text;
 800195a:	68bb      	ldr	r3, [r7, #8]
 800195c:	617b      	str	r3, [r7, #20]
  
  /* Get the text size */
  while (*ptr++) size ++ ;
 800195e:	e002      	b.n	8001966 <BSP_LCD_DisplayStringAt+0x32>
 8001960:	69bb      	ldr	r3, [r7, #24]
 8001962:	3301      	adds	r3, #1
 8001964:	61bb      	str	r3, [r7, #24]
 8001966:	697b      	ldr	r3, [r7, #20]
 8001968:	1c5a      	adds	r2, r3, #1
 800196a:	617a      	str	r2, [r7, #20]
 800196c:	781b      	ldrb	r3, [r3, #0]
 800196e:	2b00      	cmp	r3, #0
 8001970:	d1f6      	bne.n	8001960 <BSP_LCD_DisplayStringAt+0x2c>
  
  /* Characters number per line */
  xsize = (BSP_LCD_GetXSize()/DrawProp[ActiveLayer].pFont->Width);
 8001972:	f7ff fe79 	bl	8001668 <BSP_LCD_GetXSize>
 8001976:	4b4f      	ldr	r3, [pc, #316]	; (8001ab4 <BSP_LCD_DisplayStringAt+0x180>)
 8001978:	681a      	ldr	r2, [r3, #0]
 800197a:	494f      	ldr	r1, [pc, #316]	; (8001ab8 <BSP_LCD_DisplayStringAt+0x184>)
 800197c:	4613      	mov	r3, r2
 800197e:	005b      	lsls	r3, r3, #1
 8001980:	4413      	add	r3, r2
 8001982:	009b      	lsls	r3, r3, #2
 8001984:	440b      	add	r3, r1
 8001986:	3308      	adds	r3, #8
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	889b      	ldrh	r3, [r3, #4]
 800198c:	fbb0 f3f3 	udiv	r3, r0, r3
 8001990:	613b      	str	r3, [r7, #16]
  
  switch (Mode)
 8001992:	79fb      	ldrb	r3, [r7, #7]
 8001994:	2b02      	cmp	r3, #2
 8001996:	d01c      	beq.n	80019d2 <BSP_LCD_DisplayStringAt+0x9e>
 8001998:	2b03      	cmp	r3, #3
 800199a:	d017      	beq.n	80019cc <BSP_LCD_DisplayStringAt+0x98>
 800199c:	2b01      	cmp	r3, #1
 800199e:	d12e      	bne.n	80019fe <BSP_LCD_DisplayStringAt+0xca>
  {
  case CENTER_MODE:
    {
      ref_column = Xpos + ((xsize - size)* DrawProp[ActiveLayer].pFont->Width) / 2;
 80019a0:	693a      	ldr	r2, [r7, #16]
 80019a2:	69bb      	ldr	r3, [r7, #24]
 80019a4:	1ad1      	subs	r1, r2, r3
 80019a6:	4b43      	ldr	r3, [pc, #268]	; (8001ab4 <BSP_LCD_DisplayStringAt+0x180>)
 80019a8:	681a      	ldr	r2, [r3, #0]
 80019aa:	4843      	ldr	r0, [pc, #268]	; (8001ab8 <BSP_LCD_DisplayStringAt+0x184>)
 80019ac:	4613      	mov	r3, r2
 80019ae:	005b      	lsls	r3, r3, #1
 80019b0:	4413      	add	r3, r2
 80019b2:	009b      	lsls	r3, r3, #2
 80019b4:	4403      	add	r3, r0
 80019b6:	3308      	adds	r3, #8
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	889b      	ldrh	r3, [r3, #4]
 80019bc:	fb03 f301 	mul.w	r3, r3, r1
 80019c0:	085b      	lsrs	r3, r3, #1
 80019c2:	b29a      	uxth	r2, r3
 80019c4:	89fb      	ldrh	r3, [r7, #14]
 80019c6:	4413      	add	r3, r2
 80019c8:	83fb      	strh	r3, [r7, #30]
      break;
 80019ca:	e01b      	b.n	8001a04 <BSP_LCD_DisplayStringAt+0xd0>
    }
  case LEFT_MODE:
    {
      ref_column = Xpos;
 80019cc:	89fb      	ldrh	r3, [r7, #14]
 80019ce:	83fb      	strh	r3, [r7, #30]
      break;
 80019d0:	e018      	b.n	8001a04 <BSP_LCD_DisplayStringAt+0xd0>
    }
  case RIGHT_MODE:
    {
      ref_column = - Xpos + ((xsize - size)*DrawProp[ActiveLayer].pFont->Width);
 80019d2:	693a      	ldr	r2, [r7, #16]
 80019d4:	69bb      	ldr	r3, [r7, #24]
 80019d6:	1ad3      	subs	r3, r2, r3
 80019d8:	b299      	uxth	r1, r3
 80019da:	4b36      	ldr	r3, [pc, #216]	; (8001ab4 <BSP_LCD_DisplayStringAt+0x180>)
 80019dc:	681a      	ldr	r2, [r3, #0]
 80019de:	4836      	ldr	r0, [pc, #216]	; (8001ab8 <BSP_LCD_DisplayStringAt+0x184>)
 80019e0:	4613      	mov	r3, r2
 80019e2:	005b      	lsls	r3, r3, #1
 80019e4:	4413      	add	r3, r2
 80019e6:	009b      	lsls	r3, r3, #2
 80019e8:	4403      	add	r3, r0
 80019ea:	3308      	adds	r3, #8
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	889b      	ldrh	r3, [r3, #4]
 80019f0:	fb11 f303 	smulbb	r3, r1, r3
 80019f4:	b29a      	uxth	r2, r3
 80019f6:	89fb      	ldrh	r3, [r7, #14]
 80019f8:	1ad3      	subs	r3, r2, r3
 80019fa:	83fb      	strh	r3, [r7, #30]
      break;
 80019fc:	e002      	b.n	8001a04 <BSP_LCD_DisplayStringAt+0xd0>
    }    
  default:
    {
      ref_column = Xpos;
 80019fe:	89fb      	ldrh	r3, [r7, #14]
 8001a00:	83fb      	strh	r3, [r7, #30]
      break;
 8001a02:	bf00      	nop
    }
  }
  
  /* Check that the Start column is located in the screen */
  if ((ref_column < 1) || (ref_column >= 0x8000))
 8001a04:	8bfb      	ldrh	r3, [r7, #30]
 8001a06:	2b00      	cmp	r3, #0
 8001a08:	d003      	beq.n	8001a12 <BSP_LCD_DisplayStringAt+0xde>
 8001a0a:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	da1d      	bge.n	8001a4e <BSP_LCD_DisplayStringAt+0x11a>
  {
    ref_column = 1;
 8001a12:	2301      	movs	r3, #1
 8001a14:	83fb      	strh	r3, [r7, #30]
  }

  /* Send the string character by character on LCD */
  while ((*Text != 0) & (((BSP_LCD_GetXSize() - (i*DrawProp[ActiveLayer].pFont->Width)) & 0xFFFF) >= DrawProp[ActiveLayer].pFont->Width))
 8001a16:	e01a      	b.n	8001a4e <BSP_LCD_DisplayStringAt+0x11a>
  {
    /* Display one character on LCD */
    BSP_LCD_DisplayChar(ref_column, Ypos, *Text);
 8001a18:	68bb      	ldr	r3, [r7, #8]
 8001a1a:	781a      	ldrb	r2, [r3, #0]
 8001a1c:	89b9      	ldrh	r1, [r7, #12]
 8001a1e:	8bfb      	ldrh	r3, [r7, #30]
 8001a20:	4618      	mov	r0, r3
 8001a22:	f7ff ff43 	bl	80018ac <BSP_LCD_DisplayChar>
    /* Decrement the column position by 16 */
    ref_column += DrawProp[ActiveLayer].pFont->Width;
 8001a26:	4b23      	ldr	r3, [pc, #140]	; (8001ab4 <BSP_LCD_DisplayStringAt+0x180>)
 8001a28:	681a      	ldr	r2, [r3, #0]
 8001a2a:	4923      	ldr	r1, [pc, #140]	; (8001ab8 <BSP_LCD_DisplayStringAt+0x184>)
 8001a2c:	4613      	mov	r3, r2
 8001a2e:	005b      	lsls	r3, r3, #1
 8001a30:	4413      	add	r3, r2
 8001a32:	009b      	lsls	r3, r3, #2
 8001a34:	440b      	add	r3, r1
 8001a36:	3308      	adds	r3, #8
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	889a      	ldrh	r2, [r3, #4]
 8001a3c:	8bfb      	ldrh	r3, [r7, #30]
 8001a3e:	4413      	add	r3, r2
 8001a40:	83fb      	strh	r3, [r7, #30]
    /* Point on the next character */
    Text++;
 8001a42:	68bb      	ldr	r3, [r7, #8]
 8001a44:	3301      	adds	r3, #1
 8001a46:	60bb      	str	r3, [r7, #8]
    i++;
 8001a48:	8bbb      	ldrh	r3, [r7, #28]
 8001a4a:	3301      	adds	r3, #1
 8001a4c:	83bb      	strh	r3, [r7, #28]
  while ((*Text != 0) & (((BSP_LCD_GetXSize() - (i*DrawProp[ActiveLayer].pFont->Width)) & 0xFFFF) >= DrawProp[ActiveLayer].pFont->Width))
 8001a4e:	68bb      	ldr	r3, [r7, #8]
 8001a50:	781b      	ldrb	r3, [r3, #0]
 8001a52:	2b00      	cmp	r3, #0
 8001a54:	bf14      	ite	ne
 8001a56:	2301      	movne	r3, #1
 8001a58:	2300      	moveq	r3, #0
 8001a5a:	b2dc      	uxtb	r4, r3
 8001a5c:	f7ff fe04 	bl	8001668 <BSP_LCD_GetXSize>
 8001a60:	4605      	mov	r5, r0
 8001a62:	8bb9      	ldrh	r1, [r7, #28]
 8001a64:	4b13      	ldr	r3, [pc, #76]	; (8001ab4 <BSP_LCD_DisplayStringAt+0x180>)
 8001a66:	681a      	ldr	r2, [r3, #0]
 8001a68:	4813      	ldr	r0, [pc, #76]	; (8001ab8 <BSP_LCD_DisplayStringAt+0x184>)
 8001a6a:	4613      	mov	r3, r2
 8001a6c:	005b      	lsls	r3, r3, #1
 8001a6e:	4413      	add	r3, r2
 8001a70:	009b      	lsls	r3, r3, #2
 8001a72:	4403      	add	r3, r0
 8001a74:	3308      	adds	r3, #8
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	889b      	ldrh	r3, [r3, #4]
 8001a7a:	fb03 f301 	mul.w	r3, r3, r1
 8001a7e:	1aeb      	subs	r3, r5, r3
 8001a80:	b299      	uxth	r1, r3
 8001a82:	4b0c      	ldr	r3, [pc, #48]	; (8001ab4 <BSP_LCD_DisplayStringAt+0x180>)
 8001a84:	681a      	ldr	r2, [r3, #0]
 8001a86:	480c      	ldr	r0, [pc, #48]	; (8001ab8 <BSP_LCD_DisplayStringAt+0x184>)
 8001a88:	4613      	mov	r3, r2
 8001a8a:	005b      	lsls	r3, r3, #1
 8001a8c:	4413      	add	r3, r2
 8001a8e:	009b      	lsls	r3, r3, #2
 8001a90:	4403      	add	r3, r0
 8001a92:	3308      	adds	r3, #8
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	889b      	ldrh	r3, [r3, #4]
 8001a98:	4299      	cmp	r1, r3
 8001a9a:	bf2c      	ite	cs
 8001a9c:	2301      	movcs	r3, #1
 8001a9e:	2300      	movcc	r3, #0
 8001aa0:	b2db      	uxtb	r3, r3
 8001aa2:	4023      	ands	r3, r4
 8001aa4:	b2db      	uxtb	r3, r3
 8001aa6:	2b00      	cmp	r3, #0
 8001aa8:	d1b6      	bne.n	8001a18 <BSP_LCD_DisplayStringAt+0xe4>
  }  
}
 8001aaa:	bf00      	nop
 8001aac:	3720      	adds	r7, #32
 8001aae:	46bd      	mov	sp, r7
 8001ab0:	bdb0      	pop	{r4, r5, r7, pc}
 8001ab2:	bf00      	nop
 8001ab4:	2002ca38 	.word	0x2002ca38
 8001ab8:	2002ca3c 	.word	0x2002ca3c

08001abc <BSP_LCD_DrawHLine>:
  * @param  Ypos: Y position
  * @param  Length: Line length
  * @retval None
  */
void BSP_LCD_DrawHLine(uint16_t Xpos, uint16_t Ypos, uint16_t Length)
{
 8001abc:	b5b0      	push	{r4, r5, r7, lr}
 8001abe:	b086      	sub	sp, #24
 8001ac0:	af02      	add	r7, sp, #8
 8001ac2:	4603      	mov	r3, r0
 8001ac4:	80fb      	strh	r3, [r7, #6]
 8001ac6:	460b      	mov	r3, r1
 8001ac8:	80bb      	strh	r3, [r7, #4]
 8001aca:	4613      	mov	r3, r2
 8001acc:	807b      	strh	r3, [r7, #2]
  uint32_t  Xaddress = 0;
 8001ace:	2300      	movs	r3, #0
 8001ad0:	60fb      	str	r3, [r7, #12]
  
  /* Get the line address */
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
 8001ad2:	4b26      	ldr	r3, [pc, #152]	; (8001b6c <BSP_LCD_DrawHLine+0xb0>)
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	4a26      	ldr	r2, [pc, #152]	; (8001b70 <BSP_LCD_DrawHLine+0xb4>)
 8001ad8:	2134      	movs	r1, #52	; 0x34
 8001ada:	fb01 f303 	mul.w	r3, r1, r3
 8001ade:	4413      	add	r3, r2
 8001ae0:	3348      	adds	r3, #72	; 0x48
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	2b02      	cmp	r3, #2
 8001ae6:	d114      	bne.n	8001b12 <BSP_LCD_DrawHLine+0x56>
  { /* RGB565 format */
    Xaddress = (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress) + 2*(BSP_LCD_GetXSize()*Ypos + Xpos);
 8001ae8:	4b20      	ldr	r3, [pc, #128]	; (8001b6c <BSP_LCD_DrawHLine+0xb0>)
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	4a20      	ldr	r2, [pc, #128]	; (8001b70 <BSP_LCD_DrawHLine+0xb4>)
 8001aee:	2134      	movs	r1, #52	; 0x34
 8001af0:	fb01 f303 	mul.w	r3, r1, r3
 8001af4:	4413      	add	r3, r2
 8001af6:	335c      	adds	r3, #92	; 0x5c
 8001af8:	681c      	ldr	r4, [r3, #0]
 8001afa:	f7ff fdb5 	bl	8001668 <BSP_LCD_GetXSize>
 8001afe:	4602      	mov	r2, r0
 8001b00:	88bb      	ldrh	r3, [r7, #4]
 8001b02:	fb03 f202 	mul.w	r2, r3, r2
 8001b06:	88fb      	ldrh	r3, [r7, #6]
 8001b08:	4413      	add	r3, r2
 8001b0a:	005b      	lsls	r3, r3, #1
 8001b0c:	4423      	add	r3, r4
 8001b0e:	60fb      	str	r3, [r7, #12]
 8001b10:	e013      	b.n	8001b3a <BSP_LCD_DrawHLine+0x7e>
  }
  else
  { /* ARGB8888 format */
    Xaddress = (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress) + 4*(BSP_LCD_GetXSize()*Ypos + Xpos);
 8001b12:	4b16      	ldr	r3, [pc, #88]	; (8001b6c <BSP_LCD_DrawHLine+0xb0>)
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	4a16      	ldr	r2, [pc, #88]	; (8001b70 <BSP_LCD_DrawHLine+0xb4>)
 8001b18:	2134      	movs	r1, #52	; 0x34
 8001b1a:	fb01 f303 	mul.w	r3, r1, r3
 8001b1e:	4413      	add	r3, r2
 8001b20:	335c      	adds	r3, #92	; 0x5c
 8001b22:	681c      	ldr	r4, [r3, #0]
 8001b24:	f7ff fda0 	bl	8001668 <BSP_LCD_GetXSize>
 8001b28:	4602      	mov	r2, r0
 8001b2a:	88bb      	ldrh	r3, [r7, #4]
 8001b2c:	fb03 f202 	mul.w	r2, r3, r2
 8001b30:	88fb      	ldrh	r3, [r7, #6]
 8001b32:	4413      	add	r3, r2
 8001b34:	009b      	lsls	r3, r3, #2
 8001b36:	4423      	add	r3, r4
 8001b38:	60fb      	str	r3, [r7, #12]
  }
  
  /* Write line */
  LL_FillBuffer(ActiveLayer, (uint32_t *)Xaddress, Length, 1, 0, DrawProp[ActiveLayer].TextColor);
 8001b3a:	4b0c      	ldr	r3, [pc, #48]	; (8001b6c <BSP_LCD_DrawHLine+0xb0>)
 8001b3c:	6818      	ldr	r0, [r3, #0]
 8001b3e:	68fc      	ldr	r4, [r7, #12]
 8001b40:	887d      	ldrh	r5, [r7, #2]
 8001b42:	4b0a      	ldr	r3, [pc, #40]	; (8001b6c <BSP_LCD_DrawHLine+0xb0>)
 8001b44:	681a      	ldr	r2, [r3, #0]
 8001b46:	490b      	ldr	r1, [pc, #44]	; (8001b74 <BSP_LCD_DrawHLine+0xb8>)
 8001b48:	4613      	mov	r3, r2
 8001b4a:	005b      	lsls	r3, r3, #1
 8001b4c:	4413      	add	r3, r2
 8001b4e:	009b      	lsls	r3, r3, #2
 8001b50:	440b      	add	r3, r1
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	9301      	str	r3, [sp, #4]
 8001b56:	2300      	movs	r3, #0
 8001b58:	9300      	str	r3, [sp, #0]
 8001b5a:	2301      	movs	r3, #1
 8001b5c:	462a      	mov	r2, r5
 8001b5e:	4621      	mov	r1, r4
 8001b60:	f000 fd6c 	bl	800263c <LL_FillBuffer>
}
 8001b64:	bf00      	nop
 8001b66:	3710      	adds	r7, #16
 8001b68:	46bd      	mov	sp, r7
 8001b6a:	bdb0      	pop	{r4, r5, r7, pc}
 8001b6c:	2002ca38 	.word	0x2002ca38
 8001b70:	2002cba8 	.word	0x2002cba8
 8001b74:	2002ca3c 	.word	0x2002ca3c

08001b78 <BSP_LCD_DrawVLine>:
  * @param  Ypos: Y position
  * @param  Length: Line length
  * @retval None
  */
void BSP_LCD_DrawVLine(uint16_t Xpos, uint16_t Ypos, uint16_t Length)
{
 8001b78:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001b7a:	b087      	sub	sp, #28
 8001b7c:	af02      	add	r7, sp, #8
 8001b7e:	4603      	mov	r3, r0
 8001b80:	80fb      	strh	r3, [r7, #6]
 8001b82:	460b      	mov	r3, r1
 8001b84:	80bb      	strh	r3, [r7, #4]
 8001b86:	4613      	mov	r3, r2
 8001b88:	807b      	strh	r3, [r7, #2]
  uint32_t  Xaddress = 0;
 8001b8a:	2300      	movs	r3, #0
 8001b8c:	60fb      	str	r3, [r7, #12]
  
  /* Get the line address */
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
 8001b8e:	4b28      	ldr	r3, [pc, #160]	; (8001c30 <BSP_LCD_DrawVLine+0xb8>)
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	4a28      	ldr	r2, [pc, #160]	; (8001c34 <BSP_LCD_DrawVLine+0xbc>)
 8001b94:	2134      	movs	r1, #52	; 0x34
 8001b96:	fb01 f303 	mul.w	r3, r1, r3
 8001b9a:	4413      	add	r3, r2
 8001b9c:	3348      	adds	r3, #72	; 0x48
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	2b02      	cmp	r3, #2
 8001ba2:	d114      	bne.n	8001bce <BSP_LCD_DrawVLine+0x56>
  { /* RGB565 format */
    Xaddress = (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress) + 2*(BSP_LCD_GetXSize()*Ypos + Xpos);
 8001ba4:	4b22      	ldr	r3, [pc, #136]	; (8001c30 <BSP_LCD_DrawVLine+0xb8>)
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	4a22      	ldr	r2, [pc, #136]	; (8001c34 <BSP_LCD_DrawVLine+0xbc>)
 8001baa:	2134      	movs	r1, #52	; 0x34
 8001bac:	fb01 f303 	mul.w	r3, r1, r3
 8001bb0:	4413      	add	r3, r2
 8001bb2:	335c      	adds	r3, #92	; 0x5c
 8001bb4:	681c      	ldr	r4, [r3, #0]
 8001bb6:	f7ff fd57 	bl	8001668 <BSP_LCD_GetXSize>
 8001bba:	4602      	mov	r2, r0
 8001bbc:	88bb      	ldrh	r3, [r7, #4]
 8001bbe:	fb03 f202 	mul.w	r2, r3, r2
 8001bc2:	88fb      	ldrh	r3, [r7, #6]
 8001bc4:	4413      	add	r3, r2
 8001bc6:	005b      	lsls	r3, r3, #1
 8001bc8:	4423      	add	r3, r4
 8001bca:	60fb      	str	r3, [r7, #12]
 8001bcc:	e013      	b.n	8001bf6 <BSP_LCD_DrawVLine+0x7e>
  }
  else
  { /* ARGB8888 format */
    Xaddress = (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress) + 4*(BSP_LCD_GetXSize()*Ypos + Xpos);
 8001bce:	4b18      	ldr	r3, [pc, #96]	; (8001c30 <BSP_LCD_DrawVLine+0xb8>)
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	4a18      	ldr	r2, [pc, #96]	; (8001c34 <BSP_LCD_DrawVLine+0xbc>)
 8001bd4:	2134      	movs	r1, #52	; 0x34
 8001bd6:	fb01 f303 	mul.w	r3, r1, r3
 8001bda:	4413      	add	r3, r2
 8001bdc:	335c      	adds	r3, #92	; 0x5c
 8001bde:	681c      	ldr	r4, [r3, #0]
 8001be0:	f7ff fd42 	bl	8001668 <BSP_LCD_GetXSize>
 8001be4:	4602      	mov	r2, r0
 8001be6:	88bb      	ldrh	r3, [r7, #4]
 8001be8:	fb03 f202 	mul.w	r2, r3, r2
 8001bec:	88fb      	ldrh	r3, [r7, #6]
 8001bee:	4413      	add	r3, r2
 8001bf0:	009b      	lsls	r3, r3, #2
 8001bf2:	4423      	add	r3, r4
 8001bf4:	60fb      	str	r3, [r7, #12]
  }
  
  /* Write line */
  LL_FillBuffer(ActiveLayer, (uint32_t *)Xaddress, 1, Length, (BSP_LCD_GetXSize() - 1), DrawProp[ActiveLayer].TextColor);
 8001bf6:	4b0e      	ldr	r3, [pc, #56]	; (8001c30 <BSP_LCD_DrawVLine+0xb8>)
 8001bf8:	681c      	ldr	r4, [r3, #0]
 8001bfa:	68fd      	ldr	r5, [r7, #12]
 8001bfc:	887e      	ldrh	r6, [r7, #2]
 8001bfe:	f7ff fd33 	bl	8001668 <BSP_LCD_GetXSize>
 8001c02:	4603      	mov	r3, r0
 8001c04:	1e59      	subs	r1, r3, #1
 8001c06:	4b0a      	ldr	r3, [pc, #40]	; (8001c30 <BSP_LCD_DrawVLine+0xb8>)
 8001c08:	681a      	ldr	r2, [r3, #0]
 8001c0a:	480b      	ldr	r0, [pc, #44]	; (8001c38 <BSP_LCD_DrawVLine+0xc0>)
 8001c0c:	4613      	mov	r3, r2
 8001c0e:	005b      	lsls	r3, r3, #1
 8001c10:	4413      	add	r3, r2
 8001c12:	009b      	lsls	r3, r3, #2
 8001c14:	4403      	add	r3, r0
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	9301      	str	r3, [sp, #4]
 8001c1a:	9100      	str	r1, [sp, #0]
 8001c1c:	4633      	mov	r3, r6
 8001c1e:	2201      	movs	r2, #1
 8001c20:	4629      	mov	r1, r5
 8001c22:	4620      	mov	r0, r4
 8001c24:	f000 fd0a 	bl	800263c <LL_FillBuffer>
}
 8001c28:	bf00      	nop
 8001c2a:	3714      	adds	r7, #20
 8001c2c:	46bd      	mov	sp, r7
 8001c2e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001c30:	2002ca38 	.word	0x2002ca38
 8001c34:	2002cba8 	.word	0x2002cba8
 8001c38:	2002ca3c 	.word	0x2002ca3c

08001c3c <BSP_LCD_DrawRect>:
  * @param  Width: Rectangle width  
  * @param  Height: Rectangle height
  * @retval None
  */
void BSP_LCD_DrawRect(uint16_t Xpos, uint16_t Ypos, uint16_t Width, uint16_t Height)
{
 8001c3c:	b590      	push	{r4, r7, lr}
 8001c3e:	b083      	sub	sp, #12
 8001c40:	af00      	add	r7, sp, #0
 8001c42:	4604      	mov	r4, r0
 8001c44:	4608      	mov	r0, r1
 8001c46:	4611      	mov	r1, r2
 8001c48:	461a      	mov	r2, r3
 8001c4a:	4623      	mov	r3, r4
 8001c4c:	80fb      	strh	r3, [r7, #6]
 8001c4e:	4603      	mov	r3, r0
 8001c50:	80bb      	strh	r3, [r7, #4]
 8001c52:	460b      	mov	r3, r1
 8001c54:	807b      	strh	r3, [r7, #2]
 8001c56:	4613      	mov	r3, r2
 8001c58:	803b      	strh	r3, [r7, #0]
  /* Draw horizontal lines */
  BSP_LCD_DrawHLine(Xpos, Ypos, Width);
 8001c5a:	887a      	ldrh	r2, [r7, #2]
 8001c5c:	88b9      	ldrh	r1, [r7, #4]
 8001c5e:	88fb      	ldrh	r3, [r7, #6]
 8001c60:	4618      	mov	r0, r3
 8001c62:	f7ff ff2b 	bl	8001abc <BSP_LCD_DrawHLine>
  BSP_LCD_DrawHLine(Xpos, (Ypos+ Height), Width);
 8001c66:	88ba      	ldrh	r2, [r7, #4]
 8001c68:	883b      	ldrh	r3, [r7, #0]
 8001c6a:	4413      	add	r3, r2
 8001c6c:	b299      	uxth	r1, r3
 8001c6e:	887a      	ldrh	r2, [r7, #2]
 8001c70:	88fb      	ldrh	r3, [r7, #6]
 8001c72:	4618      	mov	r0, r3
 8001c74:	f7ff ff22 	bl	8001abc <BSP_LCD_DrawHLine>
  
  /* Draw vertical lines */
  BSP_LCD_DrawVLine(Xpos, Ypos, Height);
 8001c78:	883a      	ldrh	r2, [r7, #0]
 8001c7a:	88b9      	ldrh	r1, [r7, #4]
 8001c7c:	88fb      	ldrh	r3, [r7, #6]
 8001c7e:	4618      	mov	r0, r3
 8001c80:	f7ff ff7a 	bl	8001b78 <BSP_LCD_DrawVLine>
  BSP_LCD_DrawVLine((Xpos + Width), Ypos, Height);
 8001c84:	88fa      	ldrh	r2, [r7, #6]
 8001c86:	887b      	ldrh	r3, [r7, #2]
 8001c88:	4413      	add	r3, r2
 8001c8a:	b29b      	uxth	r3, r3
 8001c8c:	883a      	ldrh	r2, [r7, #0]
 8001c8e:	88b9      	ldrh	r1, [r7, #4]
 8001c90:	4618      	mov	r0, r3
 8001c92:	f7ff ff71 	bl	8001b78 <BSP_LCD_DrawVLine>
}
 8001c96:	bf00      	nop
 8001c98:	370c      	adds	r7, #12
 8001c9a:	46bd      	mov	sp, r7
 8001c9c:	bd90      	pop	{r4, r7, pc}
	...

08001ca0 <BSP_LCD_DrawCircle>:
  * @param  Ypos: Y position
  * @param  Radius: Circle radius
  * @retval None
  */
void BSP_LCD_DrawCircle(uint16_t Xpos, uint16_t Ypos, uint16_t Radius)
{
 8001ca0:	b590      	push	{r4, r7, lr}
 8001ca2:	b087      	sub	sp, #28
 8001ca4:	af00      	add	r7, sp, #0
 8001ca6:	4603      	mov	r3, r0
 8001ca8:	80fb      	strh	r3, [r7, #6]
 8001caa:	460b      	mov	r3, r1
 8001cac:	80bb      	strh	r3, [r7, #4]
 8001cae:	4613      	mov	r3, r2
 8001cb0:	807b      	strh	r3, [r7, #2]
  int32_t   decision;    /* Decision Variable */ 
  uint32_t  current_x;   /* Current X Value */
  uint32_t  current_y;   /* Current Y Value */
  
  decision = 3 - (Radius << 1);
 8001cb2:	887b      	ldrh	r3, [r7, #2]
 8001cb4:	005b      	lsls	r3, r3, #1
 8001cb6:	f1c3 0303 	rsb	r3, r3, #3
 8001cba:	617b      	str	r3, [r7, #20]
  current_x = 0;
 8001cbc:	2300      	movs	r3, #0
 8001cbe:	613b      	str	r3, [r7, #16]
  current_y = Radius;
 8001cc0:	887b      	ldrh	r3, [r7, #2]
 8001cc2:	60fb      	str	r3, [r7, #12]
  
  while (current_x <= current_y)
 8001cc4:	e0cf      	b.n	8001e66 <BSP_LCD_DrawCircle+0x1c6>
  {
    BSP_LCD_DrawPixel((Xpos + current_x), (Ypos - current_y), DrawProp[ActiveLayer].TextColor);
 8001cc6:	693b      	ldr	r3, [r7, #16]
 8001cc8:	b29a      	uxth	r2, r3
 8001cca:	88fb      	ldrh	r3, [r7, #6]
 8001ccc:	4413      	add	r3, r2
 8001cce:	b298      	uxth	r0, r3
 8001cd0:	68fb      	ldr	r3, [r7, #12]
 8001cd2:	b29b      	uxth	r3, r3
 8001cd4:	88ba      	ldrh	r2, [r7, #4]
 8001cd6:	1ad3      	subs	r3, r2, r3
 8001cd8:	b29c      	uxth	r4, r3
 8001cda:	4b67      	ldr	r3, [pc, #412]	; (8001e78 <BSP_LCD_DrawCircle+0x1d8>)
 8001cdc:	681a      	ldr	r2, [r3, #0]
 8001cde:	4967      	ldr	r1, [pc, #412]	; (8001e7c <BSP_LCD_DrawCircle+0x1dc>)
 8001ce0:	4613      	mov	r3, r2
 8001ce2:	005b      	lsls	r3, r3, #1
 8001ce4:	4413      	add	r3, r2
 8001ce6:	009b      	lsls	r3, r3, #2
 8001ce8:	440b      	add	r3, r1
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	461a      	mov	r2, r3
 8001cee:	4621      	mov	r1, r4
 8001cf0:	f000 f8c6 	bl	8001e80 <BSP_LCD_DrawPixel>
    
    BSP_LCD_DrawPixel((Xpos - current_x), (Ypos - current_y), DrawProp[ActiveLayer].TextColor);
 8001cf4:	693b      	ldr	r3, [r7, #16]
 8001cf6:	b29b      	uxth	r3, r3
 8001cf8:	88fa      	ldrh	r2, [r7, #6]
 8001cfa:	1ad3      	subs	r3, r2, r3
 8001cfc:	b298      	uxth	r0, r3
 8001cfe:	68fb      	ldr	r3, [r7, #12]
 8001d00:	b29b      	uxth	r3, r3
 8001d02:	88ba      	ldrh	r2, [r7, #4]
 8001d04:	1ad3      	subs	r3, r2, r3
 8001d06:	b29c      	uxth	r4, r3
 8001d08:	4b5b      	ldr	r3, [pc, #364]	; (8001e78 <BSP_LCD_DrawCircle+0x1d8>)
 8001d0a:	681a      	ldr	r2, [r3, #0]
 8001d0c:	495b      	ldr	r1, [pc, #364]	; (8001e7c <BSP_LCD_DrawCircle+0x1dc>)
 8001d0e:	4613      	mov	r3, r2
 8001d10:	005b      	lsls	r3, r3, #1
 8001d12:	4413      	add	r3, r2
 8001d14:	009b      	lsls	r3, r3, #2
 8001d16:	440b      	add	r3, r1
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	461a      	mov	r2, r3
 8001d1c:	4621      	mov	r1, r4
 8001d1e:	f000 f8af 	bl	8001e80 <BSP_LCD_DrawPixel>
    
    BSP_LCD_DrawPixel((Xpos + current_y), (Ypos - current_x), DrawProp[ActiveLayer].TextColor);
 8001d22:	68fb      	ldr	r3, [r7, #12]
 8001d24:	b29a      	uxth	r2, r3
 8001d26:	88fb      	ldrh	r3, [r7, #6]
 8001d28:	4413      	add	r3, r2
 8001d2a:	b298      	uxth	r0, r3
 8001d2c:	693b      	ldr	r3, [r7, #16]
 8001d2e:	b29b      	uxth	r3, r3
 8001d30:	88ba      	ldrh	r2, [r7, #4]
 8001d32:	1ad3      	subs	r3, r2, r3
 8001d34:	b29c      	uxth	r4, r3
 8001d36:	4b50      	ldr	r3, [pc, #320]	; (8001e78 <BSP_LCD_DrawCircle+0x1d8>)
 8001d38:	681a      	ldr	r2, [r3, #0]
 8001d3a:	4950      	ldr	r1, [pc, #320]	; (8001e7c <BSP_LCD_DrawCircle+0x1dc>)
 8001d3c:	4613      	mov	r3, r2
 8001d3e:	005b      	lsls	r3, r3, #1
 8001d40:	4413      	add	r3, r2
 8001d42:	009b      	lsls	r3, r3, #2
 8001d44:	440b      	add	r3, r1
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	461a      	mov	r2, r3
 8001d4a:	4621      	mov	r1, r4
 8001d4c:	f000 f898 	bl	8001e80 <BSP_LCD_DrawPixel>
    
    BSP_LCD_DrawPixel((Xpos - current_y), (Ypos - current_x), DrawProp[ActiveLayer].TextColor);
 8001d50:	68fb      	ldr	r3, [r7, #12]
 8001d52:	b29b      	uxth	r3, r3
 8001d54:	88fa      	ldrh	r2, [r7, #6]
 8001d56:	1ad3      	subs	r3, r2, r3
 8001d58:	b298      	uxth	r0, r3
 8001d5a:	693b      	ldr	r3, [r7, #16]
 8001d5c:	b29b      	uxth	r3, r3
 8001d5e:	88ba      	ldrh	r2, [r7, #4]
 8001d60:	1ad3      	subs	r3, r2, r3
 8001d62:	b29c      	uxth	r4, r3
 8001d64:	4b44      	ldr	r3, [pc, #272]	; (8001e78 <BSP_LCD_DrawCircle+0x1d8>)
 8001d66:	681a      	ldr	r2, [r3, #0]
 8001d68:	4944      	ldr	r1, [pc, #272]	; (8001e7c <BSP_LCD_DrawCircle+0x1dc>)
 8001d6a:	4613      	mov	r3, r2
 8001d6c:	005b      	lsls	r3, r3, #1
 8001d6e:	4413      	add	r3, r2
 8001d70:	009b      	lsls	r3, r3, #2
 8001d72:	440b      	add	r3, r1
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	461a      	mov	r2, r3
 8001d78:	4621      	mov	r1, r4
 8001d7a:	f000 f881 	bl	8001e80 <BSP_LCD_DrawPixel>
    
    BSP_LCD_DrawPixel((Xpos + current_x), (Ypos + current_y), DrawProp[ActiveLayer].TextColor);
 8001d7e:	693b      	ldr	r3, [r7, #16]
 8001d80:	b29a      	uxth	r2, r3
 8001d82:	88fb      	ldrh	r3, [r7, #6]
 8001d84:	4413      	add	r3, r2
 8001d86:	b298      	uxth	r0, r3
 8001d88:	68fb      	ldr	r3, [r7, #12]
 8001d8a:	b29a      	uxth	r2, r3
 8001d8c:	88bb      	ldrh	r3, [r7, #4]
 8001d8e:	4413      	add	r3, r2
 8001d90:	b29c      	uxth	r4, r3
 8001d92:	4b39      	ldr	r3, [pc, #228]	; (8001e78 <BSP_LCD_DrawCircle+0x1d8>)
 8001d94:	681a      	ldr	r2, [r3, #0]
 8001d96:	4939      	ldr	r1, [pc, #228]	; (8001e7c <BSP_LCD_DrawCircle+0x1dc>)
 8001d98:	4613      	mov	r3, r2
 8001d9a:	005b      	lsls	r3, r3, #1
 8001d9c:	4413      	add	r3, r2
 8001d9e:	009b      	lsls	r3, r3, #2
 8001da0:	440b      	add	r3, r1
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	461a      	mov	r2, r3
 8001da6:	4621      	mov	r1, r4
 8001da8:	f000 f86a 	bl	8001e80 <BSP_LCD_DrawPixel>
    
    BSP_LCD_DrawPixel((Xpos - current_x), (Ypos + current_y), DrawProp[ActiveLayer].TextColor);
 8001dac:	693b      	ldr	r3, [r7, #16]
 8001dae:	b29b      	uxth	r3, r3
 8001db0:	88fa      	ldrh	r2, [r7, #6]
 8001db2:	1ad3      	subs	r3, r2, r3
 8001db4:	b298      	uxth	r0, r3
 8001db6:	68fb      	ldr	r3, [r7, #12]
 8001db8:	b29a      	uxth	r2, r3
 8001dba:	88bb      	ldrh	r3, [r7, #4]
 8001dbc:	4413      	add	r3, r2
 8001dbe:	b29c      	uxth	r4, r3
 8001dc0:	4b2d      	ldr	r3, [pc, #180]	; (8001e78 <BSP_LCD_DrawCircle+0x1d8>)
 8001dc2:	681a      	ldr	r2, [r3, #0]
 8001dc4:	492d      	ldr	r1, [pc, #180]	; (8001e7c <BSP_LCD_DrawCircle+0x1dc>)
 8001dc6:	4613      	mov	r3, r2
 8001dc8:	005b      	lsls	r3, r3, #1
 8001dca:	4413      	add	r3, r2
 8001dcc:	009b      	lsls	r3, r3, #2
 8001dce:	440b      	add	r3, r1
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	461a      	mov	r2, r3
 8001dd4:	4621      	mov	r1, r4
 8001dd6:	f000 f853 	bl	8001e80 <BSP_LCD_DrawPixel>
    
    BSP_LCD_DrawPixel((Xpos + current_y), (Ypos + current_x), DrawProp[ActiveLayer].TextColor);
 8001dda:	68fb      	ldr	r3, [r7, #12]
 8001ddc:	b29a      	uxth	r2, r3
 8001dde:	88fb      	ldrh	r3, [r7, #6]
 8001de0:	4413      	add	r3, r2
 8001de2:	b298      	uxth	r0, r3
 8001de4:	693b      	ldr	r3, [r7, #16]
 8001de6:	b29a      	uxth	r2, r3
 8001de8:	88bb      	ldrh	r3, [r7, #4]
 8001dea:	4413      	add	r3, r2
 8001dec:	b29c      	uxth	r4, r3
 8001dee:	4b22      	ldr	r3, [pc, #136]	; (8001e78 <BSP_LCD_DrawCircle+0x1d8>)
 8001df0:	681a      	ldr	r2, [r3, #0]
 8001df2:	4922      	ldr	r1, [pc, #136]	; (8001e7c <BSP_LCD_DrawCircle+0x1dc>)
 8001df4:	4613      	mov	r3, r2
 8001df6:	005b      	lsls	r3, r3, #1
 8001df8:	4413      	add	r3, r2
 8001dfa:	009b      	lsls	r3, r3, #2
 8001dfc:	440b      	add	r3, r1
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	461a      	mov	r2, r3
 8001e02:	4621      	mov	r1, r4
 8001e04:	f000 f83c 	bl	8001e80 <BSP_LCD_DrawPixel>
    
    BSP_LCD_DrawPixel((Xpos - current_y), (Ypos + current_x), DrawProp[ActiveLayer].TextColor);
 8001e08:	68fb      	ldr	r3, [r7, #12]
 8001e0a:	b29b      	uxth	r3, r3
 8001e0c:	88fa      	ldrh	r2, [r7, #6]
 8001e0e:	1ad3      	subs	r3, r2, r3
 8001e10:	b298      	uxth	r0, r3
 8001e12:	693b      	ldr	r3, [r7, #16]
 8001e14:	b29a      	uxth	r2, r3
 8001e16:	88bb      	ldrh	r3, [r7, #4]
 8001e18:	4413      	add	r3, r2
 8001e1a:	b29c      	uxth	r4, r3
 8001e1c:	4b16      	ldr	r3, [pc, #88]	; (8001e78 <BSP_LCD_DrawCircle+0x1d8>)
 8001e1e:	681a      	ldr	r2, [r3, #0]
 8001e20:	4916      	ldr	r1, [pc, #88]	; (8001e7c <BSP_LCD_DrawCircle+0x1dc>)
 8001e22:	4613      	mov	r3, r2
 8001e24:	005b      	lsls	r3, r3, #1
 8001e26:	4413      	add	r3, r2
 8001e28:	009b      	lsls	r3, r3, #2
 8001e2a:	440b      	add	r3, r1
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	461a      	mov	r2, r3
 8001e30:	4621      	mov	r1, r4
 8001e32:	f000 f825 	bl	8001e80 <BSP_LCD_DrawPixel>
    
    if (decision < 0)
 8001e36:	697b      	ldr	r3, [r7, #20]
 8001e38:	2b00      	cmp	r3, #0
 8001e3a:	da06      	bge.n	8001e4a <BSP_LCD_DrawCircle+0x1aa>
    { 
      decision += (current_x << 2) + 6;
 8001e3c:	693b      	ldr	r3, [r7, #16]
 8001e3e:	009a      	lsls	r2, r3, #2
 8001e40:	697b      	ldr	r3, [r7, #20]
 8001e42:	4413      	add	r3, r2
 8001e44:	3306      	adds	r3, #6
 8001e46:	617b      	str	r3, [r7, #20]
 8001e48:	e00a      	b.n	8001e60 <BSP_LCD_DrawCircle+0x1c0>
    }
    else
    {
      decision += ((current_x - current_y) << 2) + 10;
 8001e4a:	693a      	ldr	r2, [r7, #16]
 8001e4c:	68fb      	ldr	r3, [r7, #12]
 8001e4e:	1ad3      	subs	r3, r2, r3
 8001e50:	009a      	lsls	r2, r3, #2
 8001e52:	697b      	ldr	r3, [r7, #20]
 8001e54:	4413      	add	r3, r2
 8001e56:	330a      	adds	r3, #10
 8001e58:	617b      	str	r3, [r7, #20]
      current_y--;
 8001e5a:	68fb      	ldr	r3, [r7, #12]
 8001e5c:	3b01      	subs	r3, #1
 8001e5e:	60fb      	str	r3, [r7, #12]
    }
    current_x++;
 8001e60:	693b      	ldr	r3, [r7, #16]
 8001e62:	3301      	adds	r3, #1
 8001e64:	613b      	str	r3, [r7, #16]
  while (current_x <= current_y)
 8001e66:	693a      	ldr	r2, [r7, #16]
 8001e68:	68fb      	ldr	r3, [r7, #12]
 8001e6a:	429a      	cmp	r2, r3
 8001e6c:	f67f af2b 	bls.w	8001cc6 <BSP_LCD_DrawCircle+0x26>
  } 
}
 8001e70:	bf00      	nop
 8001e72:	371c      	adds	r7, #28
 8001e74:	46bd      	mov	sp, r7
 8001e76:	bd90      	pop	{r4, r7, pc}
 8001e78:	2002ca38 	.word	0x2002ca38
 8001e7c:	2002ca3c 	.word	0x2002ca3c

08001e80 <BSP_LCD_DrawPixel>:
  * @param  Ypos: Y position
  * @param  RGB_Code: Pixel color in ARGB mode (8-8-8-8)
  * @retval None
  */
void BSP_LCD_DrawPixel(uint16_t Xpos, uint16_t Ypos, uint32_t RGB_Code)
{
 8001e80:	b5b0      	push	{r4, r5, r7, lr}
 8001e82:	b082      	sub	sp, #8
 8001e84:	af00      	add	r7, sp, #0
 8001e86:	4603      	mov	r3, r0
 8001e88:	603a      	str	r2, [r7, #0]
 8001e8a:	80fb      	strh	r3, [r7, #6]
 8001e8c:	460b      	mov	r3, r1
 8001e8e:	80bb      	strh	r3, [r7, #4]
  /* Write data value to all SDRAM memory */
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
 8001e90:	4b1d      	ldr	r3, [pc, #116]	; (8001f08 <BSP_LCD_DrawPixel+0x88>)
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	4a1d      	ldr	r2, [pc, #116]	; (8001f0c <BSP_LCD_DrawPixel+0x8c>)
 8001e96:	2134      	movs	r1, #52	; 0x34
 8001e98:	fb01 f303 	mul.w	r3, r1, r3
 8001e9c:	4413      	add	r3, r2
 8001e9e:	3348      	adds	r3, #72	; 0x48
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	2b02      	cmp	r3, #2
 8001ea4:	d116      	bne.n	8001ed4 <BSP_LCD_DrawPixel+0x54>
  { /* RGB565 format */
    *(__IO uint16_t*) (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (2*(Ypos*BSP_LCD_GetXSize() + Xpos))) = (uint16_t)RGB_Code;
 8001ea6:	4b18      	ldr	r3, [pc, #96]	; (8001f08 <BSP_LCD_DrawPixel+0x88>)
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	4a18      	ldr	r2, [pc, #96]	; (8001f0c <BSP_LCD_DrawPixel+0x8c>)
 8001eac:	2134      	movs	r1, #52	; 0x34
 8001eae:	fb01 f303 	mul.w	r3, r1, r3
 8001eb2:	4413      	add	r3, r2
 8001eb4:	335c      	adds	r3, #92	; 0x5c
 8001eb6:	681c      	ldr	r4, [r3, #0]
 8001eb8:	88bd      	ldrh	r5, [r7, #4]
 8001eba:	f7ff fbd5 	bl	8001668 <BSP_LCD_GetXSize>
 8001ebe:	4603      	mov	r3, r0
 8001ec0:	fb03 f205 	mul.w	r2, r3, r5
 8001ec4:	88fb      	ldrh	r3, [r7, #6]
 8001ec6:	4413      	add	r3, r2
 8001ec8:	005b      	lsls	r3, r3, #1
 8001eca:	4423      	add	r3, r4
 8001ecc:	683a      	ldr	r2, [r7, #0]
 8001ece:	b292      	uxth	r2, r2
 8001ed0:	801a      	strh	r2, [r3, #0]
  }
  else
  { /* ARGB8888 format */
    *(__IO uint32_t*) (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (4*(Ypos*BSP_LCD_GetXSize() + Xpos))) = RGB_Code;
  }
}
 8001ed2:	e015      	b.n	8001f00 <BSP_LCD_DrawPixel+0x80>
    *(__IO uint32_t*) (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (4*(Ypos*BSP_LCD_GetXSize() + Xpos))) = RGB_Code;
 8001ed4:	4b0c      	ldr	r3, [pc, #48]	; (8001f08 <BSP_LCD_DrawPixel+0x88>)
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	4a0c      	ldr	r2, [pc, #48]	; (8001f0c <BSP_LCD_DrawPixel+0x8c>)
 8001eda:	2134      	movs	r1, #52	; 0x34
 8001edc:	fb01 f303 	mul.w	r3, r1, r3
 8001ee0:	4413      	add	r3, r2
 8001ee2:	335c      	adds	r3, #92	; 0x5c
 8001ee4:	681c      	ldr	r4, [r3, #0]
 8001ee6:	88bd      	ldrh	r5, [r7, #4]
 8001ee8:	f7ff fbbe 	bl	8001668 <BSP_LCD_GetXSize>
 8001eec:	4603      	mov	r3, r0
 8001eee:	fb03 f205 	mul.w	r2, r3, r5
 8001ef2:	88fb      	ldrh	r3, [r7, #6]
 8001ef4:	4413      	add	r3, r2
 8001ef6:	009b      	lsls	r3, r3, #2
 8001ef8:	4423      	add	r3, r4
 8001efa:	461a      	mov	r2, r3
 8001efc:	683b      	ldr	r3, [r7, #0]
 8001efe:	6013      	str	r3, [r2, #0]
}
 8001f00:	bf00      	nop
 8001f02:	3708      	adds	r7, #8
 8001f04:	46bd      	mov	sp, r7
 8001f06:	bdb0      	pop	{r4, r5, r7, pc}
 8001f08:	2002ca38 	.word	0x2002ca38
 8001f0c:	2002cba8 	.word	0x2002cba8

08001f10 <BSP_LCD_DrawBitmap>:
  * @param  Ypos: Bmp Y position in the LCD
  * @param  pbmp: Pointer to Bmp picture address in the internal Flash
  * @retval None
  */
void BSP_LCD_DrawBitmap(uint32_t Xpos, uint32_t Ypos, uint8_t *pbmp)
{
 8001f10:	b590      	push	{r4, r7, lr}
 8001f12:	b08b      	sub	sp, #44	; 0x2c
 8001f14:	af00      	add	r7, sp, #0
 8001f16:	60f8      	str	r0, [r7, #12]
 8001f18:	60b9      	str	r1, [r7, #8]
 8001f1a:	607a      	str	r2, [r7, #4]
  uint32_t index = 0, width = 0, height = 0, bit_pixel = 0;
 8001f1c:	2300      	movs	r3, #0
 8001f1e:	627b      	str	r3, [r7, #36]	; 0x24
 8001f20:	2300      	movs	r3, #0
 8001f22:	61bb      	str	r3, [r7, #24]
 8001f24:	2300      	movs	r3, #0
 8001f26:	617b      	str	r3, [r7, #20]
 8001f28:	2300      	movs	r3, #0
 8001f2a:	613b      	str	r3, [r7, #16]
  uint32_t address;
  uint32_t input_color_mode = 0;
 8001f2c:	2300      	movs	r3, #0
 8001f2e:	61fb      	str	r3, [r7, #28]
  
  /* Get bitmap data address offset */
  index = pbmp[10] + (pbmp[11] << 8) + (pbmp[12] << 16)  + (pbmp[13] << 24);
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	330a      	adds	r3, #10
 8001f34:	781b      	ldrb	r3, [r3, #0]
 8001f36:	461a      	mov	r2, r3
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	330b      	adds	r3, #11
 8001f3c:	781b      	ldrb	r3, [r3, #0]
 8001f3e:	021b      	lsls	r3, r3, #8
 8001f40:	441a      	add	r2, r3
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	330c      	adds	r3, #12
 8001f46:	781b      	ldrb	r3, [r3, #0]
 8001f48:	041b      	lsls	r3, r3, #16
 8001f4a:	441a      	add	r2, r3
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	330d      	adds	r3, #13
 8001f50:	781b      	ldrb	r3, [r3, #0]
 8001f52:	061b      	lsls	r3, r3, #24
 8001f54:	4413      	add	r3, r2
 8001f56:	627b      	str	r3, [r7, #36]	; 0x24

  /* Read bitmap width */
  width = pbmp[18] + (pbmp[19] << 8) + (pbmp[20] << 16)  + (pbmp[21] << 24);
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	3312      	adds	r3, #18
 8001f5c:	781b      	ldrb	r3, [r3, #0]
 8001f5e:	461a      	mov	r2, r3
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	3313      	adds	r3, #19
 8001f64:	781b      	ldrb	r3, [r3, #0]
 8001f66:	021b      	lsls	r3, r3, #8
 8001f68:	441a      	add	r2, r3
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	3314      	adds	r3, #20
 8001f6e:	781b      	ldrb	r3, [r3, #0]
 8001f70:	041b      	lsls	r3, r3, #16
 8001f72:	441a      	add	r2, r3
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	3315      	adds	r3, #21
 8001f78:	781b      	ldrb	r3, [r3, #0]
 8001f7a:	061b      	lsls	r3, r3, #24
 8001f7c:	4413      	add	r3, r2
 8001f7e:	61bb      	str	r3, [r7, #24]

  /* Read bitmap height */
  height = pbmp[22] + (pbmp[23] << 8) + (pbmp[24] << 16)  + (pbmp[25] << 24);
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	3316      	adds	r3, #22
 8001f84:	781b      	ldrb	r3, [r3, #0]
 8001f86:	461a      	mov	r2, r3
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	3317      	adds	r3, #23
 8001f8c:	781b      	ldrb	r3, [r3, #0]
 8001f8e:	021b      	lsls	r3, r3, #8
 8001f90:	441a      	add	r2, r3
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	3318      	adds	r3, #24
 8001f96:	781b      	ldrb	r3, [r3, #0]
 8001f98:	041b      	lsls	r3, r3, #16
 8001f9a:	441a      	add	r2, r3
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	3319      	adds	r3, #25
 8001fa0:	781b      	ldrb	r3, [r3, #0]
 8001fa2:	061b      	lsls	r3, r3, #24
 8001fa4:	4413      	add	r3, r2
 8001fa6:	617b      	str	r3, [r7, #20]

  /* Read bit/pixel */
  bit_pixel = pbmp[28] + (pbmp[29] << 8);  
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	331c      	adds	r3, #28
 8001fac:	781b      	ldrb	r3, [r3, #0]
 8001fae:	461a      	mov	r2, r3
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	331d      	adds	r3, #29
 8001fb4:	781b      	ldrb	r3, [r3, #0]
 8001fb6:	021b      	lsls	r3, r3, #8
 8001fb8:	4413      	add	r3, r2
 8001fba:	613b      	str	r3, [r7, #16]
  
  /* Set the address */
  address = hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (((BSP_LCD_GetXSize()*Ypos) + Xpos)*(4));
 8001fbc:	4b2a      	ldr	r3, [pc, #168]	; (8002068 <BSP_LCD_DrawBitmap+0x158>)
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	4a2a      	ldr	r2, [pc, #168]	; (800206c <BSP_LCD_DrawBitmap+0x15c>)
 8001fc2:	2134      	movs	r1, #52	; 0x34
 8001fc4:	fb01 f303 	mul.w	r3, r1, r3
 8001fc8:	4413      	add	r3, r2
 8001fca:	335c      	adds	r3, #92	; 0x5c
 8001fcc:	681c      	ldr	r4, [r3, #0]
 8001fce:	f7ff fb4b 	bl	8001668 <BSP_LCD_GetXSize>
 8001fd2:	4602      	mov	r2, r0
 8001fd4:	68bb      	ldr	r3, [r7, #8]
 8001fd6:	fb03 f202 	mul.w	r2, r3, r2
 8001fda:	68fb      	ldr	r3, [r7, #12]
 8001fdc:	4413      	add	r3, r2
 8001fde:	009b      	lsls	r3, r3, #2
 8001fe0:	4423      	add	r3, r4
 8001fe2:	623b      	str	r3, [r7, #32]
  
  /* Get the layer pixel format */    
  if ((bit_pixel/8) == 4)
 8001fe4:	693b      	ldr	r3, [r7, #16]
 8001fe6:	3b20      	subs	r3, #32
 8001fe8:	2b07      	cmp	r3, #7
 8001fea:	d802      	bhi.n	8001ff2 <BSP_LCD_DrawBitmap+0xe2>
  {
    input_color_mode = CM_ARGB8888;
 8001fec:	2300      	movs	r3, #0
 8001fee:	61fb      	str	r3, [r7, #28]
 8001ff0:	e008      	b.n	8002004 <BSP_LCD_DrawBitmap+0xf4>
  }
  else if ((bit_pixel/8) == 2)
 8001ff2:	693b      	ldr	r3, [r7, #16]
 8001ff4:	3b10      	subs	r3, #16
 8001ff6:	2b07      	cmp	r3, #7
 8001ff8:	d802      	bhi.n	8002000 <BSP_LCD_DrawBitmap+0xf0>
  {
    input_color_mode = CM_RGB565;   
 8001ffa:	2302      	movs	r3, #2
 8001ffc:	61fb      	str	r3, [r7, #28]
 8001ffe:	e001      	b.n	8002004 <BSP_LCD_DrawBitmap+0xf4>
  }
  else 
  {
    input_color_mode = CM_RGB888;
 8002000:	2301      	movs	r3, #1
 8002002:	61fb      	str	r3, [r7, #28]
  }
  
  /* Bypass the bitmap header */
  pbmp += (index + (width * (height - 1) * (bit_pixel/8)));  
 8002004:	697b      	ldr	r3, [r7, #20]
 8002006:	3b01      	subs	r3, #1
 8002008:	69ba      	ldr	r2, [r7, #24]
 800200a:	fb02 f303 	mul.w	r3, r2, r3
 800200e:	693a      	ldr	r2, [r7, #16]
 8002010:	08d2      	lsrs	r2, r2, #3
 8002012:	fb02 f203 	mul.w	r2, r2, r3
 8002016:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002018:	4413      	add	r3, r2
 800201a:	687a      	ldr	r2, [r7, #4]
 800201c:	4413      	add	r3, r2
 800201e:	607b      	str	r3, [r7, #4]
  
  /* Convert picture to ARGB8888 pixel format */
  for(index=0; index < height; index++)
 8002020:	2300      	movs	r3, #0
 8002022:	627b      	str	r3, [r7, #36]	; 0x24
 8002024:	e018      	b.n	8002058 <BSP_LCD_DrawBitmap+0x148>
  {
    /* Pixel format conversion */
    LL_ConvertLineToARGB8888((uint32_t *)pbmp, (uint32_t *)address, width, input_color_mode);
 8002026:	6a39      	ldr	r1, [r7, #32]
 8002028:	69fb      	ldr	r3, [r7, #28]
 800202a:	69ba      	ldr	r2, [r7, #24]
 800202c:	6878      	ldr	r0, [r7, #4]
 800202e:	f000 fb51 	bl	80026d4 <LL_ConvertLineToARGB8888>
    
    /* Increment the source and destination buffers */
    address+=  (BSP_LCD_GetXSize()*4);
 8002032:	f7ff fb19 	bl	8001668 <BSP_LCD_GetXSize>
 8002036:	4603      	mov	r3, r0
 8002038:	009b      	lsls	r3, r3, #2
 800203a:	6a3a      	ldr	r2, [r7, #32]
 800203c:	4413      	add	r3, r2
 800203e:	623b      	str	r3, [r7, #32]
    pbmp -= width*(bit_pixel/8);
 8002040:	693b      	ldr	r3, [r7, #16]
 8002042:	08db      	lsrs	r3, r3, #3
 8002044:	69ba      	ldr	r2, [r7, #24]
 8002046:	fb02 f303 	mul.w	r3, r2, r3
 800204a:	425b      	negs	r3, r3
 800204c:	687a      	ldr	r2, [r7, #4]
 800204e:	4413      	add	r3, r2
 8002050:	607b      	str	r3, [r7, #4]
  for(index=0; index < height; index++)
 8002052:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002054:	3301      	adds	r3, #1
 8002056:	627b      	str	r3, [r7, #36]	; 0x24
 8002058:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800205a:	697b      	ldr	r3, [r7, #20]
 800205c:	429a      	cmp	r2, r3
 800205e:	d3e2      	bcc.n	8002026 <BSP_LCD_DrawBitmap+0x116>
  } 
}
 8002060:	bf00      	nop
 8002062:	372c      	adds	r7, #44	; 0x2c
 8002064:	46bd      	mov	sp, r7
 8002066:	bd90      	pop	{r4, r7, pc}
 8002068:	2002ca38 	.word	0x2002ca38
 800206c:	2002cba8 	.word	0x2002cba8

08002070 <BSP_LCD_FillRect>:
  * @param  Width: Rectangle width  
  * @param  Height: Rectangle height
  * @retval None
  */
void BSP_LCD_FillRect(uint16_t Xpos, uint16_t Ypos, uint16_t Width, uint16_t Height)
{
 8002070:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002074:	b086      	sub	sp, #24
 8002076:	af02      	add	r7, sp, #8
 8002078:	4604      	mov	r4, r0
 800207a:	4608      	mov	r0, r1
 800207c:	4611      	mov	r1, r2
 800207e:	461a      	mov	r2, r3
 8002080:	4623      	mov	r3, r4
 8002082:	80fb      	strh	r3, [r7, #6]
 8002084:	4603      	mov	r3, r0
 8002086:	80bb      	strh	r3, [r7, #4]
 8002088:	460b      	mov	r3, r1
 800208a:	807b      	strh	r3, [r7, #2]
 800208c:	4613      	mov	r3, r2
 800208e:	803b      	strh	r3, [r7, #0]
  uint32_t  x_address = 0;
 8002090:	2300      	movs	r3, #0
 8002092:	60fb      	str	r3, [r7, #12]
  
  /* Set the text color */
  BSP_LCD_SetTextColor(DrawProp[ActiveLayer].TextColor);
 8002094:	4b30      	ldr	r3, [pc, #192]	; (8002158 <BSP_LCD_FillRect+0xe8>)
 8002096:	681a      	ldr	r2, [r3, #0]
 8002098:	4930      	ldr	r1, [pc, #192]	; (800215c <BSP_LCD_FillRect+0xec>)
 800209a:	4613      	mov	r3, r2
 800209c:	005b      	lsls	r3, r3, #1
 800209e:	4413      	add	r3, r2
 80020a0:	009b      	lsls	r3, r3, #2
 80020a2:	440b      	add	r3, r1
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	4618      	mov	r0, r3
 80020a8:	f7ff fb76 	bl	8001798 <BSP_LCD_SetTextColor>
  
  /* Get the rectangle start address */
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
 80020ac:	4b2a      	ldr	r3, [pc, #168]	; (8002158 <BSP_LCD_FillRect+0xe8>)
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	4a2b      	ldr	r2, [pc, #172]	; (8002160 <BSP_LCD_FillRect+0xf0>)
 80020b2:	2134      	movs	r1, #52	; 0x34
 80020b4:	fb01 f303 	mul.w	r3, r1, r3
 80020b8:	4413      	add	r3, r2
 80020ba:	3348      	adds	r3, #72	; 0x48
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	2b02      	cmp	r3, #2
 80020c0:	d114      	bne.n	80020ec <BSP_LCD_FillRect+0x7c>
  { /* RGB565 format */
    x_address = (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress) + 2*(BSP_LCD_GetXSize()*Ypos + Xpos);
 80020c2:	4b25      	ldr	r3, [pc, #148]	; (8002158 <BSP_LCD_FillRect+0xe8>)
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	4a26      	ldr	r2, [pc, #152]	; (8002160 <BSP_LCD_FillRect+0xf0>)
 80020c8:	2134      	movs	r1, #52	; 0x34
 80020ca:	fb01 f303 	mul.w	r3, r1, r3
 80020ce:	4413      	add	r3, r2
 80020d0:	335c      	adds	r3, #92	; 0x5c
 80020d2:	681c      	ldr	r4, [r3, #0]
 80020d4:	f7ff fac8 	bl	8001668 <BSP_LCD_GetXSize>
 80020d8:	4602      	mov	r2, r0
 80020da:	88bb      	ldrh	r3, [r7, #4]
 80020dc:	fb03 f202 	mul.w	r2, r3, r2
 80020e0:	88fb      	ldrh	r3, [r7, #6]
 80020e2:	4413      	add	r3, r2
 80020e4:	005b      	lsls	r3, r3, #1
 80020e6:	4423      	add	r3, r4
 80020e8:	60fb      	str	r3, [r7, #12]
 80020ea:	e013      	b.n	8002114 <BSP_LCD_FillRect+0xa4>
  }
  else
  { /* ARGB8888 format */
    x_address = (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress) + 4*(BSP_LCD_GetXSize()*Ypos + Xpos);
 80020ec:	4b1a      	ldr	r3, [pc, #104]	; (8002158 <BSP_LCD_FillRect+0xe8>)
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	4a1b      	ldr	r2, [pc, #108]	; (8002160 <BSP_LCD_FillRect+0xf0>)
 80020f2:	2134      	movs	r1, #52	; 0x34
 80020f4:	fb01 f303 	mul.w	r3, r1, r3
 80020f8:	4413      	add	r3, r2
 80020fa:	335c      	adds	r3, #92	; 0x5c
 80020fc:	681c      	ldr	r4, [r3, #0]
 80020fe:	f7ff fab3 	bl	8001668 <BSP_LCD_GetXSize>
 8002102:	4602      	mov	r2, r0
 8002104:	88bb      	ldrh	r3, [r7, #4]
 8002106:	fb03 f202 	mul.w	r2, r3, r2
 800210a:	88fb      	ldrh	r3, [r7, #6]
 800210c:	4413      	add	r3, r2
 800210e:	009b      	lsls	r3, r3, #2
 8002110:	4423      	add	r3, r4
 8002112:	60fb      	str	r3, [r7, #12]
  }
  /* Fill the rectangle */
  LL_FillBuffer(ActiveLayer, (uint32_t *)x_address, Width, Height, (BSP_LCD_GetXSize() - Width), DrawProp[ActiveLayer].TextColor);
 8002114:	4b10      	ldr	r3, [pc, #64]	; (8002158 <BSP_LCD_FillRect+0xe8>)
 8002116:	681c      	ldr	r4, [r3, #0]
 8002118:	68fd      	ldr	r5, [r7, #12]
 800211a:	887e      	ldrh	r6, [r7, #2]
 800211c:	f8b7 8000 	ldrh.w	r8, [r7]
 8002120:	f7ff faa2 	bl	8001668 <BSP_LCD_GetXSize>
 8002124:	4602      	mov	r2, r0
 8002126:	887b      	ldrh	r3, [r7, #2]
 8002128:	1ad1      	subs	r1, r2, r3
 800212a:	4b0b      	ldr	r3, [pc, #44]	; (8002158 <BSP_LCD_FillRect+0xe8>)
 800212c:	681a      	ldr	r2, [r3, #0]
 800212e:	480b      	ldr	r0, [pc, #44]	; (800215c <BSP_LCD_FillRect+0xec>)
 8002130:	4613      	mov	r3, r2
 8002132:	005b      	lsls	r3, r3, #1
 8002134:	4413      	add	r3, r2
 8002136:	009b      	lsls	r3, r3, #2
 8002138:	4403      	add	r3, r0
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	9301      	str	r3, [sp, #4]
 800213e:	9100      	str	r1, [sp, #0]
 8002140:	4643      	mov	r3, r8
 8002142:	4632      	mov	r2, r6
 8002144:	4629      	mov	r1, r5
 8002146:	4620      	mov	r0, r4
 8002148:	f000 fa78 	bl	800263c <LL_FillBuffer>
}
 800214c:	bf00      	nop
 800214e:	3710      	adds	r7, #16
 8002150:	46bd      	mov	sp, r7
 8002152:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002156:	bf00      	nop
 8002158:	2002ca38 	.word	0x2002ca38
 800215c:	2002ca3c 	.word	0x2002ca3c
 8002160:	2002cba8 	.word	0x2002cba8

08002164 <BSP_LCD_FillCircle>:
  * @param  Ypos: Y position
  * @param  Radius: Circle radius
  * @retval None
  */
void BSP_LCD_FillCircle(uint16_t Xpos, uint16_t Ypos, uint16_t Radius)
{
 8002164:	b580      	push	{r7, lr}
 8002166:	b086      	sub	sp, #24
 8002168:	af00      	add	r7, sp, #0
 800216a:	4603      	mov	r3, r0
 800216c:	80fb      	strh	r3, [r7, #6]
 800216e:	460b      	mov	r3, r1
 8002170:	80bb      	strh	r3, [r7, #4]
 8002172:	4613      	mov	r3, r2
 8002174:	807b      	strh	r3, [r7, #2]
  int32_t  decision;     /* Decision Variable */ 
  uint32_t  current_x;   /* Current X Value */
  uint32_t  current_y;   /* Current Y Value */
  
  decision = 3 - (Radius << 1);
 8002176:	887b      	ldrh	r3, [r7, #2]
 8002178:	005b      	lsls	r3, r3, #1
 800217a:	f1c3 0303 	rsb	r3, r3, #3
 800217e:	617b      	str	r3, [r7, #20]
  
  current_x = 0;
 8002180:	2300      	movs	r3, #0
 8002182:	613b      	str	r3, [r7, #16]
  current_y = Radius;
 8002184:	887b      	ldrh	r3, [r7, #2]
 8002186:	60fb      	str	r3, [r7, #12]
  
  BSP_LCD_SetTextColor(DrawProp[ActiveLayer].TextColor);
 8002188:	4b44      	ldr	r3, [pc, #272]	; (800229c <BSP_LCD_FillCircle+0x138>)
 800218a:	681a      	ldr	r2, [r3, #0]
 800218c:	4944      	ldr	r1, [pc, #272]	; (80022a0 <BSP_LCD_FillCircle+0x13c>)
 800218e:	4613      	mov	r3, r2
 8002190:	005b      	lsls	r3, r3, #1
 8002192:	4413      	add	r3, r2
 8002194:	009b      	lsls	r3, r3, #2
 8002196:	440b      	add	r3, r1
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	4618      	mov	r0, r3
 800219c:	f7ff fafc 	bl	8001798 <BSP_LCD_SetTextColor>
  
  while (current_x <= current_y)
 80021a0:	e061      	b.n	8002266 <BSP_LCD_FillCircle+0x102>
  {
    if(current_y > 0) 
 80021a2:	68fb      	ldr	r3, [r7, #12]
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	d021      	beq.n	80021ec <BSP_LCD_FillCircle+0x88>
    {
      BSP_LCD_DrawHLine(Xpos - current_y, Ypos + current_x, 2*current_y);
 80021a8:	68fb      	ldr	r3, [r7, #12]
 80021aa:	b29b      	uxth	r3, r3
 80021ac:	88fa      	ldrh	r2, [r7, #6]
 80021ae:	1ad3      	subs	r3, r2, r3
 80021b0:	b298      	uxth	r0, r3
 80021b2:	693b      	ldr	r3, [r7, #16]
 80021b4:	b29a      	uxth	r2, r3
 80021b6:	88bb      	ldrh	r3, [r7, #4]
 80021b8:	4413      	add	r3, r2
 80021ba:	b299      	uxth	r1, r3
 80021bc:	68fb      	ldr	r3, [r7, #12]
 80021be:	b29b      	uxth	r3, r3
 80021c0:	005b      	lsls	r3, r3, #1
 80021c2:	b29b      	uxth	r3, r3
 80021c4:	461a      	mov	r2, r3
 80021c6:	f7ff fc79 	bl	8001abc <BSP_LCD_DrawHLine>
      BSP_LCD_DrawHLine(Xpos - current_y, Ypos - current_x, 2*current_y);
 80021ca:	68fb      	ldr	r3, [r7, #12]
 80021cc:	b29b      	uxth	r3, r3
 80021ce:	88fa      	ldrh	r2, [r7, #6]
 80021d0:	1ad3      	subs	r3, r2, r3
 80021d2:	b298      	uxth	r0, r3
 80021d4:	693b      	ldr	r3, [r7, #16]
 80021d6:	b29b      	uxth	r3, r3
 80021d8:	88ba      	ldrh	r2, [r7, #4]
 80021da:	1ad3      	subs	r3, r2, r3
 80021dc:	b299      	uxth	r1, r3
 80021de:	68fb      	ldr	r3, [r7, #12]
 80021e0:	b29b      	uxth	r3, r3
 80021e2:	005b      	lsls	r3, r3, #1
 80021e4:	b29b      	uxth	r3, r3
 80021e6:	461a      	mov	r2, r3
 80021e8:	f7ff fc68 	bl	8001abc <BSP_LCD_DrawHLine>
    }
    
    if(current_x > 0) 
 80021ec:	693b      	ldr	r3, [r7, #16]
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	d021      	beq.n	8002236 <BSP_LCD_FillCircle+0xd2>
    {
      BSP_LCD_DrawHLine(Xpos - current_x, Ypos - current_y, 2*current_x);
 80021f2:	693b      	ldr	r3, [r7, #16]
 80021f4:	b29b      	uxth	r3, r3
 80021f6:	88fa      	ldrh	r2, [r7, #6]
 80021f8:	1ad3      	subs	r3, r2, r3
 80021fa:	b298      	uxth	r0, r3
 80021fc:	68fb      	ldr	r3, [r7, #12]
 80021fe:	b29b      	uxth	r3, r3
 8002200:	88ba      	ldrh	r2, [r7, #4]
 8002202:	1ad3      	subs	r3, r2, r3
 8002204:	b299      	uxth	r1, r3
 8002206:	693b      	ldr	r3, [r7, #16]
 8002208:	b29b      	uxth	r3, r3
 800220a:	005b      	lsls	r3, r3, #1
 800220c:	b29b      	uxth	r3, r3
 800220e:	461a      	mov	r2, r3
 8002210:	f7ff fc54 	bl	8001abc <BSP_LCD_DrawHLine>
      BSP_LCD_DrawHLine(Xpos - current_x, Ypos + current_y, 2*current_x);
 8002214:	693b      	ldr	r3, [r7, #16]
 8002216:	b29b      	uxth	r3, r3
 8002218:	88fa      	ldrh	r2, [r7, #6]
 800221a:	1ad3      	subs	r3, r2, r3
 800221c:	b298      	uxth	r0, r3
 800221e:	68fb      	ldr	r3, [r7, #12]
 8002220:	b29a      	uxth	r2, r3
 8002222:	88bb      	ldrh	r3, [r7, #4]
 8002224:	4413      	add	r3, r2
 8002226:	b299      	uxth	r1, r3
 8002228:	693b      	ldr	r3, [r7, #16]
 800222a:	b29b      	uxth	r3, r3
 800222c:	005b      	lsls	r3, r3, #1
 800222e:	b29b      	uxth	r3, r3
 8002230:	461a      	mov	r2, r3
 8002232:	f7ff fc43 	bl	8001abc <BSP_LCD_DrawHLine>
    }
    if (decision < 0)
 8002236:	697b      	ldr	r3, [r7, #20]
 8002238:	2b00      	cmp	r3, #0
 800223a:	da06      	bge.n	800224a <BSP_LCD_FillCircle+0xe6>
    { 
      decision += (current_x << 2) + 6;
 800223c:	693b      	ldr	r3, [r7, #16]
 800223e:	009a      	lsls	r2, r3, #2
 8002240:	697b      	ldr	r3, [r7, #20]
 8002242:	4413      	add	r3, r2
 8002244:	3306      	adds	r3, #6
 8002246:	617b      	str	r3, [r7, #20]
 8002248:	e00a      	b.n	8002260 <BSP_LCD_FillCircle+0xfc>
    }
    else
    {
      decision += ((current_x - current_y) << 2) + 10;
 800224a:	693a      	ldr	r2, [r7, #16]
 800224c:	68fb      	ldr	r3, [r7, #12]
 800224e:	1ad3      	subs	r3, r2, r3
 8002250:	009a      	lsls	r2, r3, #2
 8002252:	697b      	ldr	r3, [r7, #20]
 8002254:	4413      	add	r3, r2
 8002256:	330a      	adds	r3, #10
 8002258:	617b      	str	r3, [r7, #20]
      current_y--;
 800225a:	68fb      	ldr	r3, [r7, #12]
 800225c:	3b01      	subs	r3, #1
 800225e:	60fb      	str	r3, [r7, #12]
    }
    current_x++;
 8002260:	693b      	ldr	r3, [r7, #16]
 8002262:	3301      	adds	r3, #1
 8002264:	613b      	str	r3, [r7, #16]
  while (current_x <= current_y)
 8002266:	693a      	ldr	r2, [r7, #16]
 8002268:	68fb      	ldr	r3, [r7, #12]
 800226a:	429a      	cmp	r2, r3
 800226c:	d999      	bls.n	80021a2 <BSP_LCD_FillCircle+0x3e>
  }
  
  BSP_LCD_SetTextColor(DrawProp[ActiveLayer].TextColor);
 800226e:	4b0b      	ldr	r3, [pc, #44]	; (800229c <BSP_LCD_FillCircle+0x138>)
 8002270:	681a      	ldr	r2, [r3, #0]
 8002272:	490b      	ldr	r1, [pc, #44]	; (80022a0 <BSP_LCD_FillCircle+0x13c>)
 8002274:	4613      	mov	r3, r2
 8002276:	005b      	lsls	r3, r3, #1
 8002278:	4413      	add	r3, r2
 800227a:	009b      	lsls	r3, r3, #2
 800227c:	440b      	add	r3, r1
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	4618      	mov	r0, r3
 8002282:	f7ff fa89 	bl	8001798 <BSP_LCD_SetTextColor>
  BSP_LCD_DrawCircle(Xpos, Ypos, Radius);
 8002286:	887a      	ldrh	r2, [r7, #2]
 8002288:	88b9      	ldrh	r1, [r7, #4]
 800228a:	88fb      	ldrh	r3, [r7, #6]
 800228c:	4618      	mov	r0, r3
 800228e:	f7ff fd07 	bl	8001ca0 <BSP_LCD_DrawCircle>
}
 8002292:	bf00      	nop
 8002294:	3718      	adds	r7, #24
 8002296:	46bd      	mov	sp, r7
 8002298:	bd80      	pop	{r7, pc}
 800229a:	bf00      	nop
 800229c:	2002ca38 	.word	0x2002ca38
 80022a0:	2002ca3c 	.word	0x2002ca3c

080022a4 <BSP_LCD_DisplayOn>:
/**
  * @brief  Enables the display.
  * @retval None
  */
void BSP_LCD_DisplayOn(void)
{
 80022a4:	b580      	push	{r7, lr}
 80022a6:	af00      	add	r7, sp, #0
  /* Display On */
  __HAL_LTDC_ENABLE(&hLtdcHandler);
 80022a8:	4b0a      	ldr	r3, [pc, #40]	; (80022d4 <BSP_LCD_DisplayOn+0x30>)
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	4a09      	ldr	r2, [pc, #36]	; (80022d4 <BSP_LCD_DisplayOn+0x30>)
 80022ae:	6812      	ldr	r2, [r2, #0]
 80022b0:	6992      	ldr	r2, [r2, #24]
 80022b2:	f042 0201 	orr.w	r2, r2, #1
 80022b6:	619a      	str	r2, [r3, #24]
  HAL_GPIO_WritePin(LCD_DISP_GPIO_PORT, LCD_DISP_PIN, GPIO_PIN_SET);        /* Assert LCD_DISP pin */
 80022b8:	2201      	movs	r2, #1
 80022ba:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80022be:	4806      	ldr	r0, [pc, #24]	; (80022d8 <BSP_LCD_DisplayOn+0x34>)
 80022c0:	f001 fff4 	bl	80042ac <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_PORT, LCD_BL_CTRL_PIN, GPIO_PIN_SET);  /* Assert LCD_BL_CTRL pin */
 80022c4:	2201      	movs	r2, #1
 80022c6:	2108      	movs	r1, #8
 80022c8:	4804      	ldr	r0, [pc, #16]	; (80022dc <BSP_LCD_DisplayOn+0x38>)
 80022ca:	f001 ffef 	bl	80042ac <HAL_GPIO_WritePin>
}
 80022ce:	bf00      	nop
 80022d0:	bd80      	pop	{r7, pc}
 80022d2:	bf00      	nop
 80022d4:	2002cba8 	.word	0x2002cba8
 80022d8:	40022000 	.word	0x40022000
 80022dc:	40022800 	.word	0x40022800

080022e0 <BSP_LCD_MspInit>:
  * @param  hltdc: LTDC handle
  * @param  Params
  * @retval None
  */
__weak void BSP_LCD_MspInit(LTDC_HandleTypeDef *hltdc, void *Params)
{
 80022e0:	b580      	push	{r7, lr}
 80022e2:	b090      	sub	sp, #64	; 0x40
 80022e4:	af00      	add	r7, sp, #0
 80022e6:	6078      	str	r0, [r7, #4]
 80022e8:	6039      	str	r1, [r7, #0]
  GPIO_InitTypeDef gpio_init_structure;
  
  /* Enable the LTDC and DMA2D clocks */
  __HAL_RCC_LTDC_CLK_ENABLE();
 80022ea:	4a64      	ldr	r2, [pc, #400]	; (800247c <BSP_LCD_MspInit+0x19c>)
 80022ec:	4b63      	ldr	r3, [pc, #396]	; (800247c <BSP_LCD_MspInit+0x19c>)
 80022ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022f0:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80022f4:	6453      	str	r3, [r2, #68]	; 0x44
 80022f6:	4b61      	ldr	r3, [pc, #388]	; (800247c <BSP_LCD_MspInit+0x19c>)
 80022f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022fa:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80022fe:	62bb      	str	r3, [r7, #40]	; 0x28
 8002300:	6abb      	ldr	r3, [r7, #40]	; 0x28
  __HAL_RCC_DMA2D_CLK_ENABLE();
 8002302:	4a5e      	ldr	r2, [pc, #376]	; (800247c <BSP_LCD_MspInit+0x19c>)
 8002304:	4b5d      	ldr	r3, [pc, #372]	; (800247c <BSP_LCD_MspInit+0x19c>)
 8002306:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002308:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800230c:	6313      	str	r3, [r2, #48]	; 0x30
 800230e:	4b5b      	ldr	r3, [pc, #364]	; (800247c <BSP_LCD_MspInit+0x19c>)
 8002310:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002312:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002316:	627b      	str	r3, [r7, #36]	; 0x24
 8002318:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  
  /* Enable GPIOs clock */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800231a:	4a58      	ldr	r2, [pc, #352]	; (800247c <BSP_LCD_MspInit+0x19c>)
 800231c:	4b57      	ldr	r3, [pc, #348]	; (800247c <BSP_LCD_MspInit+0x19c>)
 800231e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002320:	f043 0310 	orr.w	r3, r3, #16
 8002324:	6313      	str	r3, [r2, #48]	; 0x30
 8002326:	4b55      	ldr	r3, [pc, #340]	; (800247c <BSP_LCD_MspInit+0x19c>)
 8002328:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800232a:	f003 0310 	and.w	r3, r3, #16
 800232e:	623b      	str	r3, [r7, #32]
 8002330:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8002332:	4a52      	ldr	r2, [pc, #328]	; (800247c <BSP_LCD_MspInit+0x19c>)
 8002334:	4b51      	ldr	r3, [pc, #324]	; (800247c <BSP_LCD_MspInit+0x19c>)
 8002336:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002338:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800233c:	6313      	str	r3, [r2, #48]	; 0x30
 800233e:	4b4f      	ldr	r3, [pc, #316]	; (800247c <BSP_LCD_MspInit+0x19c>)
 8002340:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002342:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002346:	61fb      	str	r3, [r7, #28]
 8002348:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 800234a:	4a4c      	ldr	r2, [pc, #304]	; (800247c <BSP_LCD_MspInit+0x19c>)
 800234c:	4b4b      	ldr	r3, [pc, #300]	; (800247c <BSP_LCD_MspInit+0x19c>)
 800234e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002350:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002354:	6313      	str	r3, [r2, #48]	; 0x30
 8002356:	4b49      	ldr	r3, [pc, #292]	; (800247c <BSP_LCD_MspInit+0x19c>)
 8002358:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800235a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800235e:	61bb      	str	r3, [r7, #24]
 8002360:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 8002362:	4a46      	ldr	r2, [pc, #280]	; (800247c <BSP_LCD_MspInit+0x19c>)
 8002364:	4b45      	ldr	r3, [pc, #276]	; (800247c <BSP_LCD_MspInit+0x19c>)
 8002366:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002368:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800236c:	6313      	str	r3, [r2, #48]	; 0x30
 800236e:	4b43      	ldr	r3, [pc, #268]	; (800247c <BSP_LCD_MspInit+0x19c>)
 8002370:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002372:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002376:	617b      	str	r3, [r7, #20]
 8002378:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 800237a:	4a40      	ldr	r2, [pc, #256]	; (800247c <BSP_LCD_MspInit+0x19c>)
 800237c:	4b3f      	ldr	r3, [pc, #252]	; (800247c <BSP_LCD_MspInit+0x19c>)
 800237e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002380:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002384:	6313      	str	r3, [r2, #48]	; 0x30
 8002386:	4b3d      	ldr	r3, [pc, #244]	; (800247c <BSP_LCD_MspInit+0x19c>)
 8002388:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800238a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800238e:	613b      	str	r3, [r7, #16]
 8002390:	693b      	ldr	r3, [r7, #16]
  LCD_DISP_GPIO_CLK_ENABLE();
 8002392:	4a3a      	ldr	r2, [pc, #232]	; (800247c <BSP_LCD_MspInit+0x19c>)
 8002394:	4b39      	ldr	r3, [pc, #228]	; (800247c <BSP_LCD_MspInit+0x19c>)
 8002396:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002398:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800239c:	6313      	str	r3, [r2, #48]	; 0x30
 800239e:	4b37      	ldr	r3, [pc, #220]	; (800247c <BSP_LCD_MspInit+0x19c>)
 80023a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80023a6:	60fb      	str	r3, [r7, #12]
 80023a8:	68fb      	ldr	r3, [r7, #12]
  LCD_BL_CTRL_GPIO_CLK_ENABLE();
 80023aa:	4a34      	ldr	r2, [pc, #208]	; (800247c <BSP_LCD_MspInit+0x19c>)
 80023ac:	4b33      	ldr	r3, [pc, #204]	; (800247c <BSP_LCD_MspInit+0x19c>)
 80023ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023b0:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80023b4:	6313      	str	r3, [r2, #48]	; 0x30
 80023b6:	4b31      	ldr	r3, [pc, #196]	; (800247c <BSP_LCD_MspInit+0x19c>)
 80023b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023ba:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80023be:	60bb      	str	r3, [r7, #8]
 80023c0:	68bb      	ldr	r3, [r7, #8]

  /*** LTDC Pins configuration ***/
  /* GPIOE configuration */
  gpio_init_structure.Pin       = GPIO_PIN_4;
 80023c2:	2310      	movs	r3, #16
 80023c4:	62fb      	str	r3, [r7, #44]	; 0x2c
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 80023c6:	2302      	movs	r3, #2
 80023c8:	633b      	str	r3, [r7, #48]	; 0x30
  gpio_init_structure.Pull      = GPIO_NOPULL;
 80023ca:	2300      	movs	r3, #0
 80023cc:	637b      	str	r3, [r7, #52]	; 0x34
  gpio_init_structure.Speed     = GPIO_SPEED_FAST;
 80023ce:	2302      	movs	r3, #2
 80023d0:	63bb      	str	r3, [r7, #56]	; 0x38
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;  
 80023d2:	230e      	movs	r3, #14
 80023d4:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOE, &gpio_init_structure);
 80023d6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80023da:	4619      	mov	r1, r3
 80023dc:	4828      	ldr	r0, [pc, #160]	; (8002480 <BSP_LCD_MspInit+0x1a0>)
 80023de:	f001 fda3 	bl	8003f28 <HAL_GPIO_Init>

  /* GPIOG configuration */
  gpio_init_structure.Pin       = GPIO_PIN_12;
 80023e2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80023e6:	62fb      	str	r3, [r7, #44]	; 0x2c
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 80023e8:	2302      	movs	r3, #2
 80023ea:	633b      	str	r3, [r7, #48]	; 0x30
  gpio_init_structure.Alternate = GPIO_AF9_LTDC;
 80023ec:	2309      	movs	r3, #9
 80023ee:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOG, &gpio_init_structure);
 80023f0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80023f4:	4619      	mov	r1, r3
 80023f6:	4823      	ldr	r0, [pc, #140]	; (8002484 <BSP_LCD_MspInit+0x1a4>)
 80023f8:	f001 fd96 	bl	8003f28 <HAL_GPIO_Init>

  /* GPIOI LTDC alternate configuration */
  gpio_init_structure.Pin       = GPIO_PIN_9 | GPIO_PIN_10 | \
 80023fc:	f44f 4366 	mov.w	r3, #58880	; 0xe600
 8002400:	62fb      	str	r3, [r7, #44]	; 0x2c
                                  GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15;
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8002402:	2302      	movs	r3, #2
 8002404:	633b      	str	r3, [r7, #48]	; 0x30
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;
 8002406:	230e      	movs	r3, #14
 8002408:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOI, &gpio_init_structure);
 800240a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800240e:	4619      	mov	r1, r3
 8002410:	481d      	ldr	r0, [pc, #116]	; (8002488 <BSP_LCD_MspInit+0x1a8>)
 8002412:	f001 fd89 	bl	8003f28 <HAL_GPIO_Init>

  /* GPIOJ configuration */  
  gpio_init_structure.Pin       = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_3 | \
 8002416:	f64e 73ff 	movw	r3, #61439	; 0xefff
 800241a:	62fb      	str	r3, [r7, #44]	; 0x2c
                                  GPIO_PIN_4 | GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7 | \
                                  GPIO_PIN_8 | GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_11 | \
                                  GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15;
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 800241c:	2302      	movs	r3, #2
 800241e:	633b      	str	r3, [r7, #48]	; 0x30
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;
 8002420:	230e      	movs	r3, #14
 8002422:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOJ, &gpio_init_structure);  
 8002424:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002428:	4619      	mov	r1, r3
 800242a:	4818      	ldr	r0, [pc, #96]	; (800248c <BSP_LCD_MspInit+0x1ac>)
 800242c:	f001 fd7c 	bl	8003f28 <HAL_GPIO_Init>

  /* GPIOK configuration */  
  gpio_init_structure.Pin       = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_4 | \
 8002430:	23f7      	movs	r3, #247	; 0xf7
 8002432:	62fb      	str	r3, [r7, #44]	; 0x2c
                                  GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7;
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8002434:	2302      	movs	r3, #2
 8002436:	633b      	str	r3, [r7, #48]	; 0x30
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;
 8002438:	230e      	movs	r3, #14
 800243a:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOK, &gpio_init_structure);
 800243c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002440:	4619      	mov	r1, r3
 8002442:	4813      	ldr	r0, [pc, #76]	; (8002490 <BSP_LCD_MspInit+0x1b0>)
 8002444:	f001 fd70 	bl	8003f28 <HAL_GPIO_Init>

  /* LCD_DISP GPIO configuration */
  gpio_init_structure.Pin       = LCD_DISP_PIN;     /* LCD_DISP pin has to be manually controlled */
 8002448:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800244c:	62fb      	str	r3, [r7, #44]	; 0x2c
  gpio_init_structure.Mode      = GPIO_MODE_OUTPUT_PP;
 800244e:	2301      	movs	r3, #1
 8002450:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LCD_DISP_GPIO_PORT, &gpio_init_structure);
 8002452:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002456:	4619      	mov	r1, r3
 8002458:	480b      	ldr	r0, [pc, #44]	; (8002488 <BSP_LCD_MspInit+0x1a8>)
 800245a:	f001 fd65 	bl	8003f28 <HAL_GPIO_Init>

  /* LCD_BL_CTRL GPIO configuration */
  gpio_init_structure.Pin       = LCD_BL_CTRL_PIN;  /* LCD_BL_CTRL pin has to be manually controlled */
 800245e:	2308      	movs	r3, #8
 8002460:	62fb      	str	r3, [r7, #44]	; 0x2c
  gpio_init_structure.Mode      = GPIO_MODE_OUTPUT_PP;
 8002462:	2301      	movs	r3, #1
 8002464:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_PORT, &gpio_init_structure);
 8002466:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800246a:	4619      	mov	r1, r3
 800246c:	4808      	ldr	r0, [pc, #32]	; (8002490 <BSP_LCD_MspInit+0x1b0>)
 800246e:	f001 fd5b 	bl	8003f28 <HAL_GPIO_Init>
}
 8002472:	bf00      	nop
 8002474:	3740      	adds	r7, #64	; 0x40
 8002476:	46bd      	mov	sp, r7
 8002478:	bd80      	pop	{r7, pc}
 800247a:	bf00      	nop
 800247c:	40023800 	.word	0x40023800
 8002480:	40021000 	.word	0x40021000
 8002484:	40021800 	.word	0x40021800
 8002488:	40022000 	.word	0x40022000
 800248c:	40022400 	.word	0x40022400
 8002490:	40022800 	.word	0x40022800

08002494 <BSP_LCD_ClockConfig>:
  * @note   This API is called by BSP_LCD_Init()
  *         Being __weak it can be overwritten by the application
  * @retval None
  */
__weak void BSP_LCD_ClockConfig(LTDC_HandleTypeDef *hltdc, void *Params)
{
 8002494:	b580      	push	{r7, lr}
 8002496:	b082      	sub	sp, #8
 8002498:	af00      	add	r7, sp, #0
 800249a:	6078      	str	r0, [r7, #4]
 800249c:	6039      	str	r1, [r7, #0]
  /* RK043FN48H LCD clock configuration */
  /* PLLSAI_VCO Input = HSE_VALUE/PLL_M = 1 Mhz */
  /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN = 192 Mhz */
  /* PLLLCDCLK = PLLSAI_VCO Output/PLLSAIR = 192/5 = 38.4 Mhz */
  /* LTDC clock frequency = PLLLCDCLK / LTDC_PLLSAI_DIVR_4 = 38.4/4 = 9.6Mhz */
  periph_clk_init_struct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 800249e:	4b0a      	ldr	r3, [pc, #40]	; (80024c8 <BSP_LCD_ClockConfig+0x34>)
 80024a0:	2208      	movs	r2, #8
 80024a2:	601a      	str	r2, [r3, #0]
  periph_clk_init_struct.PLLSAI.PLLSAIN = 192;
 80024a4:	4b08      	ldr	r3, [pc, #32]	; (80024c8 <BSP_LCD_ClockConfig+0x34>)
 80024a6:	22c0      	movs	r2, #192	; 0xc0
 80024a8:	615a      	str	r2, [r3, #20]
  periph_clk_init_struct.PLLSAI.PLLSAIR = RK043FN48H_FREQUENCY_DIVIDER;
 80024aa:	4b07      	ldr	r3, [pc, #28]	; (80024c8 <BSP_LCD_ClockConfig+0x34>)
 80024ac:	2205      	movs	r2, #5
 80024ae:	61da      	str	r2, [r3, #28]
  periph_clk_init_struct.PLLSAIDivR = RCC_PLLSAIDIVR_4;
 80024b0:	4b05      	ldr	r3, [pc, #20]	; (80024c8 <BSP_LCD_ClockConfig+0x34>)
 80024b2:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80024b6:	62da      	str	r2, [r3, #44]	; 0x2c
  HAL_RCCEx_PeriphCLKConfig(&periph_clk_init_struct);
 80024b8:	4803      	ldr	r0, [pc, #12]	; (80024c8 <BSP_LCD_ClockConfig+0x34>)
 80024ba:	f003 fcbf 	bl	8005e3c <HAL_RCCEx_PeriphCLKConfig>
}
 80024be:	bf00      	nop
 80024c0:	3708      	adds	r7, #8
 80024c2:	46bd      	mov	sp, r7
 80024c4:	bd80      	pop	{r7, pc}
 80024c6:	bf00      	nop
 80024c8:	2002ca54 	.word	0x2002ca54

080024cc <DrawChar>:
  * @param  Ypos: Start column address
  * @param  c: Pointer to the character data
  * @retval None
  */
static void DrawChar(uint16_t Xpos, uint16_t Ypos, const uint8_t *c)
{
 80024cc:	b580      	push	{r7, lr}
 80024ce:	b088      	sub	sp, #32
 80024d0:	af00      	add	r7, sp, #0
 80024d2:	4603      	mov	r3, r0
 80024d4:	603a      	str	r2, [r7, #0]
 80024d6:	80fb      	strh	r3, [r7, #6]
 80024d8:	460b      	mov	r3, r1
 80024da:	80bb      	strh	r3, [r7, #4]
  uint32_t i = 0, j = 0;
 80024dc:	2300      	movs	r3, #0
 80024de:	61fb      	str	r3, [r7, #28]
 80024e0:	2300      	movs	r3, #0
 80024e2:	61bb      	str	r3, [r7, #24]
  uint16_t height, width;
  uint8_t  offset;
  uint8_t  *pchar;
  uint32_t line;
  
  height = DrawProp[ActiveLayer].pFont->Height;
 80024e4:	4b53      	ldr	r3, [pc, #332]	; (8002634 <DrawChar+0x168>)
 80024e6:	681a      	ldr	r2, [r3, #0]
 80024e8:	4953      	ldr	r1, [pc, #332]	; (8002638 <DrawChar+0x16c>)
 80024ea:	4613      	mov	r3, r2
 80024ec:	005b      	lsls	r3, r3, #1
 80024ee:	4413      	add	r3, r2
 80024f0:	009b      	lsls	r3, r3, #2
 80024f2:	440b      	add	r3, r1
 80024f4:	3308      	adds	r3, #8
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	88db      	ldrh	r3, [r3, #6]
 80024fa:	827b      	strh	r3, [r7, #18]
  width  = DrawProp[ActiveLayer].pFont->Width;
 80024fc:	4b4d      	ldr	r3, [pc, #308]	; (8002634 <DrawChar+0x168>)
 80024fe:	681a      	ldr	r2, [r3, #0]
 8002500:	494d      	ldr	r1, [pc, #308]	; (8002638 <DrawChar+0x16c>)
 8002502:	4613      	mov	r3, r2
 8002504:	005b      	lsls	r3, r3, #1
 8002506:	4413      	add	r3, r2
 8002508:	009b      	lsls	r3, r3, #2
 800250a:	440b      	add	r3, r1
 800250c:	3308      	adds	r3, #8
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	889b      	ldrh	r3, [r3, #4]
 8002512:	823b      	strh	r3, [r7, #16]
  
  offset =  8 *((width + 7)/8) -  width ;
 8002514:	8a3b      	ldrh	r3, [r7, #16]
 8002516:	3307      	adds	r3, #7
 8002518:	2b00      	cmp	r3, #0
 800251a:	da00      	bge.n	800251e <DrawChar+0x52>
 800251c:	3307      	adds	r3, #7
 800251e:	10db      	asrs	r3, r3, #3
 8002520:	b2db      	uxtb	r3, r3
 8002522:	00db      	lsls	r3, r3, #3
 8002524:	b2da      	uxtb	r2, r3
 8002526:	8a3b      	ldrh	r3, [r7, #16]
 8002528:	b2db      	uxtb	r3, r3
 800252a:	1ad3      	subs	r3, r2, r3
 800252c:	73fb      	strb	r3, [r7, #15]
  
  for(i = 0; i < height; i++)
 800252e:	2300      	movs	r3, #0
 8002530:	61fb      	str	r3, [r7, #28]
 8002532:	e076      	b.n	8002622 <DrawChar+0x156>
  {
    pchar = ((uint8_t *)c + (width + 7)/8 * i);
 8002534:	8a3b      	ldrh	r3, [r7, #16]
 8002536:	3307      	adds	r3, #7
 8002538:	2b00      	cmp	r3, #0
 800253a:	da00      	bge.n	800253e <DrawChar+0x72>
 800253c:	3307      	adds	r3, #7
 800253e:	10db      	asrs	r3, r3, #3
 8002540:	461a      	mov	r2, r3
 8002542:	69fb      	ldr	r3, [r7, #28]
 8002544:	fb03 f302 	mul.w	r3, r3, r2
 8002548:	683a      	ldr	r2, [r7, #0]
 800254a:	4413      	add	r3, r2
 800254c:	60bb      	str	r3, [r7, #8]
    
    switch(((width + 7)/8))
 800254e:	8a3b      	ldrh	r3, [r7, #16]
 8002550:	3307      	adds	r3, #7
 8002552:	2b00      	cmp	r3, #0
 8002554:	da00      	bge.n	8002558 <DrawChar+0x8c>
 8002556:	3307      	adds	r3, #7
 8002558:	10db      	asrs	r3, r3, #3
 800255a:	2b01      	cmp	r3, #1
 800255c:	d002      	beq.n	8002564 <DrawChar+0x98>
 800255e:	2b02      	cmp	r3, #2
 8002560:	d004      	beq.n	800256c <DrawChar+0xa0>
 8002562:	e00c      	b.n	800257e <DrawChar+0xb2>
    {
      
    case 1:
      line =  pchar[0];      
 8002564:	68bb      	ldr	r3, [r7, #8]
 8002566:	781b      	ldrb	r3, [r3, #0]
 8002568:	617b      	str	r3, [r7, #20]
      break;
 800256a:	e016      	b.n	800259a <DrawChar+0xce>
      
    case 2:
      line =  (pchar[0]<< 8) | pchar[1];      
 800256c:	68bb      	ldr	r3, [r7, #8]
 800256e:	781b      	ldrb	r3, [r3, #0]
 8002570:	021b      	lsls	r3, r3, #8
 8002572:	68ba      	ldr	r2, [r7, #8]
 8002574:	3201      	adds	r2, #1
 8002576:	7812      	ldrb	r2, [r2, #0]
 8002578:	4313      	orrs	r3, r2
 800257a:	617b      	str	r3, [r7, #20]
      break;
 800257c:	e00d      	b.n	800259a <DrawChar+0xce>
      
    case 3:
    default:
      line =  (pchar[0]<< 16) | (pchar[1]<< 8) | pchar[2];      
 800257e:	68bb      	ldr	r3, [r7, #8]
 8002580:	781b      	ldrb	r3, [r3, #0]
 8002582:	041a      	lsls	r2, r3, #16
 8002584:	68bb      	ldr	r3, [r7, #8]
 8002586:	3301      	adds	r3, #1
 8002588:	781b      	ldrb	r3, [r3, #0]
 800258a:	021b      	lsls	r3, r3, #8
 800258c:	4313      	orrs	r3, r2
 800258e:	68ba      	ldr	r2, [r7, #8]
 8002590:	3202      	adds	r2, #2
 8002592:	7812      	ldrb	r2, [r2, #0]
 8002594:	4313      	orrs	r3, r2
 8002596:	617b      	str	r3, [r7, #20]
      break;
 8002598:	bf00      	nop
    } 
    
    for (j = 0; j < width; j++)
 800259a:	2300      	movs	r3, #0
 800259c:	61bb      	str	r3, [r7, #24]
 800259e:	e036      	b.n	800260e <DrawChar+0x142>
    {
      if(line & (1 << (width- j + offset- 1))) 
 80025a0:	8a3a      	ldrh	r2, [r7, #16]
 80025a2:	69bb      	ldr	r3, [r7, #24]
 80025a4:	1ad2      	subs	r2, r2, r3
 80025a6:	7bfb      	ldrb	r3, [r7, #15]
 80025a8:	4413      	add	r3, r2
 80025aa:	3b01      	subs	r3, #1
 80025ac:	2201      	movs	r2, #1
 80025ae:	fa02 f303 	lsl.w	r3, r2, r3
 80025b2:	461a      	mov	r2, r3
 80025b4:	697b      	ldr	r3, [r7, #20]
 80025b6:	4013      	ands	r3, r2
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	d012      	beq.n	80025e2 <DrawChar+0x116>
      {
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp[ActiveLayer].TextColor);
 80025bc:	69bb      	ldr	r3, [r7, #24]
 80025be:	b29a      	uxth	r2, r3
 80025c0:	88fb      	ldrh	r3, [r7, #6]
 80025c2:	4413      	add	r3, r2
 80025c4:	b298      	uxth	r0, r3
 80025c6:	4b1b      	ldr	r3, [pc, #108]	; (8002634 <DrawChar+0x168>)
 80025c8:	681a      	ldr	r2, [r3, #0]
 80025ca:	491b      	ldr	r1, [pc, #108]	; (8002638 <DrawChar+0x16c>)
 80025cc:	4613      	mov	r3, r2
 80025ce:	005b      	lsls	r3, r3, #1
 80025d0:	4413      	add	r3, r2
 80025d2:	009b      	lsls	r3, r3, #2
 80025d4:	440b      	add	r3, r1
 80025d6:	681a      	ldr	r2, [r3, #0]
 80025d8:	88bb      	ldrh	r3, [r7, #4]
 80025da:	4619      	mov	r1, r3
 80025dc:	f7ff fc50 	bl	8001e80 <BSP_LCD_DrawPixel>
 80025e0:	e012      	b.n	8002608 <DrawChar+0x13c>
      }
      else
      {
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp[ActiveLayer].BackColor);
 80025e2:	69bb      	ldr	r3, [r7, #24]
 80025e4:	b29a      	uxth	r2, r3
 80025e6:	88fb      	ldrh	r3, [r7, #6]
 80025e8:	4413      	add	r3, r2
 80025ea:	b298      	uxth	r0, r3
 80025ec:	4b11      	ldr	r3, [pc, #68]	; (8002634 <DrawChar+0x168>)
 80025ee:	681a      	ldr	r2, [r3, #0]
 80025f0:	4911      	ldr	r1, [pc, #68]	; (8002638 <DrawChar+0x16c>)
 80025f2:	4613      	mov	r3, r2
 80025f4:	005b      	lsls	r3, r3, #1
 80025f6:	4413      	add	r3, r2
 80025f8:	009b      	lsls	r3, r3, #2
 80025fa:	440b      	add	r3, r1
 80025fc:	3304      	adds	r3, #4
 80025fe:	681a      	ldr	r2, [r3, #0]
 8002600:	88bb      	ldrh	r3, [r7, #4]
 8002602:	4619      	mov	r1, r3
 8002604:	f7ff fc3c 	bl	8001e80 <BSP_LCD_DrawPixel>
    for (j = 0; j < width; j++)
 8002608:	69bb      	ldr	r3, [r7, #24]
 800260a:	3301      	adds	r3, #1
 800260c:	61bb      	str	r3, [r7, #24]
 800260e:	8a3a      	ldrh	r2, [r7, #16]
 8002610:	69bb      	ldr	r3, [r7, #24]
 8002612:	429a      	cmp	r2, r3
 8002614:	d8c4      	bhi.n	80025a0 <DrawChar+0xd4>
      } 
    }
    Ypos++;
 8002616:	88bb      	ldrh	r3, [r7, #4]
 8002618:	3301      	adds	r3, #1
 800261a:	80bb      	strh	r3, [r7, #4]
  for(i = 0; i < height; i++)
 800261c:	69fb      	ldr	r3, [r7, #28]
 800261e:	3301      	adds	r3, #1
 8002620:	61fb      	str	r3, [r7, #28]
 8002622:	8a7a      	ldrh	r2, [r7, #18]
 8002624:	69fb      	ldr	r3, [r7, #28]
 8002626:	429a      	cmp	r2, r3
 8002628:	d884      	bhi.n	8002534 <DrawChar+0x68>
  }
}
 800262a:	bf00      	nop
 800262c:	3720      	adds	r7, #32
 800262e:	46bd      	mov	sp, r7
 8002630:	bd80      	pop	{r7, pc}
 8002632:	bf00      	nop
 8002634:	2002ca38 	.word	0x2002ca38
 8002638:	2002ca3c 	.word	0x2002ca3c

0800263c <LL_FillBuffer>:
  * @param  OffLine: Offset
  * @param  ColorIndex: Color index
  * @retval None
  */
static void LL_FillBuffer(uint32_t LayerIndex, void *pDst, uint32_t xSize, uint32_t ySize, uint32_t OffLine, uint32_t ColorIndex) 
{
 800263c:	b580      	push	{r7, lr}
 800263e:	b086      	sub	sp, #24
 8002640:	af02      	add	r7, sp, #8
 8002642:	60f8      	str	r0, [r7, #12]
 8002644:	60b9      	str	r1, [r7, #8]
 8002646:	607a      	str	r2, [r7, #4]
 8002648:	603b      	str	r3, [r7, #0]
  /* Register to memory mode with ARGB8888 as color Mode */ 
  hDma2dHandler.Init.Mode         = DMA2D_R2M;
 800264a:	4b1e      	ldr	r3, [pc, #120]	; (80026c4 <LL_FillBuffer+0x88>)
 800264c:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8002650:	605a      	str	r2, [r3, #4]
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
 8002652:	4b1d      	ldr	r3, [pc, #116]	; (80026c8 <LL_FillBuffer+0x8c>)
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	4a1d      	ldr	r2, [pc, #116]	; (80026cc <LL_FillBuffer+0x90>)
 8002658:	2134      	movs	r1, #52	; 0x34
 800265a:	fb01 f303 	mul.w	r3, r1, r3
 800265e:	4413      	add	r3, r2
 8002660:	3348      	adds	r3, #72	; 0x48
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	2b02      	cmp	r3, #2
 8002666:	d103      	bne.n	8002670 <LL_FillBuffer+0x34>
  { /* RGB565 format */ 
    hDma2dHandler.Init.ColorMode    = DMA2D_RGB565;
 8002668:	4b16      	ldr	r3, [pc, #88]	; (80026c4 <LL_FillBuffer+0x88>)
 800266a:	2202      	movs	r2, #2
 800266c:	609a      	str	r2, [r3, #8]
 800266e:	e002      	b.n	8002676 <LL_FillBuffer+0x3a>
  }
  else
  { /* ARGB8888 format */
    hDma2dHandler.Init.ColorMode    = DMA2D_ARGB8888;
 8002670:	4b14      	ldr	r3, [pc, #80]	; (80026c4 <LL_FillBuffer+0x88>)
 8002672:	2200      	movs	r2, #0
 8002674:	609a      	str	r2, [r3, #8]
  }
  hDma2dHandler.Init.OutputOffset = OffLine;      
 8002676:	4a13      	ldr	r2, [pc, #76]	; (80026c4 <LL_FillBuffer+0x88>)
 8002678:	69bb      	ldr	r3, [r7, #24]
 800267a:	60d3      	str	r3, [r2, #12]
  
  hDma2dHandler.Instance = DMA2D;
 800267c:	4b11      	ldr	r3, [pc, #68]	; (80026c4 <LL_FillBuffer+0x88>)
 800267e:	4a14      	ldr	r2, [pc, #80]	; (80026d0 <LL_FillBuffer+0x94>)
 8002680:	601a      	str	r2, [r3, #0]
  
  /* DMA2D Initialization */
  if(HAL_DMA2D_Init(&hDma2dHandler) == HAL_OK) 
 8002682:	4810      	ldr	r0, [pc, #64]	; (80026c4 <LL_FillBuffer+0x88>)
 8002684:	f001 f8a8 	bl	80037d8 <HAL_DMA2D_Init>
 8002688:	4603      	mov	r3, r0
 800268a:	2b00      	cmp	r3, #0
 800268c:	d115      	bne.n	80026ba <LL_FillBuffer+0x7e>
  {
    if(HAL_DMA2D_ConfigLayer(&hDma2dHandler, LayerIndex) == HAL_OK) 
 800268e:	68f9      	ldr	r1, [r7, #12]
 8002690:	480c      	ldr	r0, [pc, #48]	; (80026c4 <LL_FillBuffer+0x88>)
 8002692:	f001 fb0f 	bl	8003cb4 <HAL_DMA2D_ConfigLayer>
 8002696:	4603      	mov	r3, r0
 8002698:	2b00      	cmp	r3, #0
 800269a:	d10e      	bne.n	80026ba <LL_FillBuffer+0x7e>
    {
      if (HAL_DMA2D_Start(&hDma2dHandler, ColorIndex, (uint32_t)pDst, xSize, ySize) == HAL_OK)
 800269c:	68ba      	ldr	r2, [r7, #8]
 800269e:	683b      	ldr	r3, [r7, #0]
 80026a0:	9300      	str	r3, [sp, #0]
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	69f9      	ldr	r1, [r7, #28]
 80026a6:	4807      	ldr	r0, [pc, #28]	; (80026c4 <LL_FillBuffer+0x88>)
 80026a8:	f001 f8e0 	bl	800386c <HAL_DMA2D_Start>
 80026ac:	4603      	mov	r3, r0
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d103      	bne.n	80026ba <LL_FillBuffer+0x7e>
      {
        /* Polling For DMA transfer */  
        HAL_DMA2D_PollForTransfer(&hDma2dHandler, 10);
 80026b2:	210a      	movs	r1, #10
 80026b4:	4803      	ldr	r0, [pc, #12]	; (80026c4 <LL_FillBuffer+0x88>)
 80026b6:	f001 f904 	bl	80038c2 <HAL_DMA2D_PollForTransfer>
      }
    }
  } 
}
 80026ba:	bf00      	nop
 80026bc:	3710      	adds	r7, #16
 80026be:	46bd      	mov	sp, r7
 80026c0:	bd80      	pop	{r7, pc}
 80026c2:	bf00      	nop
 80026c4:	2002c9f8 	.word	0x2002c9f8
 80026c8:	2002ca38 	.word	0x2002ca38
 80026cc:	2002cba8 	.word	0x2002cba8
 80026d0:	4002b000 	.word	0x4002b000

080026d4 <LL_ConvertLineToARGB8888>:
  * @param  xSize: Buffer width
  * @param  ColorMode: Input color mode   
  * @retval None
  */
static void LL_ConvertLineToARGB8888(void *pSrc, void *pDst, uint32_t xSize, uint32_t ColorMode)
{    
 80026d4:	b580      	push	{r7, lr}
 80026d6:	b086      	sub	sp, #24
 80026d8:	af02      	add	r7, sp, #8
 80026da:	60f8      	str	r0, [r7, #12]
 80026dc:	60b9      	str	r1, [r7, #8]
 80026de:	607a      	str	r2, [r7, #4]
 80026e0:	603b      	str	r3, [r7, #0]
  /* Configure the DMA2D Mode, Color Mode and output offset */
  hDma2dHandler.Init.Mode         = DMA2D_M2M_PFC;
 80026e2:	4b1c      	ldr	r3, [pc, #112]	; (8002754 <LL_ConvertLineToARGB8888+0x80>)
 80026e4:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80026e8:	605a      	str	r2, [r3, #4]
  hDma2dHandler.Init.ColorMode    = DMA2D_ARGB8888;
 80026ea:	4b1a      	ldr	r3, [pc, #104]	; (8002754 <LL_ConvertLineToARGB8888+0x80>)
 80026ec:	2200      	movs	r2, #0
 80026ee:	609a      	str	r2, [r3, #8]
  hDma2dHandler.Init.OutputOffset = 0;     
 80026f0:	4b18      	ldr	r3, [pc, #96]	; (8002754 <LL_ConvertLineToARGB8888+0x80>)
 80026f2:	2200      	movs	r2, #0
 80026f4:	60da      	str	r2, [r3, #12]
  
  /* Foreground Configuration */
  hDma2dHandler.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 80026f6:	4b17      	ldr	r3, [pc, #92]	; (8002754 <LL_ConvertLineToARGB8888+0x80>)
 80026f8:	2200      	movs	r2, #0
 80026fa:	631a      	str	r2, [r3, #48]	; 0x30
  hDma2dHandler.LayerCfg[1].InputAlpha = 0xFF;
 80026fc:	4b15      	ldr	r3, [pc, #84]	; (8002754 <LL_ConvertLineToARGB8888+0x80>)
 80026fe:	22ff      	movs	r2, #255	; 0xff
 8002700:	635a      	str	r2, [r3, #52]	; 0x34
  hDma2dHandler.LayerCfg[1].InputColorMode = ColorMode;
 8002702:	4a14      	ldr	r2, [pc, #80]	; (8002754 <LL_ConvertLineToARGB8888+0x80>)
 8002704:	683b      	ldr	r3, [r7, #0]
 8002706:	62d3      	str	r3, [r2, #44]	; 0x2c
  hDma2dHandler.LayerCfg[1].InputOffset = 0;
 8002708:	4b12      	ldr	r3, [pc, #72]	; (8002754 <LL_ConvertLineToARGB8888+0x80>)
 800270a:	2200      	movs	r2, #0
 800270c:	629a      	str	r2, [r3, #40]	; 0x28
  
  hDma2dHandler.Instance = DMA2D; 
 800270e:	4b11      	ldr	r3, [pc, #68]	; (8002754 <LL_ConvertLineToARGB8888+0x80>)
 8002710:	4a11      	ldr	r2, [pc, #68]	; (8002758 <LL_ConvertLineToARGB8888+0x84>)
 8002712:	601a      	str	r2, [r3, #0]
  
  /* DMA2D Initialization */
  if(HAL_DMA2D_Init(&hDma2dHandler) == HAL_OK) 
 8002714:	480f      	ldr	r0, [pc, #60]	; (8002754 <LL_ConvertLineToARGB8888+0x80>)
 8002716:	f001 f85f 	bl	80037d8 <HAL_DMA2D_Init>
 800271a:	4603      	mov	r3, r0
 800271c:	2b00      	cmp	r3, #0
 800271e:	d115      	bne.n	800274c <LL_ConvertLineToARGB8888+0x78>
  {
    if(HAL_DMA2D_ConfigLayer(&hDma2dHandler, 1) == HAL_OK) 
 8002720:	2101      	movs	r1, #1
 8002722:	480c      	ldr	r0, [pc, #48]	; (8002754 <LL_ConvertLineToARGB8888+0x80>)
 8002724:	f001 fac6 	bl	8003cb4 <HAL_DMA2D_ConfigLayer>
 8002728:	4603      	mov	r3, r0
 800272a:	2b00      	cmp	r3, #0
 800272c:	d10e      	bne.n	800274c <LL_ConvertLineToARGB8888+0x78>
    {
      if (HAL_DMA2D_Start(&hDma2dHandler, (uint32_t)pSrc, (uint32_t)pDst, xSize, 1) == HAL_OK)
 800272e:	68f9      	ldr	r1, [r7, #12]
 8002730:	68ba      	ldr	r2, [r7, #8]
 8002732:	2301      	movs	r3, #1
 8002734:	9300      	str	r3, [sp, #0]
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	4806      	ldr	r0, [pc, #24]	; (8002754 <LL_ConvertLineToARGB8888+0x80>)
 800273a:	f001 f897 	bl	800386c <HAL_DMA2D_Start>
 800273e:	4603      	mov	r3, r0
 8002740:	2b00      	cmp	r3, #0
 8002742:	d103      	bne.n	800274c <LL_ConvertLineToARGB8888+0x78>
      {
        /* Polling For DMA transfer */  
        HAL_DMA2D_PollForTransfer(&hDma2dHandler, 10);
 8002744:	210a      	movs	r1, #10
 8002746:	4803      	ldr	r0, [pc, #12]	; (8002754 <LL_ConvertLineToARGB8888+0x80>)
 8002748:	f001 f8bb 	bl	80038c2 <HAL_DMA2D_PollForTransfer>
      }
    }
  } 
}
 800274c:	bf00      	nop
 800274e:	3710      	adds	r7, #16
 8002750:	46bd      	mov	sp, r7
 8002752:	bd80      	pop	{r7, pc}
 8002754:	2002c9f8 	.word	0x2002c9f8
 8002758:	4002b000 	.word	0x4002b000

0800275c <BSP_SDRAM_Init>:
/**
  * @brief  Initializes the SDRAM device.
  * @retval SDRAM status
  */
uint8_t BSP_SDRAM_Init(void)
{ 
 800275c:	b580      	push	{r7, lr}
 800275e:	af00      	add	r7, sp, #0
  static uint8_t sdramstatus = SDRAM_ERROR;
  /* SDRAM device configuration */
  sdramHandle.Instance = FMC_SDRAM_DEVICE;
 8002760:	4b29      	ldr	r3, [pc, #164]	; (8002808 <BSP_SDRAM_Init+0xac>)
 8002762:	4a2a      	ldr	r2, [pc, #168]	; (800280c <BSP_SDRAM_Init+0xb0>)
 8002764:	601a      	str	r2, [r3, #0]
    
  /* Timing configuration for 100Mhz as SD clock frequency (System clock is up to 200Mhz) */
  Timing.LoadToActiveDelay    = 2;
 8002766:	4b2a      	ldr	r3, [pc, #168]	; (8002810 <BSP_SDRAM_Init+0xb4>)
 8002768:	2202      	movs	r2, #2
 800276a:	601a      	str	r2, [r3, #0]
  Timing.ExitSelfRefreshDelay = 7;
 800276c:	4b28      	ldr	r3, [pc, #160]	; (8002810 <BSP_SDRAM_Init+0xb4>)
 800276e:	2207      	movs	r2, #7
 8002770:	605a      	str	r2, [r3, #4]
  Timing.SelfRefreshTime      = 4;
 8002772:	4b27      	ldr	r3, [pc, #156]	; (8002810 <BSP_SDRAM_Init+0xb4>)
 8002774:	2204      	movs	r2, #4
 8002776:	609a      	str	r2, [r3, #8]
  Timing.RowCycleDelay        = 7;
 8002778:	4b25      	ldr	r3, [pc, #148]	; (8002810 <BSP_SDRAM_Init+0xb4>)
 800277a:	2207      	movs	r2, #7
 800277c:	60da      	str	r2, [r3, #12]
  Timing.WriteRecoveryTime    = 2;
 800277e:	4b24      	ldr	r3, [pc, #144]	; (8002810 <BSP_SDRAM_Init+0xb4>)
 8002780:	2202      	movs	r2, #2
 8002782:	611a      	str	r2, [r3, #16]
  Timing.RPDelay              = 2;
 8002784:	4b22      	ldr	r3, [pc, #136]	; (8002810 <BSP_SDRAM_Init+0xb4>)
 8002786:	2202      	movs	r2, #2
 8002788:	615a      	str	r2, [r3, #20]
  Timing.RCDDelay             = 2;
 800278a:	4b21      	ldr	r3, [pc, #132]	; (8002810 <BSP_SDRAM_Init+0xb4>)
 800278c:	2202      	movs	r2, #2
 800278e:	619a      	str	r2, [r3, #24]
  
  sdramHandle.Init.SDBank             = FMC_SDRAM_BANK1;
 8002790:	4b1d      	ldr	r3, [pc, #116]	; (8002808 <BSP_SDRAM_Init+0xac>)
 8002792:	2200      	movs	r2, #0
 8002794:	605a      	str	r2, [r3, #4]
  sdramHandle.Init.ColumnBitsNumber   = FMC_SDRAM_COLUMN_BITS_NUM_8;
 8002796:	4b1c      	ldr	r3, [pc, #112]	; (8002808 <BSP_SDRAM_Init+0xac>)
 8002798:	2200      	movs	r2, #0
 800279a:	609a      	str	r2, [r3, #8]
  sdramHandle.Init.RowBitsNumber      = FMC_SDRAM_ROW_BITS_NUM_12;
 800279c:	4b1a      	ldr	r3, [pc, #104]	; (8002808 <BSP_SDRAM_Init+0xac>)
 800279e:	2204      	movs	r2, #4
 80027a0:	60da      	str	r2, [r3, #12]
  sdramHandle.Init.MemoryDataWidth    = SDRAM_MEMORY_WIDTH;
 80027a2:	4b19      	ldr	r3, [pc, #100]	; (8002808 <BSP_SDRAM_Init+0xac>)
 80027a4:	2210      	movs	r2, #16
 80027a6:	611a      	str	r2, [r3, #16]
  sdramHandle.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 80027a8:	4b17      	ldr	r3, [pc, #92]	; (8002808 <BSP_SDRAM_Init+0xac>)
 80027aa:	2240      	movs	r2, #64	; 0x40
 80027ac:	615a      	str	r2, [r3, #20]
  sdramHandle.Init.CASLatency         = FMC_SDRAM_CAS_LATENCY_2;
 80027ae:	4b16      	ldr	r3, [pc, #88]	; (8002808 <BSP_SDRAM_Init+0xac>)
 80027b0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80027b4:	619a      	str	r2, [r3, #24]
  sdramHandle.Init.WriteProtection    = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 80027b6:	4b14      	ldr	r3, [pc, #80]	; (8002808 <BSP_SDRAM_Init+0xac>)
 80027b8:	2200      	movs	r2, #0
 80027ba:	61da      	str	r2, [r3, #28]
  sdramHandle.Init.SDClockPeriod      = SDCLOCK_PERIOD;
 80027bc:	4b12      	ldr	r3, [pc, #72]	; (8002808 <BSP_SDRAM_Init+0xac>)
 80027be:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80027c2:	621a      	str	r2, [r3, #32]
  sdramHandle.Init.ReadBurst          = FMC_SDRAM_RBURST_ENABLE;
 80027c4:	4b10      	ldr	r3, [pc, #64]	; (8002808 <BSP_SDRAM_Init+0xac>)
 80027c6:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80027ca:	625a      	str	r2, [r3, #36]	; 0x24
  sdramHandle.Init.ReadPipeDelay      = FMC_SDRAM_RPIPE_DELAY_0;
 80027cc:	4b0e      	ldr	r3, [pc, #56]	; (8002808 <BSP_SDRAM_Init+0xac>)
 80027ce:	2200      	movs	r2, #0
 80027d0:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* SDRAM controller initialization */

  BSP_SDRAM_MspInit(&sdramHandle, NULL); /* __weak function can be rewritten by the application */
 80027d2:	2100      	movs	r1, #0
 80027d4:	480c      	ldr	r0, [pc, #48]	; (8002808 <BSP_SDRAM_Init+0xac>)
 80027d6:	f000 f87f 	bl	80028d8 <BSP_SDRAM_MspInit>

  if(HAL_SDRAM_Init(&sdramHandle, &Timing) != HAL_OK)
 80027da:	490d      	ldr	r1, [pc, #52]	; (8002810 <BSP_SDRAM_Init+0xb4>)
 80027dc:	480a      	ldr	r0, [pc, #40]	; (8002808 <BSP_SDRAM_Init+0xac>)
 80027de:	f003 ff1b 	bl	8006618 <HAL_SDRAM_Init>
 80027e2:	4603      	mov	r3, r0
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	d003      	beq.n	80027f0 <BSP_SDRAM_Init+0x94>
  {
    sdramstatus = SDRAM_ERROR;
 80027e8:	4b0a      	ldr	r3, [pc, #40]	; (8002814 <BSP_SDRAM_Init+0xb8>)
 80027ea:	2201      	movs	r2, #1
 80027ec:	701a      	strb	r2, [r3, #0]
 80027ee:	e002      	b.n	80027f6 <BSP_SDRAM_Init+0x9a>
  }
  else
  {
    sdramstatus = SDRAM_OK;
 80027f0:	4b08      	ldr	r3, [pc, #32]	; (8002814 <BSP_SDRAM_Init+0xb8>)
 80027f2:	2200      	movs	r2, #0
 80027f4:	701a      	strb	r2, [r3, #0]
  }
  
  /* SDRAM initialization sequence */
  BSP_SDRAM_Initialization_sequence(REFRESH_COUNT);
 80027f6:	f240 6003 	movw	r0, #1539	; 0x603
 80027fa:	f000 f80d 	bl	8002818 <BSP_SDRAM_Initialization_sequence>
  
  return sdramstatus;
 80027fe:	4b05      	ldr	r3, [pc, #20]	; (8002814 <BSP_SDRAM_Init+0xb8>)
 8002800:	781b      	ldrb	r3, [r3, #0]
}
 8002802:	4618      	mov	r0, r3
 8002804:	bd80      	pop	{r7, pc}
 8002806:	bf00      	nop
 8002808:	2002cc50 	.word	0x2002cc50
 800280c:	a0000140 	.word	0xa0000140
 8002810:	2002cad8 	.word	0x2002cad8
 8002814:	20000038 	.word	0x20000038

08002818 <BSP_SDRAM_Initialization_sequence>:
  * @brief  Programs the SDRAM device.
  * @param  RefreshCount: SDRAM refresh counter value 
  * @retval None
  */
void BSP_SDRAM_Initialization_sequence(uint32_t RefreshCount)
{
 8002818:	b580      	push	{r7, lr}
 800281a:	b084      	sub	sp, #16
 800281c:	af00      	add	r7, sp, #0
 800281e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpmrd = 0;
 8002820:	2300      	movs	r3, #0
 8002822:	60fb      	str	r3, [r7, #12]
  
  /* Step 1: Configure a clock configuration enable command */
  Command.CommandMode            = FMC_SDRAM_CMD_CLK_ENABLE;
 8002824:	4b2a      	ldr	r3, [pc, #168]	; (80028d0 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002826:	2201      	movs	r2, #1
 8002828:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 800282a:	4b29      	ldr	r3, [pc, #164]	; (80028d0 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800282c:	2210      	movs	r2, #16
 800282e:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 1;
 8002830:	4b27      	ldr	r3, [pc, #156]	; (80028d0 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002832:	2201      	movs	r2, #1
 8002834:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 8002836:	4b26      	ldr	r3, [pc, #152]	; (80028d0 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002838:	2200      	movs	r2, #0
 800283a:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 800283c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002840:	4923      	ldr	r1, [pc, #140]	; (80028d0 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002842:	4824      	ldr	r0, [pc, #144]	; (80028d4 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8002844:	f003 ff1c 	bl	8006680 <HAL_SDRAM_SendCommand>

  /* Step 2: Insert 100 us minimum delay */ 
  /* Inserted delay is equal to 1 ms due to systick time base unit (ms) */
  HAL_Delay(1);
 8002848:	2001      	movs	r0, #1
 800284a:	f000 fbd3 	bl	8002ff4 <HAL_Delay>
    
  /* Step 3: Configure a PALL (precharge all) command */ 
  Command.CommandMode            = FMC_SDRAM_CMD_PALL;
 800284e:	4b20      	ldr	r3, [pc, #128]	; (80028d0 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002850:	2202      	movs	r2, #2
 8002852:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8002854:	4b1e      	ldr	r3, [pc, #120]	; (80028d0 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002856:	2210      	movs	r2, #16
 8002858:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 1;
 800285a:	4b1d      	ldr	r3, [pc, #116]	; (80028d0 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800285c:	2201      	movs	r2, #1
 800285e:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 8002860:	4b1b      	ldr	r3, [pc, #108]	; (80028d0 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002862:	2200      	movs	r2, #0
 8002864:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);  
 8002866:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800286a:	4919      	ldr	r1, [pc, #100]	; (80028d0 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800286c:	4819      	ldr	r0, [pc, #100]	; (80028d4 <BSP_SDRAM_Initialization_sequence+0xbc>)
 800286e:	f003 ff07 	bl	8006680 <HAL_SDRAM_SendCommand>
  
  /* Step 4: Configure an Auto Refresh command */ 
  Command.CommandMode            = FMC_SDRAM_CMD_AUTOREFRESH_MODE;
 8002872:	4b17      	ldr	r3, [pc, #92]	; (80028d0 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002874:	2203      	movs	r2, #3
 8002876:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8002878:	4b15      	ldr	r3, [pc, #84]	; (80028d0 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800287a:	2210      	movs	r2, #16
 800287c:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 8;
 800287e:	4b14      	ldr	r3, [pc, #80]	; (80028d0 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002880:	2208      	movs	r2, #8
 8002882:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 8002884:	4b12      	ldr	r3, [pc, #72]	; (80028d0 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002886:	2200      	movs	r2, #0
 8002888:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 800288a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800288e:	4910      	ldr	r1, [pc, #64]	; (80028d0 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002890:	4810      	ldr	r0, [pc, #64]	; (80028d4 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8002892:	f003 fef5 	bl	8006680 <HAL_SDRAM_SendCommand>
  
  /* Step 5: Program the external memory mode register */
  tmpmrd = (uint32_t)SDRAM_MODEREG_BURST_LENGTH_1          |\
 8002896:	f44f 7308 	mov.w	r3, #544	; 0x220
 800289a:	60fb      	str	r3, [r7, #12]
                     SDRAM_MODEREG_BURST_TYPE_SEQUENTIAL   |\
                     SDRAM_MODEREG_CAS_LATENCY_2           |\
                     SDRAM_MODEREG_OPERATING_MODE_STANDARD |\
                     SDRAM_MODEREG_WRITEBURST_MODE_SINGLE;
  
  Command.CommandMode            = FMC_SDRAM_CMD_LOAD_MODE;
 800289c:	4b0c      	ldr	r3, [pc, #48]	; (80028d0 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800289e:	2204      	movs	r2, #4
 80028a0:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 80028a2:	4b0b      	ldr	r3, [pc, #44]	; (80028d0 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80028a4:	2210      	movs	r2, #16
 80028a6:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 1;
 80028a8:	4b09      	ldr	r3, [pc, #36]	; (80028d0 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80028aa:	2201      	movs	r2, #1
 80028ac:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = tmpmrd;
 80028ae:	68fb      	ldr	r3, [r7, #12]
 80028b0:	4a07      	ldr	r2, [pc, #28]	; (80028d0 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80028b2:	60d3      	str	r3, [r2, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 80028b4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80028b8:	4905      	ldr	r1, [pc, #20]	; (80028d0 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80028ba:	4806      	ldr	r0, [pc, #24]	; (80028d4 <BSP_SDRAM_Initialization_sequence+0xbc>)
 80028bc:	f003 fee0 	bl	8006680 <HAL_SDRAM_SendCommand>
  
  /* Step 6: Set the refresh rate counter */
  /* Set the device refresh rate */
  HAL_SDRAM_ProgramRefreshRate(&sdramHandle, RefreshCount); 
 80028c0:	6879      	ldr	r1, [r7, #4]
 80028c2:	4804      	ldr	r0, [pc, #16]	; (80028d4 <BSP_SDRAM_Initialization_sequence+0xbc>)
 80028c4:	f003 ff07 	bl	80066d6 <HAL_SDRAM_ProgramRefreshRate>
}
 80028c8:	bf00      	nop
 80028ca:	3710      	adds	r7, #16
 80028cc:	46bd      	mov	sp, r7
 80028ce:	bd80      	pop	{r7, pc}
 80028d0:	2002caf4 	.word	0x2002caf4
 80028d4:	2002cc50 	.word	0x2002cc50

080028d8 <BSP_SDRAM_MspInit>:
  * @param  hsdram: SDRAM handle
  * @param  Params
  * @retval None
  */
__weak void BSP_SDRAM_MspInit(SDRAM_HandleTypeDef  *hsdram, void *Params)
{  
 80028d8:	b580      	push	{r7, lr}
 80028da:	b090      	sub	sp, #64	; 0x40
 80028dc:	af00      	add	r7, sp, #0
 80028de:	6078      	str	r0, [r7, #4]
 80028e0:	6039      	str	r1, [r7, #0]
  static DMA_HandleTypeDef dma_handle;
  GPIO_InitTypeDef gpio_init_structure;
  
  /* Enable FMC clock */
  __HAL_RCC_FMC_CLK_ENABLE();
 80028e2:	4a70      	ldr	r2, [pc, #448]	; (8002aa4 <BSP_SDRAM_MspInit+0x1cc>)
 80028e4:	4b6f      	ldr	r3, [pc, #444]	; (8002aa4 <BSP_SDRAM_MspInit+0x1cc>)
 80028e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80028e8:	f043 0301 	orr.w	r3, r3, #1
 80028ec:	6393      	str	r3, [r2, #56]	; 0x38
 80028ee:	4b6d      	ldr	r3, [pc, #436]	; (8002aa4 <BSP_SDRAM_MspInit+0x1cc>)
 80028f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80028f2:	f003 0301 	and.w	r3, r3, #1
 80028f6:	62bb      	str	r3, [r7, #40]	; 0x28
 80028f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
  
  /* Enable chosen DMAx clock */
  __DMAx_CLK_ENABLE();
 80028fa:	4a6a      	ldr	r2, [pc, #424]	; (8002aa4 <BSP_SDRAM_MspInit+0x1cc>)
 80028fc:	4b69      	ldr	r3, [pc, #420]	; (8002aa4 <BSP_SDRAM_MspInit+0x1cc>)
 80028fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002900:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002904:	6313      	str	r3, [r2, #48]	; 0x30
 8002906:	4b67      	ldr	r3, [pc, #412]	; (8002aa4 <BSP_SDRAM_MspInit+0x1cc>)
 8002908:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800290a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800290e:	627b      	str	r3, [r7, #36]	; 0x24
 8002910:	6a7b      	ldr	r3, [r7, #36]	; 0x24

  /* Enable GPIOs clock */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002912:	4a64      	ldr	r2, [pc, #400]	; (8002aa4 <BSP_SDRAM_MspInit+0x1cc>)
 8002914:	4b63      	ldr	r3, [pc, #396]	; (8002aa4 <BSP_SDRAM_MspInit+0x1cc>)
 8002916:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002918:	f043 0304 	orr.w	r3, r3, #4
 800291c:	6313      	str	r3, [r2, #48]	; 0x30
 800291e:	4b61      	ldr	r3, [pc, #388]	; (8002aa4 <BSP_SDRAM_MspInit+0x1cc>)
 8002920:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002922:	f003 0304 	and.w	r3, r3, #4
 8002926:	623b      	str	r3, [r7, #32]
 8002928:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800292a:	4a5e      	ldr	r2, [pc, #376]	; (8002aa4 <BSP_SDRAM_MspInit+0x1cc>)
 800292c:	4b5d      	ldr	r3, [pc, #372]	; (8002aa4 <BSP_SDRAM_MspInit+0x1cc>)
 800292e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002930:	f043 0308 	orr.w	r3, r3, #8
 8002934:	6313      	str	r3, [r2, #48]	; 0x30
 8002936:	4b5b      	ldr	r3, [pc, #364]	; (8002aa4 <BSP_SDRAM_MspInit+0x1cc>)
 8002938:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800293a:	f003 0308 	and.w	r3, r3, #8
 800293e:	61fb      	str	r3, [r7, #28]
 8002940:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8002942:	4a58      	ldr	r2, [pc, #352]	; (8002aa4 <BSP_SDRAM_MspInit+0x1cc>)
 8002944:	4b57      	ldr	r3, [pc, #348]	; (8002aa4 <BSP_SDRAM_MspInit+0x1cc>)
 8002946:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002948:	f043 0310 	orr.w	r3, r3, #16
 800294c:	6313      	str	r3, [r2, #48]	; 0x30
 800294e:	4b55      	ldr	r3, [pc, #340]	; (8002aa4 <BSP_SDRAM_MspInit+0x1cc>)
 8002950:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002952:	f003 0310 	and.w	r3, r3, #16
 8002956:	61bb      	str	r3, [r7, #24]
 8002958:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800295a:	4a52      	ldr	r2, [pc, #328]	; (8002aa4 <BSP_SDRAM_MspInit+0x1cc>)
 800295c:	4b51      	ldr	r3, [pc, #324]	; (8002aa4 <BSP_SDRAM_MspInit+0x1cc>)
 800295e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002960:	f043 0320 	orr.w	r3, r3, #32
 8002964:	6313      	str	r3, [r2, #48]	; 0x30
 8002966:	4b4f      	ldr	r3, [pc, #316]	; (8002aa4 <BSP_SDRAM_MspInit+0x1cc>)
 8002968:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800296a:	f003 0320 	and.w	r3, r3, #32
 800296e:	617b      	str	r3, [r7, #20]
 8002970:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8002972:	4a4c      	ldr	r2, [pc, #304]	; (8002aa4 <BSP_SDRAM_MspInit+0x1cc>)
 8002974:	4b4b      	ldr	r3, [pc, #300]	; (8002aa4 <BSP_SDRAM_MspInit+0x1cc>)
 8002976:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002978:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800297c:	6313      	str	r3, [r2, #48]	; 0x30
 800297e:	4b49      	ldr	r3, [pc, #292]	; (8002aa4 <BSP_SDRAM_MspInit+0x1cc>)
 8002980:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002982:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002986:	613b      	str	r3, [r7, #16]
 8002988:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800298a:	4a46      	ldr	r2, [pc, #280]	; (8002aa4 <BSP_SDRAM_MspInit+0x1cc>)
 800298c:	4b45      	ldr	r3, [pc, #276]	; (8002aa4 <BSP_SDRAM_MspInit+0x1cc>)
 800298e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002990:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002994:	6313      	str	r3, [r2, #48]	; 0x30
 8002996:	4b43      	ldr	r3, [pc, #268]	; (8002aa4 <BSP_SDRAM_MspInit+0x1cc>)
 8002998:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800299a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800299e:	60fb      	str	r3, [r7, #12]
 80029a0:	68fb      	ldr	r3, [r7, #12]
  
  /* Common GPIO configuration */
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 80029a2:	2302      	movs	r3, #2
 80029a4:	633b      	str	r3, [r7, #48]	; 0x30
  gpio_init_structure.Pull      = GPIO_PULLUP;
 80029a6:	2301      	movs	r3, #1
 80029a8:	637b      	str	r3, [r7, #52]	; 0x34
  gpio_init_structure.Speed     = GPIO_SPEED_FAST;
 80029aa:	2302      	movs	r3, #2
 80029ac:	63bb      	str	r3, [r7, #56]	; 0x38
  gpio_init_structure.Alternate = GPIO_AF12_FMC;
 80029ae:	230c      	movs	r3, #12
 80029b0:	63fb      	str	r3, [r7, #60]	; 0x3c
  
  /* GPIOC configuration */
  gpio_init_structure.Pin   = GPIO_PIN_3;
 80029b2:	2308      	movs	r3, #8
 80029b4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &gpio_init_structure);
 80029b6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80029ba:	4619      	mov	r1, r3
 80029bc:	483a      	ldr	r0, [pc, #232]	; (8002aa8 <BSP_SDRAM_MspInit+0x1d0>)
 80029be:	f001 fab3 	bl	8003f28 <HAL_GPIO_Init>

  /* GPIOD configuration */
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_8 | GPIO_PIN_9 |
 80029c2:	f24c 7303 	movw	r3, #50947	; 0xc703
 80029c6:	62fb      	str	r3, [r7, #44]	; 0x2c
                              GPIO_PIN_10 | GPIO_PIN_14 | GPIO_PIN_15;
  HAL_GPIO_Init(GPIOD, &gpio_init_structure);
 80029c8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80029cc:	4619      	mov	r1, r3
 80029ce:	4837      	ldr	r0, [pc, #220]	; (8002aac <BSP_SDRAM_MspInit+0x1d4>)
 80029d0:	f001 faaa 	bl	8003f28 <HAL_GPIO_Init>

  /* GPIOE configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_7| GPIO_PIN_8 | GPIO_PIN_9 |\
 80029d4:	f64f 7383 	movw	r3, #65411	; 0xff83
 80029d8:	62fb      	str	r3, [r7, #44]	; 0x2c
                              GPIO_PIN_10 | GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 |\
                              GPIO_PIN_15;
  HAL_GPIO_Init(GPIOE, &gpio_init_structure);
 80029da:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80029de:	4619      	mov	r1, r3
 80029e0:	4833      	ldr	r0, [pc, #204]	; (8002ab0 <BSP_SDRAM_MspInit+0x1d8>)
 80029e2:	f001 faa1 	bl	8003f28 <HAL_GPIO_Init>
  
  /* GPIOF configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2| GPIO_PIN_3 | GPIO_PIN_4 |\
 80029e6:	f64f 033f 	movw	r3, #63551	; 0xf83f
 80029ea:	62fb      	str	r3, [r7, #44]	; 0x2c
                              GPIO_PIN_5 | GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 |\
                              GPIO_PIN_15;
  HAL_GPIO_Init(GPIOF, &gpio_init_structure);
 80029ec:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80029f0:	4619      	mov	r1, r3
 80029f2:	4830      	ldr	r0, [pc, #192]	; (8002ab4 <BSP_SDRAM_MspInit+0x1dc>)
 80029f4:	f001 fa98 	bl	8003f28 <HAL_GPIO_Init>
  
  /* GPIOG configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_4| GPIO_PIN_5 | GPIO_PIN_8 |\
 80029f8:	f248 1333 	movw	r3, #33075	; 0x8133
 80029fc:	62fb      	str	r3, [r7, #44]	; 0x2c
                              GPIO_PIN_15;
  HAL_GPIO_Init(GPIOG, &gpio_init_structure);
 80029fe:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002a02:	4619      	mov	r1, r3
 8002a04:	482c      	ldr	r0, [pc, #176]	; (8002ab8 <BSP_SDRAM_MspInit+0x1e0>)
 8002a06:	f001 fa8f 	bl	8003f28 <HAL_GPIO_Init>

  /* GPIOH configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_3 | GPIO_PIN_5;
 8002a0a:	2328      	movs	r3, #40	; 0x28
 8002a0c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOH, &gpio_init_structure); 
 8002a0e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002a12:	4619      	mov	r1, r3
 8002a14:	4829      	ldr	r0, [pc, #164]	; (8002abc <BSP_SDRAM_MspInit+0x1e4>)
 8002a16:	f001 fa87 	bl	8003f28 <HAL_GPIO_Init>
  
  /* Configure common DMA parameters */
  dma_handle.Init.Channel             = SDRAM_DMAx_CHANNEL;
 8002a1a:	4b29      	ldr	r3, [pc, #164]	; (8002ac0 <BSP_SDRAM_MspInit+0x1e8>)
 8002a1c:	2200      	movs	r2, #0
 8002a1e:	605a      	str	r2, [r3, #4]
  dma_handle.Init.Direction           = DMA_MEMORY_TO_MEMORY;
 8002a20:	4b27      	ldr	r3, [pc, #156]	; (8002ac0 <BSP_SDRAM_MspInit+0x1e8>)
 8002a22:	2280      	movs	r2, #128	; 0x80
 8002a24:	609a      	str	r2, [r3, #8]
  dma_handle.Init.PeriphInc           = DMA_PINC_ENABLE;
 8002a26:	4b26      	ldr	r3, [pc, #152]	; (8002ac0 <BSP_SDRAM_MspInit+0x1e8>)
 8002a28:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002a2c:	60da      	str	r2, [r3, #12]
  dma_handle.Init.MemInc              = DMA_MINC_ENABLE;
 8002a2e:	4b24      	ldr	r3, [pc, #144]	; (8002ac0 <BSP_SDRAM_MspInit+0x1e8>)
 8002a30:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002a34:	611a      	str	r2, [r3, #16]
  dma_handle.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8002a36:	4b22      	ldr	r3, [pc, #136]	; (8002ac0 <BSP_SDRAM_MspInit+0x1e8>)
 8002a38:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002a3c:	615a      	str	r2, [r3, #20]
  dma_handle.Init.MemDataAlignment    = DMA_MDATAALIGN_WORD;
 8002a3e:	4b20      	ldr	r3, [pc, #128]	; (8002ac0 <BSP_SDRAM_MspInit+0x1e8>)
 8002a40:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002a44:	619a      	str	r2, [r3, #24]
  dma_handle.Init.Mode                = DMA_NORMAL;
 8002a46:	4b1e      	ldr	r3, [pc, #120]	; (8002ac0 <BSP_SDRAM_MspInit+0x1e8>)
 8002a48:	2200      	movs	r2, #0
 8002a4a:	61da      	str	r2, [r3, #28]
  dma_handle.Init.Priority            = DMA_PRIORITY_HIGH;
 8002a4c:	4b1c      	ldr	r3, [pc, #112]	; (8002ac0 <BSP_SDRAM_MspInit+0x1e8>)
 8002a4e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002a52:	621a      	str	r2, [r3, #32]
  dma_handle.Init.FIFOMode            = DMA_FIFOMODE_DISABLE;         
 8002a54:	4b1a      	ldr	r3, [pc, #104]	; (8002ac0 <BSP_SDRAM_MspInit+0x1e8>)
 8002a56:	2200      	movs	r2, #0
 8002a58:	625a      	str	r2, [r3, #36]	; 0x24
  dma_handle.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
 8002a5a:	4b19      	ldr	r3, [pc, #100]	; (8002ac0 <BSP_SDRAM_MspInit+0x1e8>)
 8002a5c:	2203      	movs	r2, #3
 8002a5e:	629a      	str	r2, [r3, #40]	; 0x28
  dma_handle.Init.MemBurst            = DMA_MBURST_SINGLE;
 8002a60:	4b17      	ldr	r3, [pc, #92]	; (8002ac0 <BSP_SDRAM_MspInit+0x1e8>)
 8002a62:	2200      	movs	r2, #0
 8002a64:	62da      	str	r2, [r3, #44]	; 0x2c
  dma_handle.Init.PeriphBurst         = DMA_PBURST_SINGLE; 
 8002a66:	4b16      	ldr	r3, [pc, #88]	; (8002ac0 <BSP_SDRAM_MspInit+0x1e8>)
 8002a68:	2200      	movs	r2, #0
 8002a6a:	631a      	str	r2, [r3, #48]	; 0x30
  
  dma_handle.Instance = SDRAM_DMAx_STREAM;
 8002a6c:	4b14      	ldr	r3, [pc, #80]	; (8002ac0 <BSP_SDRAM_MspInit+0x1e8>)
 8002a6e:	4a15      	ldr	r2, [pc, #84]	; (8002ac4 <BSP_SDRAM_MspInit+0x1ec>)
 8002a70:	601a      	str	r2, [r3, #0]
  
   /* Associate the DMA handle */
  __HAL_LINKDMA(hsdram, hdma, dma_handle);
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	4a12      	ldr	r2, [pc, #72]	; (8002ac0 <BSP_SDRAM_MspInit+0x1e8>)
 8002a76:	631a      	str	r2, [r3, #48]	; 0x30
 8002a78:	4a11      	ldr	r2, [pc, #68]	; (8002ac0 <BSP_SDRAM_MspInit+0x1e8>)
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	6393      	str	r3, [r2, #56]	; 0x38
  
  /* Deinitialize the stream for new transfer */
  HAL_DMA_DeInit(&dma_handle);
 8002a7e:	4810      	ldr	r0, [pc, #64]	; (8002ac0 <BSP_SDRAM_MspInit+0x1e8>)
 8002a80:	f000 fd9c 	bl	80035bc <HAL_DMA_DeInit>
  
  /* Configure the DMA stream */
  HAL_DMA_Init(&dma_handle); 
 8002a84:	480e      	ldr	r0, [pc, #56]	; (8002ac0 <BSP_SDRAM_MspInit+0x1e8>)
 8002a86:	f000 fceb 	bl	8003460 <HAL_DMA_Init>
  
  /* NVIC configuration for DMA transfer complete interrupt */
  HAL_NVIC_SetPriority(SDRAM_DMAx_IRQn, 0x0F, 0);
 8002a8a:	2200      	movs	r2, #0
 8002a8c:	210f      	movs	r1, #15
 8002a8e:	2038      	movs	r0, #56	; 0x38
 8002a90:	f000 fba7 	bl	80031e2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(SDRAM_DMAx_IRQn);
 8002a94:	2038      	movs	r0, #56	; 0x38
 8002a96:	f000 fbc0 	bl	800321a <HAL_NVIC_EnableIRQ>
}
 8002a9a:	bf00      	nop
 8002a9c:	3740      	adds	r7, #64	; 0x40
 8002a9e:	46bd      	mov	sp, r7
 8002aa0:	bd80      	pop	{r7, pc}
 8002aa2:	bf00      	nop
 8002aa4:	40023800 	.word	0x40023800
 8002aa8:	40020800 	.word	0x40020800
 8002aac:	40020c00 	.word	0x40020c00
 8002ab0:	40021000 	.word	0x40021000
 8002ab4:	40021400 	.word	0x40021400
 8002ab8:	40021800 	.word	0x40021800
 8002abc:	40021c00 	.word	0x40021c00
 8002ac0:	2002cb04 	.word	0x2002cb04
 8002ac4:	40026410 	.word	0x40026410

08002ac8 <BSP_TS_Init>:
  * @param  ts_SizeX: Maximum X size of the TS area on LCD
  * @param  ts_SizeY: Maximum Y size of the TS area on LCD
  * @retval TS_OK if all initializations are OK. Other value if error.
  */
uint8_t BSP_TS_Init(uint16_t ts_SizeX, uint16_t ts_SizeY)
{
 8002ac8:	b580      	push	{r7, lr}
 8002aca:	b084      	sub	sp, #16
 8002acc:	af00      	add	r7, sp, #0
 8002ace:	4603      	mov	r3, r0
 8002ad0:	460a      	mov	r2, r1
 8002ad2:	80fb      	strh	r3, [r7, #6]
 8002ad4:	4613      	mov	r3, r2
 8002ad6:	80bb      	strh	r3, [r7, #4]
  uint8_t status = TS_OK;
 8002ad8:	2300      	movs	r3, #0
 8002ada:	73fb      	strb	r3, [r7, #15]
  tsXBoundary = ts_SizeX;
 8002adc:	4a14      	ldr	r2, [pc, #80]	; (8002b30 <BSP_TS_Init+0x68>)
 8002ade:	88fb      	ldrh	r3, [r7, #6]
 8002ae0:	8013      	strh	r3, [r2, #0]
  tsYBoundary = ts_SizeY;
 8002ae2:	4a14      	ldr	r2, [pc, #80]	; (8002b34 <BSP_TS_Init+0x6c>)
 8002ae4:	88bb      	ldrh	r3, [r7, #4]
 8002ae6:	8013      	strh	r3, [r2, #0]
  
  /* Read ID and verify if the touch screen driver is ready */
  ft5336_ts_drv.Init(TS_I2C_ADDRESS);
 8002ae8:	4b13      	ldr	r3, [pc, #76]	; (8002b38 <BSP_TS_Init+0x70>)
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	2070      	movs	r0, #112	; 0x70
 8002aee:	4798      	blx	r3
  if(ft5336_ts_drv.ReadID(TS_I2C_ADDRESS) == FT5336_ID_VALUE)
 8002af0:	4b11      	ldr	r3, [pc, #68]	; (8002b38 <BSP_TS_Init+0x70>)
 8002af2:	685b      	ldr	r3, [r3, #4]
 8002af4:	2070      	movs	r0, #112	; 0x70
 8002af6:	4798      	blx	r3
 8002af8:	4603      	mov	r3, r0
 8002afa:	2b51      	cmp	r3, #81	; 0x51
 8002afc:	d111      	bne.n	8002b22 <BSP_TS_Init+0x5a>
  { 
    /* Initialize the TS driver structure */
    tsDriver = &ft5336_ts_drv;
 8002afe:	4b0f      	ldr	r3, [pc, #60]	; (8002b3c <BSP_TS_Init+0x74>)
 8002b00:	4a0d      	ldr	r2, [pc, #52]	; (8002b38 <BSP_TS_Init+0x70>)
 8002b02:	601a      	str	r2, [r3, #0]
    I2cAddress = TS_I2C_ADDRESS;
 8002b04:	4b0e      	ldr	r3, [pc, #56]	; (8002b40 <BSP_TS_Init+0x78>)
 8002b06:	2270      	movs	r2, #112	; 0x70
 8002b08:	701a      	strb	r2, [r3, #0]
    tsOrientation = TS_SWAP_XY;
 8002b0a:	4b0e      	ldr	r3, [pc, #56]	; (8002b44 <BSP_TS_Init+0x7c>)
 8002b0c:	2208      	movs	r2, #8
 8002b0e:	701a      	strb	r2, [r3, #0]

    /* Initialize the TS driver */
    tsDriver->Start(I2cAddress);
 8002b10:	4b0a      	ldr	r3, [pc, #40]	; (8002b3c <BSP_TS_Init+0x74>)
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	68db      	ldr	r3, [r3, #12]
 8002b16:	4a0a      	ldr	r2, [pc, #40]	; (8002b40 <BSP_TS_Init+0x78>)
 8002b18:	7812      	ldrb	r2, [r2, #0]
 8002b1a:	b292      	uxth	r2, r2
 8002b1c:	4610      	mov	r0, r2
 8002b1e:	4798      	blx	r3
 8002b20:	e001      	b.n	8002b26 <BSP_TS_Init+0x5e>
  }
  else
  {
    status = TS_DEVICE_NOT_FOUND;
 8002b22:	2303      	movs	r3, #3
 8002b24:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8002b26:	7bfb      	ldrb	r3, [r7, #15]
}
 8002b28:	4618      	mov	r0, r3
 8002b2a:	3710      	adds	r7, #16
 8002b2c:	46bd      	mov	sp, r7
 8002b2e:	bd80      	pop	{r7, pc}
 8002b30:	2002cb68 	.word	0x2002cb68
 8002b34:	2002cb6a 	.word	0x2002cb6a
 8002b38:	20000000 	.word	0x20000000
 8002b3c:	2002cb64 	.word	0x2002cb64
 8002b40:	2002cb6d 	.word	0x2002cb6d
 8002b44:	2002cb6c 	.word	0x2002cb6c

08002b48 <BSP_TS_GetState>:
  * @brief  Returns status and positions of the touch screen.
  * @param  TS_State: Pointer to touch screen current state structure
  * @retval TS_OK if all initializations are OK. Other value if error.
  */
uint8_t BSP_TS_GetState(TS_StateTypeDef *TS_State)
{
 8002b48:	b590      	push	{r4, r7, lr}
 8002b4a:	b097      	sub	sp, #92	; 0x5c
 8002b4c:	af02      	add	r7, sp, #8
 8002b4e:	6078      	str	r0, [r7, #4]
  static uint32_t _x[TS_MAX_NB_TOUCH] = {0, 0};
  static uint32_t _y[TS_MAX_NB_TOUCH] = {0, 0};
  uint8_t ts_status = TS_OK;
 8002b50:	2300      	movs	r3, #0
 8002b52:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
  uint16_t brute_y[TS_MAX_NB_TOUCH];
  uint16_t x_diff;
  uint16_t y_diff;
  uint32_t index;
#if (TS_MULTI_TOUCH_SUPPORTED == 1)
  uint32_t weight = 0;
 8002b56:	2300      	movs	r3, #0
 8002b58:	613b      	str	r3, [r7, #16]
  uint32_t area = 0;
 8002b5a:	2300      	movs	r3, #0
 8002b5c:	60fb      	str	r3, [r7, #12]
  uint32_t event = 0;
 8002b5e:	2300      	movs	r3, #0
 8002b60:	60bb      	str	r3, [r7, #8]
#endif /* TS_MULTI_TOUCH_SUPPORTED == 1 */

  /* Check and update the number of touches active detected */
  TS_State->touchDetected = tsDriver->DetectTouch(I2cAddress);
 8002b62:	4b97      	ldr	r3, [pc, #604]	; (8002dc0 <BSP_TS_GetState+0x278>)
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	691b      	ldr	r3, [r3, #16]
 8002b68:	4a96      	ldr	r2, [pc, #600]	; (8002dc4 <BSP_TS_GetState+0x27c>)
 8002b6a:	7812      	ldrb	r2, [r2, #0]
 8002b6c:	b292      	uxth	r2, r2
 8002b6e:	4610      	mov	r0, r2
 8002b70:	4798      	blx	r3
 8002b72:	4603      	mov	r3, r0
 8002b74:	461a      	mov	r2, r3
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	701a      	strb	r2, [r3, #0]
  
  if(TS_State->touchDetected)
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	781b      	ldrb	r3, [r3, #0]
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	f000 81a8 	beq.w	8002ed4 <BSP_TS_GetState+0x38c>
  {
    for(index=0; index < TS_State->touchDetected; index++)
 8002b84:	2300      	movs	r3, #0
 8002b86:	64bb      	str	r3, [r7, #72]	; 0x48
 8002b88:	e197      	b.n	8002eba <BSP_TS_GetState+0x372>
    {
      /* Get each touch coordinates */
      tsDriver->GetXY(I2cAddress, &(brute_x[index]), &(brute_y[index]));
 8002b8a:	4b8d      	ldr	r3, [pc, #564]	; (8002dc0 <BSP_TS_GetState+0x278>)
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	695b      	ldr	r3, [r3, #20]
 8002b90:	4a8c      	ldr	r2, [pc, #560]	; (8002dc4 <BSP_TS_GetState+0x27c>)
 8002b92:	7812      	ldrb	r2, [r2, #0]
 8002b94:	b290      	uxth	r0, r2
 8002b96:	f107 0120 	add.w	r1, r7, #32
 8002b9a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002b9c:	0052      	lsls	r2, r2, #1
 8002b9e:	188c      	adds	r4, r1, r2
 8002ba0:	f107 0114 	add.w	r1, r7, #20
 8002ba4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002ba6:	0052      	lsls	r2, r2, #1
 8002ba8:	440a      	add	r2, r1
 8002baa:	4621      	mov	r1, r4
 8002bac:	4798      	blx	r3

      if(tsOrientation == TS_SWAP_NONE)
 8002bae:	4b86      	ldr	r3, [pc, #536]	; (8002dc8 <BSP_TS_GetState+0x280>)
 8002bb0:	781b      	ldrb	r3, [r3, #0]
 8002bb2:	2b01      	cmp	r3, #1
 8002bb4:	d11b      	bne.n	8002bee <BSP_TS_GetState+0xa6>
      {
        x[index] = brute_x[index];
 8002bb6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002bb8:	005b      	lsls	r3, r3, #1
 8002bba:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8002bbe:	4413      	add	r3, r2
 8002bc0:	f833 2c30 	ldrh.w	r2, [r3, #-48]
 8002bc4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002bc6:	005b      	lsls	r3, r3, #1
 8002bc8:	f107 0150 	add.w	r1, r7, #80	; 0x50
 8002bcc:	440b      	add	r3, r1
 8002bce:	f823 2c18 	strh.w	r2, [r3, #-24]
        y[index] = brute_y[index];
 8002bd2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002bd4:	005b      	lsls	r3, r3, #1
 8002bd6:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8002bda:	4413      	add	r3, r2
 8002bdc:	f833 2c3c 	ldrh.w	r2, [r3, #-60]
 8002be0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002be2:	005b      	lsls	r3, r3, #1
 8002be4:	f107 0150 	add.w	r1, r7, #80	; 0x50
 8002be8:	440b      	add	r3, r1
 8002bea:	f823 2c24 	strh.w	r2, [r3, #-36]
      }

      if(tsOrientation & TS_SWAP_X)
 8002bee:	4b76      	ldr	r3, [pc, #472]	; (8002dc8 <BSP_TS_GetState+0x280>)
 8002bf0:	781b      	ldrb	r3, [r3, #0]
 8002bf2:	f003 0302 	and.w	r3, r3, #2
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d010      	beq.n	8002c1c <BSP_TS_GetState+0xd4>
      {
        x[index] = 4096 - brute_x[index];
 8002bfa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002bfc:	005b      	lsls	r3, r3, #1
 8002bfe:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8002c02:	4413      	add	r3, r2
 8002c04:	f833 3c30 	ldrh.w	r3, [r3, #-48]
 8002c08:	f5c3 5380 	rsb	r3, r3, #4096	; 0x1000
 8002c0c:	b29a      	uxth	r2, r3
 8002c0e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002c10:	005b      	lsls	r3, r3, #1
 8002c12:	f107 0150 	add.w	r1, r7, #80	; 0x50
 8002c16:	440b      	add	r3, r1
 8002c18:	f823 2c18 	strh.w	r2, [r3, #-24]
      }

      if(tsOrientation & TS_SWAP_Y)
 8002c1c:	4b6a      	ldr	r3, [pc, #424]	; (8002dc8 <BSP_TS_GetState+0x280>)
 8002c1e:	781b      	ldrb	r3, [r3, #0]
 8002c20:	f003 0304 	and.w	r3, r3, #4
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	d010      	beq.n	8002c4a <BSP_TS_GetState+0x102>
      {
        y[index] = 4096 - brute_y[index];
 8002c28:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002c2a:	005b      	lsls	r3, r3, #1
 8002c2c:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8002c30:	4413      	add	r3, r2
 8002c32:	f833 3c3c 	ldrh.w	r3, [r3, #-60]
 8002c36:	f5c3 5380 	rsb	r3, r3, #4096	; 0x1000
 8002c3a:	b29a      	uxth	r2, r3
 8002c3c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002c3e:	005b      	lsls	r3, r3, #1
 8002c40:	f107 0150 	add.w	r1, r7, #80	; 0x50
 8002c44:	440b      	add	r3, r1
 8002c46:	f823 2c24 	strh.w	r2, [r3, #-36]
      }

      if(tsOrientation & TS_SWAP_XY)
 8002c4a:	4b5f      	ldr	r3, [pc, #380]	; (8002dc8 <BSP_TS_GetState+0x280>)
 8002c4c:	781b      	ldrb	r3, [r3, #0]
 8002c4e:	f003 0308 	and.w	r3, r3, #8
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d01b      	beq.n	8002c8e <BSP_TS_GetState+0x146>
      {
        y[index] = brute_x[index];
 8002c56:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002c58:	005b      	lsls	r3, r3, #1
 8002c5a:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8002c5e:	4413      	add	r3, r2
 8002c60:	f833 2c30 	ldrh.w	r2, [r3, #-48]
 8002c64:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002c66:	005b      	lsls	r3, r3, #1
 8002c68:	f107 0150 	add.w	r1, r7, #80	; 0x50
 8002c6c:	440b      	add	r3, r1
 8002c6e:	f823 2c24 	strh.w	r2, [r3, #-36]
        x[index] = brute_y[index];
 8002c72:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002c74:	005b      	lsls	r3, r3, #1
 8002c76:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8002c7a:	4413      	add	r3, r2
 8002c7c:	f833 2c3c 	ldrh.w	r2, [r3, #-60]
 8002c80:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002c82:	005b      	lsls	r3, r3, #1
 8002c84:	f107 0150 	add.w	r1, r7, #80	; 0x50
 8002c88:	440b      	add	r3, r1
 8002c8a:	f823 2c18 	strh.w	r2, [r3, #-24]
      }

      x_diff = x[index] > _x[index]? (x[index] - _x[index]): (_x[index] - x[index]);
 8002c8e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002c90:	005b      	lsls	r3, r3, #1
 8002c92:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8002c96:	4413      	add	r3, r2
 8002c98:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 8002c9c:	4619      	mov	r1, r3
 8002c9e:	4a4b      	ldr	r2, [pc, #300]	; (8002dcc <BSP_TS_GetState+0x284>)
 8002ca0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002ca2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002ca6:	4299      	cmp	r1, r3
 8002ca8:	d90e      	bls.n	8002cc8 <BSP_TS_GetState+0x180>
 8002caa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002cac:	005b      	lsls	r3, r3, #1
 8002cae:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8002cb2:	4413      	add	r3, r2
 8002cb4:	f833 2c18 	ldrh.w	r2, [r3, #-24]
 8002cb8:	4944      	ldr	r1, [pc, #272]	; (8002dcc <BSP_TS_GetState+0x284>)
 8002cba:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002cbc:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8002cc0:	b29b      	uxth	r3, r3
 8002cc2:	1ad3      	subs	r3, r2, r3
 8002cc4:	b29b      	uxth	r3, r3
 8002cc6:	e00d      	b.n	8002ce4 <BSP_TS_GetState+0x19c>
 8002cc8:	4a40      	ldr	r2, [pc, #256]	; (8002dcc <BSP_TS_GetState+0x284>)
 8002cca:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002ccc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002cd0:	b29a      	uxth	r2, r3
 8002cd2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002cd4:	005b      	lsls	r3, r3, #1
 8002cd6:	f107 0150 	add.w	r1, r7, #80	; 0x50
 8002cda:	440b      	add	r3, r1
 8002cdc:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 8002ce0:	1ad3      	subs	r3, r2, r3
 8002ce2:	b29b      	uxth	r3, r3
 8002ce4:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
      y_diff = y[index] > _y[index]? (y[index] - _y[index]): (_y[index] - y[index]);
 8002ce8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002cea:	005b      	lsls	r3, r3, #1
 8002cec:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8002cf0:	4413      	add	r3, r2
 8002cf2:	f833 3c24 	ldrh.w	r3, [r3, #-36]
 8002cf6:	4619      	mov	r1, r3
 8002cf8:	4a35      	ldr	r2, [pc, #212]	; (8002dd0 <BSP_TS_GetState+0x288>)
 8002cfa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002cfc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002d00:	4299      	cmp	r1, r3
 8002d02:	d90e      	bls.n	8002d22 <BSP_TS_GetState+0x1da>
 8002d04:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002d06:	005b      	lsls	r3, r3, #1
 8002d08:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8002d0c:	4413      	add	r3, r2
 8002d0e:	f833 2c24 	ldrh.w	r2, [r3, #-36]
 8002d12:	492f      	ldr	r1, [pc, #188]	; (8002dd0 <BSP_TS_GetState+0x288>)
 8002d14:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002d16:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8002d1a:	b29b      	uxth	r3, r3
 8002d1c:	1ad3      	subs	r3, r2, r3
 8002d1e:	b29b      	uxth	r3, r3
 8002d20:	e00d      	b.n	8002d3e <BSP_TS_GetState+0x1f6>
 8002d22:	4a2b      	ldr	r2, [pc, #172]	; (8002dd0 <BSP_TS_GetState+0x288>)
 8002d24:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002d26:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002d2a:	b29a      	uxth	r2, r3
 8002d2c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002d2e:	005b      	lsls	r3, r3, #1
 8002d30:	f107 0150 	add.w	r1, r7, #80	; 0x50
 8002d34:	440b      	add	r3, r1
 8002d36:	f833 3c24 	ldrh.w	r3, [r3, #-36]
 8002d3a:	1ad3      	subs	r3, r2, r3
 8002d3c:	b29b      	uxth	r3, r3
 8002d3e:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44

      if ((x_diff + y_diff) > 5)
 8002d42:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 8002d46:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8002d4a:	4413      	add	r3, r2
 8002d4c:	2b05      	cmp	r3, #5
 8002d4e:	dd17      	ble.n	8002d80 <BSP_TS_GetState+0x238>
      {
        _x[index] = x[index];
 8002d50:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002d52:	005b      	lsls	r3, r3, #1
 8002d54:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8002d58:	4413      	add	r3, r2
 8002d5a:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 8002d5e:	4619      	mov	r1, r3
 8002d60:	4a1a      	ldr	r2, [pc, #104]	; (8002dcc <BSP_TS_GetState+0x284>)
 8002d62:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002d64:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
        _y[index] = y[index];
 8002d68:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002d6a:	005b      	lsls	r3, r3, #1
 8002d6c:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8002d70:	4413      	add	r3, r2
 8002d72:	f833 3c24 	ldrh.w	r3, [r3, #-36]
 8002d76:	4619      	mov	r1, r3
 8002d78:	4a15      	ldr	r2, [pc, #84]	; (8002dd0 <BSP_TS_GetState+0x288>)
 8002d7a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002d7c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      }

      if(I2cAddress == FT5336_I2C_SLAVE_ADDRESS)
 8002d80:	4b10      	ldr	r3, [pc, #64]	; (8002dc4 <BSP_TS_GetState+0x27c>)
 8002d82:	781b      	ldrb	r3, [r3, #0]
 8002d84:	2b70      	cmp	r3, #112	; 0x70
 8002d86:	d125      	bne.n	8002dd4 <BSP_TS_GetState+0x28c>
      {
        TS_State->touchX[index] = x[index];
 8002d88:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002d8a:	005b      	lsls	r3, r3, #1
 8002d8c:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8002d90:	4413      	add	r3, r2
 8002d92:	f833 1c18 	ldrh.w	r1, [r3, #-24]
 8002d96:	687a      	ldr	r2, [r7, #4]
 8002d98:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002d9a:	005b      	lsls	r3, r3, #1
 8002d9c:	4413      	add	r3, r2
 8002d9e:	460a      	mov	r2, r1
 8002da0:	805a      	strh	r2, [r3, #2]
        TS_State->touchY[index] = y[index];
 8002da2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002da4:	005b      	lsls	r3, r3, #1
 8002da6:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8002daa:	4413      	add	r3, r2
 8002dac:	f833 1c24 	ldrh.w	r1, [r3, #-36]
 8002db0:	687a      	ldr	r2, [r7, #4]
 8002db2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002db4:	3304      	adds	r3, #4
 8002db6:	005b      	lsls	r3, r3, #1
 8002db8:	4413      	add	r3, r2
 8002dba:	460a      	mov	r2, r1
 8002dbc:	809a      	strh	r2, [r3, #4]
 8002dbe:	e02c      	b.n	8002e1a <BSP_TS_GetState+0x2d2>
 8002dc0:	2002cb64 	.word	0x2002cb64
 8002dc4:	2002cb6d 	.word	0x2002cb6d
 8002dc8:	2002cb6c 	.word	0x2002cb6c
 8002dcc:	2002cb70 	.word	0x2002cb70
 8002dd0:	2002cb84 	.word	0x2002cb84
      }
      else
      {
        /* 2^12 = 4096 : indexes are expressed on a dynamic of 4096 */
        TS_State->touchX[index] = (tsXBoundary * _x[index]) >> 12;
 8002dd4:	4b42      	ldr	r3, [pc, #264]	; (8002ee0 <BSP_TS_GetState+0x398>)
 8002dd6:	881b      	ldrh	r3, [r3, #0]
 8002dd8:	4619      	mov	r1, r3
 8002dda:	4a42      	ldr	r2, [pc, #264]	; (8002ee4 <BSP_TS_GetState+0x39c>)
 8002ddc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002dde:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002de2:	fb03 f301 	mul.w	r3, r3, r1
 8002de6:	0b1b      	lsrs	r3, r3, #12
 8002de8:	b299      	uxth	r1, r3
 8002dea:	687a      	ldr	r2, [r7, #4]
 8002dec:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002dee:	005b      	lsls	r3, r3, #1
 8002df0:	4413      	add	r3, r2
 8002df2:	460a      	mov	r2, r1
 8002df4:	805a      	strh	r2, [r3, #2]
        TS_State->touchY[index] = (tsYBoundary * _y[index]) >> 12;
 8002df6:	4b3c      	ldr	r3, [pc, #240]	; (8002ee8 <BSP_TS_GetState+0x3a0>)
 8002df8:	881b      	ldrh	r3, [r3, #0]
 8002dfa:	4619      	mov	r1, r3
 8002dfc:	4a3b      	ldr	r2, [pc, #236]	; (8002eec <BSP_TS_GetState+0x3a4>)
 8002dfe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002e00:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002e04:	fb03 f301 	mul.w	r3, r3, r1
 8002e08:	0b1b      	lsrs	r3, r3, #12
 8002e0a:	b299      	uxth	r1, r3
 8002e0c:	687a      	ldr	r2, [r7, #4]
 8002e0e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002e10:	3304      	adds	r3, #4
 8002e12:	005b      	lsls	r3, r3, #1
 8002e14:	4413      	add	r3, r2
 8002e16:	460a      	mov	r2, r1
 8002e18:	809a      	strh	r2, [r3, #4]
      }

#if (TS_MULTI_TOUCH_SUPPORTED == 1)

      /* Get touch info related to the current touch */
      ft5336_TS_GetTouchInfo(I2cAddress, index, &weight, &area, &event);
 8002e1a:	4b35      	ldr	r3, [pc, #212]	; (8002ef0 <BSP_TS_GetState+0x3a8>)
 8002e1c:	781b      	ldrb	r3, [r3, #0]
 8002e1e:	b298      	uxth	r0, r3
 8002e20:	f107 010c 	add.w	r1, r7, #12
 8002e24:	f107 0210 	add.w	r2, r7, #16
 8002e28:	f107 0308 	add.w	r3, r7, #8
 8002e2c:	9300      	str	r3, [sp, #0]
 8002e2e:	460b      	mov	r3, r1
 8002e30:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8002e32:	f7fe f92d 	bl	8001090 <ft5336_TS_GetTouchInfo>

      /* Update TS_State structure */
      TS_State->touchWeight[index] = weight;
 8002e36:	693b      	ldr	r3, [r7, #16]
 8002e38:	b2d9      	uxtb	r1, r3
 8002e3a:	687a      	ldr	r2, [r7, #4]
 8002e3c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002e3e:	4413      	add	r3, r2
 8002e40:	3316      	adds	r3, #22
 8002e42:	460a      	mov	r2, r1
 8002e44:	701a      	strb	r2, [r3, #0]
      TS_State->touchArea[index]   = area;
 8002e46:	68fb      	ldr	r3, [r7, #12]
 8002e48:	b2d9      	uxtb	r1, r3
 8002e4a:	687a      	ldr	r2, [r7, #4]
 8002e4c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002e4e:	4413      	add	r3, r2
 8002e50:	3320      	adds	r3, #32
 8002e52:	460a      	mov	r2, r1
 8002e54:	701a      	strb	r2, [r3, #0]

      /* Remap touch event */
      switch(event)
 8002e56:	68bb      	ldr	r3, [r7, #8]
 8002e58:	2b03      	cmp	r3, #3
 8002e5a:	d827      	bhi.n	8002eac <BSP_TS_GetState+0x364>
 8002e5c:	a201      	add	r2, pc, #4	; (adr r2, 8002e64 <BSP_TS_GetState+0x31c>)
 8002e5e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e62:	bf00      	nop
 8002e64:	08002e75 	.word	0x08002e75
 8002e68:	08002e83 	.word	0x08002e83
 8002e6c:	08002e91 	.word	0x08002e91
 8002e70:	08002e9f 	.word	0x08002e9f
      {
        case FT5336_TOUCH_EVT_FLAG_PRESS_DOWN	:
          TS_State->touchEventId[index] = TOUCH_EVENT_PRESS_DOWN;
 8002e74:	687a      	ldr	r2, [r7, #4]
 8002e76:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002e78:	4413      	add	r3, r2
 8002e7a:	331b      	adds	r3, #27
 8002e7c:	2201      	movs	r2, #1
 8002e7e:	701a      	strb	r2, [r3, #0]
          break;
 8002e80:	e018      	b.n	8002eb4 <BSP_TS_GetState+0x36c>
        case FT5336_TOUCH_EVT_FLAG_LIFT_UP :
          TS_State->touchEventId[index] = TOUCH_EVENT_LIFT_UP;
 8002e82:	687a      	ldr	r2, [r7, #4]
 8002e84:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002e86:	4413      	add	r3, r2
 8002e88:	331b      	adds	r3, #27
 8002e8a:	2202      	movs	r2, #2
 8002e8c:	701a      	strb	r2, [r3, #0]
          break;
 8002e8e:	e011      	b.n	8002eb4 <BSP_TS_GetState+0x36c>
        case FT5336_TOUCH_EVT_FLAG_CONTACT :
          TS_State->touchEventId[index] = TOUCH_EVENT_CONTACT;
 8002e90:	687a      	ldr	r2, [r7, #4]
 8002e92:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002e94:	4413      	add	r3, r2
 8002e96:	331b      	adds	r3, #27
 8002e98:	2203      	movs	r2, #3
 8002e9a:	701a      	strb	r2, [r3, #0]
          break;
 8002e9c:	e00a      	b.n	8002eb4 <BSP_TS_GetState+0x36c>
        case FT5336_TOUCH_EVT_FLAG_NO_EVENT :
          TS_State->touchEventId[index] = TOUCH_EVENT_NO_EVT;
 8002e9e:	687a      	ldr	r2, [r7, #4]
 8002ea0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002ea2:	4413      	add	r3, r2
 8002ea4:	331b      	adds	r3, #27
 8002ea6:	2200      	movs	r2, #0
 8002ea8:	701a      	strb	r2, [r3, #0]
          break;
 8002eaa:	e003      	b.n	8002eb4 <BSP_TS_GetState+0x36c>
        default :
          ts_status = TS_ERROR;
 8002eac:	2301      	movs	r3, #1
 8002eae:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
          break;
 8002eb2:	bf00      	nop
    for(index=0; index < TS_State->touchDetected; index++)
 8002eb4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002eb6:	3301      	adds	r3, #1
 8002eb8:	64bb      	str	r3, [r7, #72]	; 0x48
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	781b      	ldrb	r3, [r3, #0]
 8002ebe:	461a      	mov	r2, r3
 8002ec0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002ec2:	429a      	cmp	r2, r3
 8002ec4:	f63f ae61 	bhi.w	8002b8a <BSP_TS_GetState+0x42>

    } /* of for(index=0; index < TS_State->touchDetected; index++) */

#if (TS_MULTI_TOUCH_SUPPORTED == 1)
    /* Get gesture Id */
    ts_status = BSP_TS_Get_GestureId(TS_State);
 8002ec8:	6878      	ldr	r0, [r7, #4]
 8002eca:	f000 f813 	bl	8002ef4 <BSP_TS_Get_GestureId>
 8002ece:	4603      	mov	r3, r0
 8002ed0:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
#endif /* TS_MULTI_TOUCH_SUPPORTED == 1 */

  } /* end of if(TS_State->touchDetected != 0) */

  return (ts_status);
 8002ed4:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
}
 8002ed8:	4618      	mov	r0, r3
 8002eda:	3754      	adds	r7, #84	; 0x54
 8002edc:	46bd      	mov	sp, r7
 8002ede:	bd90      	pop	{r4, r7, pc}
 8002ee0:	2002cb68 	.word	0x2002cb68
 8002ee4:	2002cb70 	.word	0x2002cb70
 8002ee8:	2002cb6a 	.word	0x2002cb6a
 8002eec:	2002cb84 	.word	0x2002cb84
 8002ef0:	2002cb6d 	.word	0x2002cb6d

08002ef4 <BSP_TS_Get_GestureId>:
  * @brief  Update gesture Id following a touch detected.
  * @param  TS_State: Pointer to touch screen current state structure
  * @retval TS_OK if all initializations are OK. Other value if error.
  */
uint8_t BSP_TS_Get_GestureId(TS_StateTypeDef *TS_State)
{
 8002ef4:	b580      	push	{r7, lr}
 8002ef6:	b084      	sub	sp, #16
 8002ef8:	af00      	add	r7, sp, #0
 8002efa:	6078      	str	r0, [r7, #4]
  uint32_t gestureId = 0;
 8002efc:	2300      	movs	r3, #0
 8002efe:	60bb      	str	r3, [r7, #8]
  uint8_t  ts_status = TS_OK;
 8002f00:	2300      	movs	r3, #0
 8002f02:	73fb      	strb	r3, [r7, #15]

  /* Get gesture Id */
  ft5336_TS_GetGestureID(I2cAddress, &gestureId);
 8002f04:	4b1f      	ldr	r3, [pc, #124]	; (8002f84 <BSP_TS_Get_GestureId+0x90>)
 8002f06:	781b      	ldrb	r3, [r3, #0]
 8002f08:	b29b      	uxth	r3, r3
 8002f0a:	f107 0208 	add.w	r2, r7, #8
 8002f0e:	4611      	mov	r1, r2
 8002f10:	4618      	mov	r0, r3
 8002f12:	f7fe f8a4 	bl	800105e <ft5336_TS_GetGestureID>

  /* Remap gesture Id to a TS_GestureIdTypeDef value */
  switch(gestureId)
 8002f16:	68bb      	ldr	r3, [r7, #8]
 8002f18:	2b18      	cmp	r3, #24
 8002f1a:	d01b      	beq.n	8002f54 <BSP_TS_Get_GestureId+0x60>
 8002f1c:	2b18      	cmp	r3, #24
 8002f1e:	d806      	bhi.n	8002f2e <BSP_TS_Get_GestureId+0x3a>
 8002f20:	2b10      	cmp	r3, #16
 8002f22:	d00f      	beq.n	8002f44 <BSP_TS_Get_GestureId+0x50>
 8002f24:	2b14      	cmp	r3, #20
 8002f26:	d011      	beq.n	8002f4c <BSP_TS_Get_GestureId+0x58>
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	d007      	beq.n	8002f3c <BSP_TS_Get_GestureId+0x48>
 8002f2c:	e022      	b.n	8002f74 <BSP_TS_Get_GestureId+0x80>
 8002f2e:	2b40      	cmp	r3, #64	; 0x40
 8002f30:	d018      	beq.n	8002f64 <BSP_TS_Get_GestureId+0x70>
 8002f32:	2b49      	cmp	r3, #73	; 0x49
 8002f34:	d01a      	beq.n	8002f6c <BSP_TS_Get_GestureId+0x78>
 8002f36:	2b1c      	cmp	r3, #28
 8002f38:	d010      	beq.n	8002f5c <BSP_TS_Get_GestureId+0x68>
 8002f3a:	e01b      	b.n	8002f74 <BSP_TS_Get_GestureId+0x80>
  {
    case FT5336_GEST_ID_NO_GESTURE :
      TS_State->gestureId = GEST_ID_NO_GESTURE;
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	2200      	movs	r2, #0
 8002f40:	629a      	str	r2, [r3, #40]	; 0x28
      break;
 8002f42:	e01a      	b.n	8002f7a <BSP_TS_Get_GestureId+0x86>
    case FT5336_GEST_ID_MOVE_UP :
      TS_State->gestureId = GEST_ID_MOVE_UP;
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	2201      	movs	r2, #1
 8002f48:	629a      	str	r2, [r3, #40]	; 0x28
      break;
 8002f4a:	e016      	b.n	8002f7a <BSP_TS_Get_GestureId+0x86>
    case FT5336_GEST_ID_MOVE_RIGHT :
      TS_State->gestureId = GEST_ID_MOVE_RIGHT;
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	2202      	movs	r2, #2
 8002f50:	629a      	str	r2, [r3, #40]	; 0x28
      break;
 8002f52:	e012      	b.n	8002f7a <BSP_TS_Get_GestureId+0x86>
    case FT5336_GEST_ID_MOVE_DOWN :
      TS_State->gestureId = GEST_ID_MOVE_DOWN;
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	2203      	movs	r2, #3
 8002f58:	629a      	str	r2, [r3, #40]	; 0x28
      break;
 8002f5a:	e00e      	b.n	8002f7a <BSP_TS_Get_GestureId+0x86>
    case FT5336_GEST_ID_MOVE_LEFT :
      TS_State->gestureId = GEST_ID_MOVE_LEFT;
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	2204      	movs	r2, #4
 8002f60:	629a      	str	r2, [r3, #40]	; 0x28
      break;
 8002f62:	e00a      	b.n	8002f7a <BSP_TS_Get_GestureId+0x86>
    case FT5336_GEST_ID_ZOOM_IN :
      TS_State->gestureId = GEST_ID_ZOOM_IN;
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	2205      	movs	r2, #5
 8002f68:	629a      	str	r2, [r3, #40]	; 0x28
      break;
 8002f6a:	e006      	b.n	8002f7a <BSP_TS_Get_GestureId+0x86>
    case FT5336_GEST_ID_ZOOM_OUT :
      TS_State->gestureId = GEST_ID_ZOOM_OUT;
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	2206      	movs	r2, #6
 8002f70:	629a      	str	r2, [r3, #40]	; 0x28
      break;
 8002f72:	e002      	b.n	8002f7a <BSP_TS_Get_GestureId+0x86>
    default :
      ts_status = TS_ERROR;
 8002f74:	2301      	movs	r3, #1
 8002f76:	73fb      	strb	r3, [r7, #15]
      break;
 8002f78:	bf00      	nop
  } /* of switch(gestureId) */

  return(ts_status);
 8002f7a:	7bfb      	ldrb	r3, [r7, #15]
}
 8002f7c:	4618      	mov	r0, r3
 8002f7e:	3710      	adds	r7, #16
 8002f80:	46bd      	mov	sp, r7
 8002f82:	bd80      	pop	{r7, pc}
 8002f84:	2002cb6d 	.word	0x2002cb6d

08002f88 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002f88:	b580      	push	{r7, lr}
 8002f8a:	af00      	add	r7, sp, #0
  /* Configure Instruction cache through ART accelerator */ 
#if (ART_ACCLERATOR_ENABLE != 0)
   __HAL_FLASH_ART_ENABLE();
 8002f8c:	4a08      	ldr	r2, [pc, #32]	; (8002fb0 <HAL_Init+0x28>)
 8002f8e:	4b08      	ldr	r3, [pc, #32]	; (8002fb0 <HAL_Init+0x28>)
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002f96:	6013      	str	r3, [r2, #0]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002f98:	2003      	movs	r0, #3
 8002f9a:	f000 f917 	bl	80031cc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002f9e:	2000      	movs	r0, #0
 8002fa0:	f006 ff58 	bl	8009e54 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 8002fa4:	f006 fcf4 	bl	8009990 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 8002fa8:	2300      	movs	r3, #0
}
 8002faa:	4618      	mov	r0, r3
 8002fac:	bd80      	pop	{r7, pc}
 8002fae:	bf00      	nop
 8002fb0:	40023c00 	.word	0x40023c00

08002fb4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002fb4:	b480      	push	{r7}
 8002fb6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002fb8:	4b06      	ldr	r3, [pc, #24]	; (8002fd4 <HAL_IncTick+0x20>)
 8002fba:	781b      	ldrb	r3, [r3, #0]
 8002fbc:	461a      	mov	r2, r3
 8002fbe:	4b06      	ldr	r3, [pc, #24]	; (8002fd8 <HAL_IncTick+0x24>)
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	4413      	add	r3, r2
 8002fc4:	4a04      	ldr	r2, [pc, #16]	; (8002fd8 <HAL_IncTick+0x24>)
 8002fc6:	6013      	str	r3, [r2, #0]
}
 8002fc8:	bf00      	nop
 8002fca:	46bd      	mov	sp, r7
 8002fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fd0:	4770      	bx	lr
 8002fd2:	bf00      	nop
 8002fd4:	20000039 	.word	0x20000039
 8002fd8:	2002cc84 	.word	0x2002cc84

08002fdc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002fdc:	b480      	push	{r7}
 8002fde:	af00      	add	r7, sp, #0
  return uwTick;
 8002fe0:	4b03      	ldr	r3, [pc, #12]	; (8002ff0 <HAL_GetTick+0x14>)
 8002fe2:	681b      	ldr	r3, [r3, #0]
}
 8002fe4:	4618      	mov	r0, r3
 8002fe6:	46bd      	mov	sp, r7
 8002fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fec:	4770      	bx	lr
 8002fee:	bf00      	nop
 8002ff0:	2002cc84 	.word	0x2002cc84

08002ff4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002ff4:	b580      	push	{r7, lr}
 8002ff6:	b084      	sub	sp, #16
 8002ff8:	af00      	add	r7, sp, #0
 8002ffa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002ffc:	f7ff ffee 	bl	8002fdc <HAL_GetTick>
 8003000:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	f1b3 3fff 	cmp.w	r3, #4294967295
 800300c:	d005      	beq.n	800301a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800300e:	4b09      	ldr	r3, [pc, #36]	; (8003034 <HAL_Delay+0x40>)
 8003010:	781b      	ldrb	r3, [r3, #0]
 8003012:	461a      	mov	r2, r3
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	4413      	add	r3, r2
 8003018:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800301a:	bf00      	nop
 800301c:	f7ff ffde 	bl	8002fdc <HAL_GetTick>
 8003020:	4602      	mov	r2, r0
 8003022:	68bb      	ldr	r3, [r7, #8]
 8003024:	1ad2      	subs	r2, r2, r3
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	429a      	cmp	r2, r3
 800302a:	d3f7      	bcc.n	800301c <HAL_Delay+0x28>
  {
  }
}
 800302c:	bf00      	nop
 800302e:	3710      	adds	r7, #16
 8003030:	46bd      	mov	sp, r7
 8003032:	bd80      	pop	{r7, pc}
 8003034:	20000039 	.word	0x20000039

08003038 <NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003038:	b480      	push	{r7}
 800303a:	b085      	sub	sp, #20
 800303c:	af00      	add	r7, sp, #0
 800303e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	f003 0307 	and.w	r3, r3, #7
 8003046:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003048:	4b0b      	ldr	r3, [pc, #44]	; (8003078 <NVIC_SetPriorityGrouping+0x40>)
 800304a:	68db      	ldr	r3, [r3, #12]
 800304c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800304e:	68ba      	ldr	r2, [r7, #8]
 8003050:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003054:	4013      	ands	r3, r2
 8003056:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800305c:	68bb      	ldr	r3, [r7, #8]
 800305e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8003060:	4b06      	ldr	r3, [pc, #24]	; (800307c <NVIC_SetPriorityGrouping+0x44>)
 8003062:	4313      	orrs	r3, r2
 8003064:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003066:	4a04      	ldr	r2, [pc, #16]	; (8003078 <NVIC_SetPriorityGrouping+0x40>)
 8003068:	68bb      	ldr	r3, [r7, #8]
 800306a:	60d3      	str	r3, [r2, #12]
}
 800306c:	bf00      	nop
 800306e:	3714      	adds	r7, #20
 8003070:	46bd      	mov	sp, r7
 8003072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003076:	4770      	bx	lr
 8003078:	e000ed00 	.word	0xe000ed00
 800307c:	05fa0000 	.word	0x05fa0000

08003080 <NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
 8003080:	b480      	push	{r7}
 8003082:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003084:	4b04      	ldr	r3, [pc, #16]	; (8003098 <NVIC_GetPriorityGrouping+0x18>)
 8003086:	68db      	ldr	r3, [r3, #12]
 8003088:	0a1b      	lsrs	r3, r3, #8
 800308a:	f003 0307 	and.w	r3, r3, #7
}
 800308e:	4618      	mov	r0, r3
 8003090:	46bd      	mov	sp, r7
 8003092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003096:	4770      	bx	lr
 8003098:	e000ed00 	.word	0xe000ed00

0800309c <NVIC_EnableIRQ>:
  \brief   Enable External Interrupt
  \details Enables a device-specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800309c:	b480      	push	{r7}
 800309e:	b083      	sub	sp, #12
 80030a0:	af00      	add	r7, sp, #0
 80030a2:	4603      	mov	r3, r0
 80030a4:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 80030a6:	4909      	ldr	r1, [pc, #36]	; (80030cc <NVIC_EnableIRQ+0x30>)
 80030a8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80030ac:	095b      	lsrs	r3, r3, #5
 80030ae:	79fa      	ldrb	r2, [r7, #7]
 80030b0:	f002 021f 	and.w	r2, r2, #31
 80030b4:	2001      	movs	r0, #1
 80030b6:	fa00 f202 	lsl.w	r2, r0, r2
 80030ba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80030be:	bf00      	nop
 80030c0:	370c      	adds	r7, #12
 80030c2:	46bd      	mov	sp, r7
 80030c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030c8:	4770      	bx	lr
 80030ca:	bf00      	nop
 80030cc:	e000e100 	.word	0xe000e100

080030d0 <NVIC_SetPriority>:
  \note    The priority cannot be set for every core interrupt.
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80030d0:	b480      	push	{r7}
 80030d2:	b083      	sub	sp, #12
 80030d4:	af00      	add	r7, sp, #0
 80030d6:	4603      	mov	r3, r0
 80030d8:	6039      	str	r1, [r7, #0]
 80030da:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) < 0)
 80030dc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	da0b      	bge.n	80030fc <NVIC_SetPriority+0x2c>
  {
    SCB->SHPR[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80030e4:	490d      	ldr	r1, [pc, #52]	; (800311c <NVIC_SetPriority+0x4c>)
 80030e6:	79fb      	ldrb	r3, [r7, #7]
 80030e8:	f003 030f 	and.w	r3, r3, #15
 80030ec:	3b04      	subs	r3, #4
 80030ee:	683a      	ldr	r2, [r7, #0]
 80030f0:	b2d2      	uxtb	r2, r2
 80030f2:	0112      	lsls	r2, r2, #4
 80030f4:	b2d2      	uxtb	r2, r2
 80030f6:	440b      	add	r3, r1
 80030f8:	761a      	strb	r2, [r3, #24]
  }
  else
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80030fa:	e009      	b.n	8003110 <NVIC_SetPriority+0x40>
    NVIC->IP[((uint32_t)(int32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80030fc:	4908      	ldr	r1, [pc, #32]	; (8003120 <NVIC_SetPriority+0x50>)
 80030fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003102:	683a      	ldr	r2, [r7, #0]
 8003104:	b2d2      	uxtb	r2, r2
 8003106:	0112      	lsls	r2, r2, #4
 8003108:	b2d2      	uxtb	r2, r2
 800310a:	440b      	add	r3, r1
 800310c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8003110:	bf00      	nop
 8003112:	370c      	adds	r7, #12
 8003114:	46bd      	mov	sp, r7
 8003116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800311a:	4770      	bx	lr
 800311c:	e000ed00 	.word	0xe000ed00
 8003120:	e000e100 	.word	0xe000e100

08003124 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003124:	b480      	push	{r7}
 8003126:	b089      	sub	sp, #36	; 0x24
 8003128:	af00      	add	r7, sp, #0
 800312a:	60f8      	str	r0, [r7, #12]
 800312c:	60b9      	str	r1, [r7, #8]
 800312e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	f003 0307 	and.w	r3, r3, #7
 8003136:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003138:	69fb      	ldr	r3, [r7, #28]
 800313a:	f1c3 0307 	rsb	r3, r3, #7
 800313e:	2b04      	cmp	r3, #4
 8003140:	bf28      	it	cs
 8003142:	2304      	movcs	r3, #4
 8003144:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003146:	69fb      	ldr	r3, [r7, #28]
 8003148:	3304      	adds	r3, #4
 800314a:	2b06      	cmp	r3, #6
 800314c:	d902      	bls.n	8003154 <NVIC_EncodePriority+0x30>
 800314e:	69fb      	ldr	r3, [r7, #28]
 8003150:	3b03      	subs	r3, #3
 8003152:	e000      	b.n	8003156 <NVIC_EncodePriority+0x32>
 8003154:	2300      	movs	r3, #0
 8003156:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003158:	2201      	movs	r2, #1
 800315a:	69bb      	ldr	r3, [r7, #24]
 800315c:	fa02 f303 	lsl.w	r3, r2, r3
 8003160:	1e5a      	subs	r2, r3, #1
 8003162:	68bb      	ldr	r3, [r7, #8]
 8003164:	401a      	ands	r2, r3
 8003166:	697b      	ldr	r3, [r7, #20]
 8003168:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800316a:	2101      	movs	r1, #1
 800316c:	697b      	ldr	r3, [r7, #20]
 800316e:	fa01 f303 	lsl.w	r3, r1, r3
 8003172:	1e59      	subs	r1, r3, #1
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003178:	4313      	orrs	r3, r2
         );
}
 800317a:	4618      	mov	r0, r3
 800317c:	3724      	adds	r7, #36	; 0x24
 800317e:	46bd      	mov	sp, r7
 8003180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003184:	4770      	bx	lr
	...

08003188 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003188:	b580      	push	{r7, lr}
 800318a:	b082      	sub	sp, #8
 800318c:	af00      	add	r7, sp, #0
 800318e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	3b01      	subs	r3, #1
 8003194:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003198:	d301      	bcc.n	800319e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800319a:	2301      	movs	r3, #1
 800319c:	e00f      	b.n	80031be <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800319e:	4a0a      	ldr	r2, [pc, #40]	; (80031c8 <SysTick_Config+0x40>)
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	3b01      	subs	r3, #1
 80031a4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80031a6:	210f      	movs	r1, #15
 80031a8:	f04f 30ff 	mov.w	r0, #4294967295
 80031ac:	f7ff ff90 	bl	80030d0 <NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80031b0:	4b05      	ldr	r3, [pc, #20]	; (80031c8 <SysTick_Config+0x40>)
 80031b2:	2200      	movs	r2, #0
 80031b4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80031b6:	4b04      	ldr	r3, [pc, #16]	; (80031c8 <SysTick_Config+0x40>)
 80031b8:	2207      	movs	r2, #7
 80031ba:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80031bc:	2300      	movs	r3, #0
}
 80031be:	4618      	mov	r0, r3
 80031c0:	3708      	adds	r7, #8
 80031c2:	46bd      	mov	sp, r7
 80031c4:	bd80      	pop	{r7, pc}
 80031c6:	bf00      	nop
 80031c8:	e000e010 	.word	0xe000e010

080031cc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80031cc:	b580      	push	{r7, lr}
 80031ce:	b082      	sub	sp, #8
 80031d0:	af00      	add	r7, sp, #0
 80031d2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80031d4:	6878      	ldr	r0, [r7, #4]
 80031d6:	f7ff ff2f 	bl	8003038 <NVIC_SetPriorityGrouping>
}
 80031da:	bf00      	nop
 80031dc:	3708      	adds	r7, #8
 80031de:	46bd      	mov	sp, r7
 80031e0:	bd80      	pop	{r7, pc}

080031e2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80031e2:	b580      	push	{r7, lr}
 80031e4:	b086      	sub	sp, #24
 80031e6:	af00      	add	r7, sp, #0
 80031e8:	4603      	mov	r3, r0
 80031ea:	60b9      	str	r1, [r7, #8]
 80031ec:	607a      	str	r2, [r7, #4]
 80031ee:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80031f0:	2300      	movs	r3, #0
 80031f2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80031f4:	f7ff ff44 	bl	8003080 <NVIC_GetPriorityGrouping>
 80031f8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80031fa:	687a      	ldr	r2, [r7, #4]
 80031fc:	68b9      	ldr	r1, [r7, #8]
 80031fe:	6978      	ldr	r0, [r7, #20]
 8003200:	f7ff ff90 	bl	8003124 <NVIC_EncodePriority>
 8003204:	4602      	mov	r2, r0
 8003206:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800320a:	4611      	mov	r1, r2
 800320c:	4618      	mov	r0, r3
 800320e:	f7ff ff5f 	bl	80030d0 <NVIC_SetPriority>
}
 8003212:	bf00      	nop
 8003214:	3718      	adds	r7, #24
 8003216:	46bd      	mov	sp, r7
 8003218:	bd80      	pop	{r7, pc}

0800321a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800321a:	b580      	push	{r7, lr}
 800321c:	b082      	sub	sp, #8
 800321e:	af00      	add	r7, sp, #0
 8003220:	4603      	mov	r3, r0
 8003222:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003224:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003228:	4618      	mov	r0, r3
 800322a:	f7ff ff37 	bl	800309c <NVIC_EnableIRQ>
}
 800322e:	bf00      	nop
 8003230:	3708      	adds	r7, #8
 8003232:	46bd      	mov	sp, r7
 8003234:	bd80      	pop	{r7, pc}

08003236 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003236:	b580      	push	{r7, lr}
 8003238:	b082      	sub	sp, #8
 800323a:	af00      	add	r7, sp, #0
 800323c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800323e:	6878      	ldr	r0, [r7, #4]
 8003240:	f7ff ffa2 	bl	8003188 <SysTick_Config>
 8003244:	4603      	mov	r3, r0
}
 8003246:	4618      	mov	r0, r3
 8003248:	3708      	adds	r7, #8
 800324a:	46bd      	mov	sp, r7
 800324c:	bd80      	pop	{r7, pc}
	...

08003250 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 8003250:	b480      	push	{r7}
 8003252:	b083      	sub	sp, #12
 8003254:	af00      	add	r7, sp, #0
 8003256:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	2b04      	cmp	r3, #4
 800325c:	d106      	bne.n	800326c <HAL_SYSTICK_CLKSourceConfig+0x1c>
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 800325e:	4a09      	ldr	r2, [pc, #36]	; (8003284 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8003260:	4b08      	ldr	r3, [pc, #32]	; (8003284 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	f043 0304 	orr.w	r3, r3, #4
 8003268:	6013      	str	r3, [r2, #0]
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
  }
}
 800326a:	e005      	b.n	8003278 <HAL_SYSTICK_CLKSourceConfig+0x28>
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 800326c:	4a05      	ldr	r2, [pc, #20]	; (8003284 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 800326e:	4b05      	ldr	r3, [pc, #20]	; (8003284 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	f023 0304 	bic.w	r3, r3, #4
 8003276:	6013      	str	r3, [r2, #0]
}
 8003278:	bf00      	nop
 800327a:	370c      	adds	r7, #12
 800327c:	46bd      	mov	sp, r7
 800327e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003282:	4770      	bx	lr
 8003284:	e000e010 	.word	0xe000e010

08003288 <HAL_SYSTICK_IRQHandler>:
/**
  * @brief  This function handles SYSTICK interrupt request.
  * @retval None
  */
void HAL_SYSTICK_IRQHandler(void)
{
 8003288:	b580      	push	{r7, lr}
 800328a:	af00      	add	r7, sp, #0
  HAL_SYSTICK_Callback();
 800328c:	f000 f802 	bl	8003294 <HAL_SYSTICK_Callback>
}
 8003290:	bf00      	nop
 8003292:	bd80      	pop	{r7, pc}

08003294 <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 8003294:	b480      	push	{r7}
 8003296:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_SYSTICK_Callback could be implemented in the user file
   */
}
 8003298:	bf00      	nop
 800329a:	46bd      	mov	sp, r7
 800329c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032a0:	4770      	bx	lr
	...

080032a4 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 80032a4:	b580      	push	{r7, lr}
 80032a6:	b082      	sub	sp, #8
 80032a8:	af00      	add	r7, sp, #0
 80032aa:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if(hcrc == NULL)
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d101      	bne.n	80032b6 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 80032b2:	2301      	movs	r3, #1
 80032b4:	e054      	b.n	8003360 <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if(hcrc->State == HAL_CRC_STATE_RESET)
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	7f5b      	ldrb	r3, [r3, #29]
 80032ba:	b2db      	uxtb	r3, r3
 80032bc:	2b00      	cmp	r3, #0
 80032be:	d105      	bne.n	80032cc <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	2200      	movs	r2, #0
 80032c4:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 80032c6:	6878      	ldr	r0, [r7, #4]
 80032c8:	f006 fbb0 	bl	8009a2c <HAL_CRC_MspInit>
  }
  
  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_BUSY;
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	2202      	movs	r2, #2
 80032d0:	775a      	strb	r2, [r3, #29]
  
  /* check whether or not non-default generating polynomial has been 
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse)); 
  if(hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	791b      	ldrb	r3, [r3, #4]
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	d10c      	bne.n	80032f4 <HAL_CRC_Init+0x50>
  {
    /* initialize IP with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);  
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	4a22      	ldr	r2, [pc, #136]	; (8003368 <HAL_CRC_Init+0xc4>)
 80032e0:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	687a      	ldr	r2, [r7, #4]
 80032e8:	6812      	ldr	r2, [r2, #0]
 80032ea:	6892      	ldr	r2, [r2, #8]
 80032ec:	f022 0218 	bic.w	r2, r2, #24
 80032f0:	609a      	str	r2, [r3, #8]
 80032f2:	e00c      	b.n	800330e <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC IP with generating polynomial defined by user */
    if(HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	6899      	ldr	r1, [r3, #8]
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	68db      	ldr	r3, [r3, #12]
 80032fc:	461a      	mov	r2, r3
 80032fe:	6878      	ldr	r0, [r7, #4]
 8003300:	f000 f834 	bl	800336c <HAL_CRCEx_Polynomial_Set>
 8003304:	4603      	mov	r3, r0
 8003306:	2b00      	cmp	r3, #0
 8003308:	d001      	beq.n	800330e <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 800330a:	2301      	movs	r3, #1
 800330c:	e028      	b.n	8003360 <HAL_CRC_Init+0xbc>
  }
  
  /* check whether or not non-default CRC initial value has been 
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if(hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	795b      	ldrb	r3, [r3, #5]
 8003312:	2b00      	cmp	r3, #0
 8003314:	d105      	bne.n	8003322 <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);  
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	f04f 32ff 	mov.w	r2, #4294967295
 800331e:	611a      	str	r2, [r3, #16]
 8003320:	e004      	b.n	800332c <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	687a      	ldr	r2, [r7, #4]
 8003328:	6912      	ldr	r2, [r2, #16]
 800332a:	611a      	str	r2, [r3, #16]
  }
  

  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode)); 
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode); 
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	687a      	ldr	r2, [r7, #4]
 8003332:	6812      	ldr	r2, [r2, #0]
 8003334:	6892      	ldr	r2, [r2, #8]
 8003336:	f022 0160 	bic.w	r1, r2, #96	; 0x60
 800333a:	687a      	ldr	r2, [r7, #4]
 800333c:	6952      	ldr	r2, [r2, #20]
 800333e:	430a      	orrs	r2, r1
 8003340:	609a      	str	r2, [r3, #8]
  
  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode)); 
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);  
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	687a      	ldr	r2, [r7, #4]
 8003348:	6812      	ldr	r2, [r2, #0]
 800334a:	6892      	ldr	r2, [r2, #8]
 800334c:	f022 0180 	bic.w	r1, r2, #128	; 0x80
 8003350:	687a      	ldr	r2, [r7, #4]
 8003352:	6992      	ldr	r2, [r2, #24]
 8003354:	430a      	orrs	r2, r1
 8003356:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	2201      	movs	r2, #1
 800335c:	775a      	strb	r2, [r3, #29]
  
  /* Return function status */
  return HAL_OK;
 800335e:	2300      	movs	r3, #0
}
 8003360:	4618      	mov	r0, r3
 8003362:	3708      	adds	r7, #8
 8003364:	46bd      	mov	sp, r7
 8003366:	bd80      	pop	{r7, pc}
 8003368:	04c11db7 	.word	0x04c11db7

0800336c <HAL_CRCEx_Polynomial_Set>:
  *          @arg CRC_POLYLENGTH_16B: 16-bit long CRC (generating polynomial of degree 16)
  *          @arg CRC_POLYLENGTH_32B: 32-bit long CRC (generating polynomial of degree 32)                
  * @retval HAL status
  */                                   
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 800336c:	b480      	push	{r7}
 800336e:	b087      	sub	sp, #28
 8003370:	af00      	add	r7, sp, #0
 8003372:	60f8      	str	r0, [r7, #12]
 8003374:	60b9      	str	r1, [r7, #8]
 8003376:	607a      	str	r2, [r7, #4]
  uint32_t msb = 31; /* polynomial degree is 32 at most, so msb is initialized to max value */
 8003378:	231f      	movs	r3, #31
 800337a:	617b      	str	r3, [r7, #20]
   * definition. HAL_ERROR is reported if Pol degree is 
   * larger than that indicated by PolyLength.
   * Look for MSB position: msb will contain the degree of
   *  the second to the largest polynomial member. E.g., for
   *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
  while (((Pol & ((uint32_t)(0x1) << msb)) == 0) && (msb-- > 0))
 800337c:	bf00      	nop
 800337e:	68ba      	ldr	r2, [r7, #8]
 8003380:	697b      	ldr	r3, [r7, #20]
 8003382:	fa22 f303 	lsr.w	r3, r2, r3
 8003386:	f003 0301 	and.w	r3, r3, #1
 800338a:	2b00      	cmp	r3, #0
 800338c:	d104      	bne.n	8003398 <HAL_CRCEx_Polynomial_Set+0x2c>
 800338e:	697b      	ldr	r3, [r7, #20]
 8003390:	1e5a      	subs	r2, r3, #1
 8003392:	617a      	str	r2, [r7, #20]
 8003394:	2b00      	cmp	r3, #0
 8003396:	d1f2      	bne.n	800337e <HAL_CRCEx_Polynomial_Set+0x12>
  {
  }

  switch (PolyLength)
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	2b18      	cmp	r3, #24
 800339c:	d843      	bhi.n	8003426 <HAL_CRCEx_Polynomial_Set+0xba>
 800339e:	a201      	add	r2, pc, #4	; (adr r2, 80033a4 <HAL_CRCEx_Polynomial_Set+0x38>)
 80033a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80033a4:	08003427 	.word	0x08003427
 80033a8:	08003427 	.word	0x08003427
 80033ac:	08003427 	.word	0x08003427
 80033b0:	08003427 	.word	0x08003427
 80033b4:	08003427 	.word	0x08003427
 80033b8:	08003427 	.word	0x08003427
 80033bc:	08003427 	.word	0x08003427
 80033c0:	08003427 	.word	0x08003427
 80033c4:	0800341d 	.word	0x0800341d
 80033c8:	08003427 	.word	0x08003427
 80033cc:	08003427 	.word	0x08003427
 80033d0:	08003427 	.word	0x08003427
 80033d4:	08003427 	.word	0x08003427
 80033d8:	08003427 	.word	0x08003427
 80033dc:	08003427 	.word	0x08003427
 80033e0:	08003427 	.word	0x08003427
 80033e4:	08003413 	.word	0x08003413
 80033e8:	08003427 	.word	0x08003427
 80033ec:	08003427 	.word	0x08003427
 80033f0:	08003427 	.word	0x08003427
 80033f4:	08003427 	.word	0x08003427
 80033f8:	08003427 	.word	0x08003427
 80033fc:	08003427 	.word	0x08003427
 8003400:	08003427 	.word	0x08003427
 8003404:	08003409 	.word	0x08003409
  {
    case CRC_POLYLENGTH_7B:
      if (msb >= HAL_CRC_LENGTH_7B)
 8003408:	697b      	ldr	r3, [r7, #20]
 800340a:	2b06      	cmp	r3, #6
 800340c:	d90d      	bls.n	800342a <HAL_CRCEx_Polynomial_Set+0xbe>
      { 
        return  HAL_ERROR;
 800340e:	2301      	movs	r3, #1
 8003410:	e01f      	b.n	8003452 <HAL_CRCEx_Polynomial_Set+0xe6>
      }
      break;
    case CRC_POLYLENGTH_8B:
      if (msb >= HAL_CRC_LENGTH_8B)
 8003412:	697b      	ldr	r3, [r7, #20]
 8003414:	2b07      	cmp	r3, #7
 8003416:	d90a      	bls.n	800342e <HAL_CRCEx_Polynomial_Set+0xc2>
      {
        return  HAL_ERROR;
 8003418:	2301      	movs	r3, #1
 800341a:	e01a      	b.n	8003452 <HAL_CRCEx_Polynomial_Set+0xe6>
      }
      break;
    case CRC_POLYLENGTH_16B:
      if (msb >= HAL_CRC_LENGTH_16B)
 800341c:	697b      	ldr	r3, [r7, #20]
 800341e:	2b0f      	cmp	r3, #15
 8003420:	d907      	bls.n	8003432 <HAL_CRCEx_Polynomial_Set+0xc6>
      {
        return  HAL_ERROR;
 8003422:	2301      	movs	r3, #1
 8003424:	e015      	b.n	8003452 <HAL_CRCEx_Polynomial_Set+0xe6>
      break;
    case CRC_POLYLENGTH_32B:
      /* no polynomial definition vs. polynomial length issue possible */
      break;
  default:
      break;
 8003426:	bf00      	nop
 8003428:	e004      	b.n	8003434 <HAL_CRCEx_Polynomial_Set+0xc8>
      break;
 800342a:	bf00      	nop
 800342c:	e002      	b.n	8003434 <HAL_CRCEx_Polynomial_Set+0xc8>
      break;
 800342e:	bf00      	nop
 8003430:	e000      	b.n	8003434 <HAL_CRCEx_Polynomial_Set+0xc8>
      break;
 8003432:	bf00      	nop
  }

  /* set generating polynomial */
  WRITE_REG(hcrc->Instance->POL, Pol);
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	68ba      	ldr	r2, [r7, #8]
 800343a:	615a      	str	r2, [r3, #20]
  
  /* set generating polynomial size */
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);  
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	68fa      	ldr	r2, [r7, #12]
 8003442:	6812      	ldr	r2, [r2, #0]
 8003444:	6892      	ldr	r2, [r2, #8]
 8003446:	f022 0118 	bic.w	r1, r2, #24
 800344a:	687a      	ldr	r2, [r7, #4]
 800344c:	430a      	orrs	r2, r1
 800344e:	609a      	str	r2, [r3, #8]
  
  /* Return function status */
  return HAL_OK;
 8003450:	2300      	movs	r3, #0
}
 8003452:	4618      	mov	r0, r3
 8003454:	371c      	adds	r7, #28
 8003456:	46bd      	mov	sp, r7
 8003458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800345c:	4770      	bx	lr
 800345e:	bf00      	nop

08003460 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003460:	b580      	push	{r7, lr}
 8003462:	b086      	sub	sp, #24
 8003464:	af00      	add	r7, sp, #0
 8003466:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003468:	2300      	movs	r3, #0
 800346a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 800346c:	f7ff fdb6 	bl	8002fdc <HAL_GetTick>
 8003470:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	2b00      	cmp	r3, #0
 8003476:	d101      	bne.n	800347c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8003478:	2301      	movs	r3, #1
 800347a:	e099      	b.n	80035b0 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	2200      	movs	r2, #0
 8003480:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	2202      	movs	r2, #2
 8003488:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	687a      	ldr	r2, [r7, #4]
 8003492:	6812      	ldr	r2, [r2, #0]
 8003494:	6812      	ldr	r2, [r2, #0]
 8003496:	f022 0201 	bic.w	r2, r2, #1
 800349a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800349c:	e00f      	b.n	80034be <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800349e:	f7ff fd9d 	bl	8002fdc <HAL_GetTick>
 80034a2:	4602      	mov	r2, r0
 80034a4:	693b      	ldr	r3, [r7, #16]
 80034a6:	1ad3      	subs	r3, r2, r3
 80034a8:	2b05      	cmp	r3, #5
 80034aa:	d908      	bls.n	80034be <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	2220      	movs	r2, #32
 80034b0:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	2203      	movs	r2, #3
 80034b6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80034ba:	2303      	movs	r3, #3
 80034bc:	e078      	b.n	80035b0 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	f003 0301 	and.w	r3, r3, #1
 80034c8:	2b00      	cmp	r3, #0
 80034ca:	d1e8      	bne.n	800349e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80034d4:	697a      	ldr	r2, [r7, #20]
 80034d6:	4b38      	ldr	r3, [pc, #224]	; (80035b8 <HAL_DMA_Init+0x158>)
 80034d8:	4013      	ands	r3, r2
 80034da:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	685a      	ldr	r2, [r3, #4]
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	689b      	ldr	r3, [r3, #8]
 80034e4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80034ea:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	691b      	ldr	r3, [r3, #16]
 80034f0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80034f6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	699b      	ldr	r3, [r3, #24]
 80034fc:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003502:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	6a1b      	ldr	r3, [r3, #32]
 8003508:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800350a:	697a      	ldr	r2, [r7, #20]
 800350c:	4313      	orrs	r3, r2
 800350e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003514:	2b04      	cmp	r3, #4
 8003516:	d107      	bne.n	8003528 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003520:	4313      	orrs	r3, r2
 8003522:	697a      	ldr	r2, [r7, #20]
 8003524:	4313      	orrs	r3, r2
 8003526:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	697a      	ldr	r2, [r7, #20]
 800352e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	695b      	ldr	r3, [r3, #20]
 8003536:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003538:	697b      	ldr	r3, [r7, #20]
 800353a:	f023 0307 	bic.w	r3, r3, #7
 800353e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003544:	697a      	ldr	r2, [r7, #20]
 8003546:	4313      	orrs	r3, r2
 8003548:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800354e:	2b04      	cmp	r3, #4
 8003550:	d117      	bne.n	8003582 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003556:	697a      	ldr	r2, [r7, #20]
 8003558:	4313      	orrs	r3, r2
 800355a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003560:	2b00      	cmp	r3, #0
 8003562:	d00e      	beq.n	8003582 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003564:	6878      	ldr	r0, [r7, #4]
 8003566:	f000 f8bd 	bl	80036e4 <DMA_CheckFifoParam>
 800356a:	4603      	mov	r3, r0
 800356c:	2b00      	cmp	r3, #0
 800356e:	d008      	beq.n	8003582 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	2240      	movs	r2, #64	; 0x40
 8003574:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	2201      	movs	r2, #1
 800357a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800357e:	2301      	movs	r3, #1
 8003580:	e016      	b.n	80035b0 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	697a      	ldr	r2, [r7, #20]
 8003588:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800358a:	6878      	ldr	r0, [r7, #4]
 800358c:	f000 f874 	bl	8003678 <DMA_CalcBaseAndBitshift>
 8003590:	4603      	mov	r3, r0
 8003592:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003598:	223f      	movs	r2, #63	; 0x3f
 800359a:	409a      	lsls	r2, r3
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	2200      	movs	r2, #0
 80035a4:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	2201      	movs	r2, #1
 80035aa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80035ae:	2300      	movs	r3, #0
}
 80035b0:	4618      	mov	r0, r3
 80035b2:	3718      	adds	r7, #24
 80035b4:	46bd      	mov	sp, r7
 80035b6:	bd80      	pop	{r7, pc}
 80035b8:	f010803f 	.word	0xf010803f

080035bc <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 80035bc:	b580      	push	{r7, lr}
 80035be:	b084      	sub	sp, #16
 80035c0:	af00      	add	r7, sp, #0
 80035c2:	6078      	str	r0, [r7, #4]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	d101      	bne.n	80035ce <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 80035ca:	2301      	movs	r3, #1
 80035cc:	e050      	b.n	8003670 <HAL_DMA_DeInit+0xb4>
  }
  
  /* Check the DMA peripheral state */
  if(hdma->State == HAL_DMA_STATE_BUSY)
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80035d4:	b2db      	uxtb	r3, r3
 80035d6:	2b02      	cmp	r3, #2
 80035d8:	d101      	bne.n	80035de <HAL_DMA_DeInit+0x22>
  {
    /* Return error status */
    return HAL_BUSY;
 80035da:	2302      	movs	r3, #2
 80035dc:	e048      	b.n	8003670 <HAL_DMA_DeInit+0xb4>

  /* Check the parameters */
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Streamx */
  __HAL_DMA_DISABLE(hdma);
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	687a      	ldr	r2, [r7, #4]
 80035e4:	6812      	ldr	r2, [r2, #0]
 80035e6:	6812      	ldr	r2, [r2, #0]
 80035e8:	f022 0201 	bic.w	r2, r2, #1
 80035ec:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx control register */
  hdma->Instance->CR   = 0U;
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	2200      	movs	r2, #0
 80035f4:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx number of data to transfer register */
  hdma->Instance->NDTR = 0U;
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	2200      	movs	r2, #0
 80035fc:	605a      	str	r2, [r3, #4]

  /* Reset DMA Streamx peripheral address register */
  hdma->Instance->PAR  = 0U;
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	2200      	movs	r2, #0
 8003604:	609a      	str	r2, [r3, #8]

  /* Reset DMA Streamx memory 0 address register */
  hdma->Instance->M0AR = 0U;
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	2200      	movs	r2, #0
 800360c:	60da      	str	r2, [r3, #12]
  
  /* Reset DMA Streamx memory 1 address register */
  hdma->Instance->M1AR = 0U;
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	2200      	movs	r2, #0
 8003614:	611a      	str	r2, [r3, #16]
  
  /* Reset DMA Streamx FIFO control register */
  hdma->Instance->FCR  = (uint32_t)0x00000021U;
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	2221      	movs	r2, #33	; 0x21
 800361c:	615a      	str	r2, [r3, #20]
  
  /* Get DMA steam Base Address */  
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800361e:	6878      	ldr	r0, [r7, #4]
 8003620:	f000 f82a 	bl	8003678 <DMA_CalcBaseAndBitshift>
 8003624:	4603      	mov	r3, r0
 8003626:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags at correct offset within the register */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800362c:	223f      	movs	r2, #63	; 0x3f
 800362e:	409a      	lsls	r2, r3
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	609a      	str	r2, [r3, #8]
  
  /* Clean all callbacks */
  hdma->XferCpltCallback = NULL;
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	2200      	movs	r2, #0
 8003638:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma->XferHalfCpltCallback = NULL;
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	2200      	movs	r2, #0
 800363e:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->XferM1CpltCallback = NULL;
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	2200      	movs	r2, #0
 8003644:	645a      	str	r2, [r3, #68]	; 0x44
  hdma->XferM1HalfCpltCallback = NULL;
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	2200      	movs	r2, #0
 800364a:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->XferErrorCallback = NULL;
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	2200      	movs	r2, #0
 8003650:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->XferAbortCallback = NULL;  
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	2200      	movs	r2, #0
 8003656:	651a      	str	r2, [r3, #80]	; 0x50

  /* Reset the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	2200      	movs	r2, #0
 800365c:	655a      	str	r2, [r3, #84]	; 0x54

  /* Reset the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	2200      	movs	r2, #0
 8003662:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	2200      	movs	r2, #0
 800366a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800366e:	2300      	movs	r3, #0
}
 8003670:	4618      	mov	r0, r3
 8003672:	3710      	adds	r7, #16
 8003674:	46bd      	mov	sp, r7
 8003676:	bd80      	pop	{r7, pc}

08003678 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003678:	b480      	push	{r7}
 800367a:	b085      	sub	sp, #20
 800367c:	af00      	add	r7, sp, #0
 800367e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	b2db      	uxtb	r3, r3
 8003686:	3b10      	subs	r3, #16
 8003688:	4a13      	ldr	r2, [pc, #76]	; (80036d8 <DMA_CalcBaseAndBitshift+0x60>)
 800368a:	fba2 2303 	umull	r2, r3, r2, r3
 800368e:	091b      	lsrs	r3, r3, #4
 8003690:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8003692:	4a12      	ldr	r2, [pc, #72]	; (80036dc <DMA_CalcBaseAndBitshift+0x64>)
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	4413      	add	r3, r2
 8003698:	781b      	ldrb	r3, [r3, #0]
 800369a:	461a      	mov	r2, r3
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	2b03      	cmp	r3, #3
 80036a4:	d908      	bls.n	80036b8 <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	461a      	mov	r2, r3
 80036ac:	4b0c      	ldr	r3, [pc, #48]	; (80036e0 <DMA_CalcBaseAndBitshift+0x68>)
 80036ae:	4013      	ands	r3, r2
 80036b0:	1d1a      	adds	r2, r3, #4
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	659a      	str	r2, [r3, #88]	; 0x58
 80036b6:	e006      	b.n	80036c6 <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	461a      	mov	r2, r3
 80036be:	4b08      	ldr	r3, [pc, #32]	; (80036e0 <DMA_CalcBaseAndBitshift+0x68>)
 80036c0:	4013      	ands	r3, r2
 80036c2:	687a      	ldr	r2, [r7, #4]
 80036c4:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80036ca:	4618      	mov	r0, r3
 80036cc:	3714      	adds	r7, #20
 80036ce:	46bd      	mov	sp, r7
 80036d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036d4:	4770      	bx	lr
 80036d6:	bf00      	nop
 80036d8:	aaaaaaab 	.word	0xaaaaaaab
 80036dc:	0800c088 	.word	0x0800c088
 80036e0:	fffffc00 	.word	0xfffffc00

080036e4 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80036e4:	b480      	push	{r7}
 80036e6:	b085      	sub	sp, #20
 80036e8:	af00      	add	r7, sp, #0
 80036ea:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80036ec:	2300      	movs	r3, #0
 80036ee:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036f4:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	699b      	ldr	r3, [r3, #24]
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	d11f      	bne.n	800373e <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80036fe:	68bb      	ldr	r3, [r7, #8]
 8003700:	2b03      	cmp	r3, #3
 8003702:	d855      	bhi.n	80037b0 <DMA_CheckFifoParam+0xcc>
 8003704:	a201      	add	r2, pc, #4	; (adr r2, 800370c <DMA_CheckFifoParam+0x28>)
 8003706:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800370a:	bf00      	nop
 800370c:	0800371d 	.word	0x0800371d
 8003710:	0800372f 	.word	0x0800372f
 8003714:	0800371d 	.word	0x0800371d
 8003718:	080037b1 	.word	0x080037b1
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003720:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003724:	2b00      	cmp	r3, #0
 8003726:	d045      	beq.n	80037b4 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 8003728:	2301      	movs	r3, #1
 800372a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800372c:	e042      	b.n	80037b4 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003732:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003736:	d13f      	bne.n	80037b8 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 8003738:	2301      	movs	r3, #1
 800373a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800373c:	e03c      	b.n	80037b8 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	699b      	ldr	r3, [r3, #24]
 8003742:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003746:	d121      	bne.n	800378c <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8003748:	68bb      	ldr	r3, [r7, #8]
 800374a:	2b03      	cmp	r3, #3
 800374c:	d836      	bhi.n	80037bc <DMA_CheckFifoParam+0xd8>
 800374e:	a201      	add	r2, pc, #4	; (adr r2, 8003754 <DMA_CheckFifoParam+0x70>)
 8003750:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003754:	08003765 	.word	0x08003765
 8003758:	0800376b 	.word	0x0800376b
 800375c:	08003765 	.word	0x08003765
 8003760:	0800377d 	.word	0x0800377d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003764:	2301      	movs	r3, #1
 8003766:	73fb      	strb	r3, [r7, #15]
      break;
 8003768:	e02f      	b.n	80037ca <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800376e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003772:	2b00      	cmp	r3, #0
 8003774:	d024      	beq.n	80037c0 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 8003776:	2301      	movs	r3, #1
 8003778:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800377a:	e021      	b.n	80037c0 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003780:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003784:	d11e      	bne.n	80037c4 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 8003786:	2301      	movs	r3, #1
 8003788:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800378a:	e01b      	b.n	80037c4 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800378c:	68bb      	ldr	r3, [r7, #8]
 800378e:	2b02      	cmp	r3, #2
 8003790:	d902      	bls.n	8003798 <DMA_CheckFifoParam+0xb4>
 8003792:	2b03      	cmp	r3, #3
 8003794:	d003      	beq.n	800379e <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003796:	e018      	b.n	80037ca <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 8003798:	2301      	movs	r3, #1
 800379a:	73fb      	strb	r3, [r7, #15]
      break;
 800379c:	e015      	b.n	80037ca <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037a2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	d00e      	beq.n	80037c8 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 80037aa:	2301      	movs	r3, #1
 80037ac:	73fb      	strb	r3, [r7, #15]
      break;
 80037ae:	e00b      	b.n	80037c8 <DMA_CheckFifoParam+0xe4>
      break;
 80037b0:	bf00      	nop
 80037b2:	e00a      	b.n	80037ca <DMA_CheckFifoParam+0xe6>
      break;
 80037b4:	bf00      	nop
 80037b6:	e008      	b.n	80037ca <DMA_CheckFifoParam+0xe6>
      break;
 80037b8:	bf00      	nop
 80037ba:	e006      	b.n	80037ca <DMA_CheckFifoParam+0xe6>
      break;
 80037bc:	bf00      	nop
 80037be:	e004      	b.n	80037ca <DMA_CheckFifoParam+0xe6>
      break;
 80037c0:	bf00      	nop
 80037c2:	e002      	b.n	80037ca <DMA_CheckFifoParam+0xe6>
      break;   
 80037c4:	bf00      	nop
 80037c6:	e000      	b.n	80037ca <DMA_CheckFifoParam+0xe6>
      break;
 80037c8:	bf00      	nop
    }
  } 
  
  return status; 
 80037ca:	7bfb      	ldrb	r3, [r7, #15]
}
 80037cc:	4618      	mov	r0, r3
 80037ce:	3714      	adds	r7, #20
 80037d0:	46bd      	mov	sp, r7
 80037d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037d6:	4770      	bx	lr

080037d8 <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{ 
 80037d8:	b580      	push	{r7, lr}
 80037da:	b082      	sub	sp, #8
 80037dc:	af00      	add	r7, sp, #0
 80037de:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if(hdma2d == NULL)
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	d101      	bne.n	80037ea <HAL_DMA2D_Init+0x12>
  {
     return HAL_ERROR;
 80037e6:	2301      	movs	r3, #1
 80037e8:	e039      	b.n	800385e <HAL_DMA2D_Init+0x86>
  assert_param(IS_DMA2D_ALL_INSTANCE(hdma2d->Instance));
  assert_param(IS_DMA2D_MODE(hdma2d->Init.Mode));
  assert_param(IS_DMA2D_CMODE(hdma2d->Init.ColorMode));
  assert_param(IS_DMA2D_OFFSET(hdma2d->Init.OutputOffset));

  if(hdma2d->State == HAL_DMA2D_STATE_RESET)
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80037f0:	b2db      	uxtb	r3, r3
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	d106      	bne.n	8003804 <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	2200      	movs	r2, #0
 80037fa:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 80037fe:	6878      	ldr	r0, [r7, #4]
 8003800:	f006 f934 	bl	8009a6c <HAL_DMA2D_MspInit>
  }
  
  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;  
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	2202      	movs	r2, #2
 8003808:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	687a      	ldr	r2, [r7, #4]
 8003812:	6812      	ldr	r2, [r2, #0]
 8003814:	6812      	ldr	r2, [r2, #0]
 8003816:	f422 3140 	bic.w	r1, r2, #196608	; 0x30000
 800381a:	687a      	ldr	r2, [r7, #4]
 800381c:	6852      	ldr	r2, [r2, #4]
 800381e:	430a      	orrs	r2, r1
 8003820:	601a      	str	r2, [r3, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	687a      	ldr	r2, [r7, #4]
 8003828:	6812      	ldr	r2, [r2, #0]
 800382a:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800382c:	f022 0107 	bic.w	r1, r2, #7
 8003830:	687a      	ldr	r2, [r7, #4]
 8003832:	6892      	ldr	r2, [r2, #8]
 8003834:	430a      	orrs	r2, r1
 8003836:	635a      	str	r2, [r3, #52]	; 0x34

  /* DMA2D OOR register configuration ------------------------------------------*/  
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);  
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	681a      	ldr	r2, [r3, #0]
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8003842:	4b09      	ldr	r3, [pc, #36]	; (8003868 <HAL_DMA2D_Init+0x90>)
 8003844:	400b      	ands	r3, r1
 8003846:	6879      	ldr	r1, [r7, #4]
 8003848:	68c9      	ldr	r1, [r1, #12]
 800384a:	430b      	orrs	r3, r1
 800384c:	6413      	str	r3, [r2, #64]	; 0x40
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_RBS,(hdma2d->Init.RedBlueSwap << DMA2D_OPFCCR_RBS_Pos));
#endif /* DMA2D_OPFCCR_RBS */
  

  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	2200      	movs	r2, #0
 8003852:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	2201      	movs	r2, #1
 8003858:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  return HAL_OK;
 800385c:	2300      	movs	r3, #0
}
 800385e:	4618      	mov	r0, r3
 8003860:	3708      	adds	r7, #8
 8003862:	46bd      	mov	sp, r7
 8003864:	bd80      	pop	{r7, pc}
 8003866:	bf00      	nop
 8003868:	ffffc000 	.word	0xffffc000

0800386c <HAL_DMA2D_Start>:
  * @param  Width      The width of data to be transferred from source to destination (expressed in number of pixels per line).
  * @param  Height     The height of data to be transferred from source to destination (expressed in number of lines).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Start(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,  uint32_t Height)
{
 800386c:	b580      	push	{r7, lr}
 800386e:	b086      	sub	sp, #24
 8003870:	af02      	add	r7, sp, #8
 8003872:	60f8      	str	r0, [r7, #12]
 8003874:	60b9      	str	r1, [r7, #8]
 8003876:	607a      	str	r2, [r7, #4]
 8003878:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DMA2D_LINE(Height));
  assert_param(IS_DMA2D_PIXEL(Width));
  
  /* Process locked */
  __HAL_LOCK(hdma2d);
 800387a:	68fb      	ldr	r3, [r7, #12]
 800387c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003880:	2b01      	cmp	r3, #1
 8003882:	d101      	bne.n	8003888 <HAL_DMA2D_Start+0x1c>
 8003884:	2302      	movs	r3, #2
 8003886:	e018      	b.n	80038ba <HAL_DMA2D_Start+0x4e>
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	2201      	movs	r2, #1
 800388c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	2202      	movs	r2, #2
 8003894:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  
  /* Configure the source, destination address and the data size */
  DMA2D_SetConfig(hdma2d, pdata, DstAddress, Width, Height);
 8003898:	69bb      	ldr	r3, [r7, #24]
 800389a:	9300      	str	r3, [sp, #0]
 800389c:	683b      	ldr	r3, [r7, #0]
 800389e:	687a      	ldr	r2, [r7, #4]
 80038a0:	68b9      	ldr	r1, [r7, #8]
 80038a2:	68f8      	ldr	r0, [r7, #12]
 80038a4:	f000 fa9a 	bl	8003ddc <DMA2D_SetConfig>

  /* Enable the Peripheral */
  __HAL_DMA2D_ENABLE(hdma2d);
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	68fa      	ldr	r2, [r7, #12]
 80038ae:	6812      	ldr	r2, [r2, #0]
 80038b0:	6812      	ldr	r2, [r2, #0]
 80038b2:	f042 0201 	orr.w	r2, r2, #1
 80038b6:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 80038b8:	2300      	movs	r3, #0
}
 80038ba:	4618      	mov	r0, r3
 80038bc:	3710      	adds	r7, #16
 80038be:	46bd      	mov	sp, r7
 80038c0:	bd80      	pop	{r7, pc}

080038c2 <HAL_DMA2D_PollForTransfer>:
  *                 the configuration information for the DMA2D. 
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_PollForTransfer(DMA2D_HandleTypeDef *hdma2d, uint32_t Timeout)
{
 80038c2:	b580      	push	{r7, lr}
 80038c4:	b084      	sub	sp, #16
 80038c6:	af00      	add	r7, sp, #0
 80038c8:	6078      	str	r0, [r7, #4]
 80038ca:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 80038cc:	2300      	movs	r3, #0
 80038ce:	60fb      	str	r3, [r7, #12]
  __IO uint32_t isrflags = 0x0;  
 80038d0:	2300      	movs	r3, #0
 80038d2:	60bb      	str	r3, [r7, #8]

  /* Polling for DMA2D transfer */
  if((hdma2d->Instance->CR & DMA2D_CR_START) != RESET)
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	f003 0301 	and.w	r3, r3, #1
 80038de:	2b00      	cmp	r3, #0
 80038e0:	d056      	beq.n	8003990 <HAL_DMA2D_PollForTransfer+0xce>
  {
   /* Get tick */
   tickstart = HAL_GetTick();
 80038e2:	f7ff fb7b 	bl	8002fdc <HAL_GetTick>
 80038e6:	60f8      	str	r0, [r7, #12]

    while(__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == RESET)
 80038e8:	e04b      	b.n	8003982 <HAL_DMA2D_PollForTransfer+0xc0>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR); 
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	685b      	ldr	r3, [r3, #4]
 80038f0:	60bb      	str	r3, [r7, #8]
      if ((isrflags & (DMA2D_FLAG_CE|DMA2D_FLAG_TE)) != RESET)
 80038f2:	68bb      	ldr	r3, [r7, #8]
 80038f4:	f003 0321 	and.w	r3, r3, #33	; 0x21
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	d023      	beq.n	8003944 <HAL_DMA2D_PollForTransfer+0x82>
      {
        if ((isrflags & DMA2D_FLAG_CE) != RESET)
 80038fc:	68bb      	ldr	r3, [r7, #8]
 80038fe:	f003 0320 	and.w	r3, r3, #32
 8003902:	2b00      	cmp	r3, #0
 8003904:	d005      	beq.n	8003912 <HAL_DMA2D_PollForTransfer+0x50>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;        
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800390a:	f043 0202 	orr.w	r2, r3, #2
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_TE) != RESET)        
 8003912:	68bb      	ldr	r3, [r7, #8]
 8003914:	f003 0301 	and.w	r3, r3, #1
 8003918:	2b00      	cmp	r3, #0
 800391a:	d005      	beq.n	8003928 <HAL_DMA2D_PollForTransfer+0x66>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;        
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003920:	f043 0201 	orr.w	r2, r3, #1
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        /* Clear the transfer and configuration error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	2221      	movs	r2, #33	; 0x21
 800392e:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	2204      	movs	r2, #4
 8003934:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	2200      	movs	r2, #0
 800393c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
        
        return HAL_ERROR;
 8003940:	2301      	movs	r3, #1
 8003942:	e0a2      	b.n	8003a8a <HAL_DMA2D_PollForTransfer+0x1c8>
      }
      /* Check for the Timeout */
      if(Timeout != HAL_MAX_DELAY)
 8003944:	683b      	ldr	r3, [r7, #0]
 8003946:	f1b3 3fff 	cmp.w	r3, #4294967295
 800394a:	d01a      	beq.n	8003982 <HAL_DMA2D_PollForTransfer+0xc0>
      {
        if((Timeout == 0)||((HAL_GetTick() - tickstart ) > Timeout))
 800394c:	683b      	ldr	r3, [r7, #0]
 800394e:	2b00      	cmp	r3, #0
 8003950:	d007      	beq.n	8003962 <HAL_DMA2D_PollForTransfer+0xa0>
 8003952:	f7ff fb43 	bl	8002fdc <HAL_GetTick>
 8003956:	4602      	mov	r2, r0
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	1ad2      	subs	r2, r2, r3
 800395c:	683b      	ldr	r3, [r7, #0]
 800395e:	429a      	cmp	r2, r3
 8003960:	d90f      	bls.n	8003982 <HAL_DMA2D_PollForTransfer+0xc0>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003966:	f043 0220 	orr.w	r2, r3, #32
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	63da      	str	r2, [r3, #60]	; 0x3c

          /* Change the DMA2D state */
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	2203      	movs	r2, #3
 8003972:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
         
          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	2200      	movs	r2, #0
 800397a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
           
          return HAL_TIMEOUT;
 800397e:	2303      	movs	r3, #3
 8003980:	e083      	b.n	8003a8a <HAL_DMA2D_PollForTransfer+0x1c8>
    while(__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == RESET)
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	685b      	ldr	r3, [r3, #4]
 8003988:	f003 0302 	and.w	r3, r3, #2
 800398c:	2b00      	cmp	r3, #0
 800398e:	d0ac      	beq.n	80038ea <HAL_DMA2D_PollForTransfer+0x28>
        }
      }        
    }
  }
  /* Polling for CLUT loading (foreground or background) */
  if (((hdma2d->Instance->FGPFCCR & DMA2D_FGPFCCR_START) != RESET)  || 
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	69db      	ldr	r3, [r3, #28]
 8003996:	f003 0320 	and.w	r3, r3, #32
 800399a:	2b00      	cmp	r3, #0
 800399c:	d106      	bne.n	80039ac <HAL_DMA2D_PollForTransfer+0xea>
      ((hdma2d->Instance->BGPFCCR & DMA2D_BGPFCCR_START) != RESET))
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039a4:	f003 0320 	and.w	r3, r3, #32
  if (((hdma2d->Instance->FGPFCCR & DMA2D_FGPFCCR_START) != RESET)  || 
 80039a8:	2b00      	cmp	r3, #0
 80039aa:	d061      	beq.n	8003a70 <HAL_DMA2D_PollForTransfer+0x1ae>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 80039ac:	f7ff fb16 	bl	8002fdc <HAL_GetTick>
 80039b0:	60f8      	str	r0, [r7, #12]
   
    while(__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == RESET)
 80039b2:	e056      	b.n	8003a62 <HAL_DMA2D_PollForTransfer+0x1a0>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);   
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	685b      	ldr	r3, [r3, #4]
 80039ba:	60bb      	str	r3, [r7, #8]
      if ((isrflags & (DMA2D_FLAG_CAE|DMA2D_FLAG_CE|DMA2D_FLAG_TE)) != RESET)        
 80039bc:	68bb      	ldr	r3, [r7, #8]
 80039be:	f003 0329 	and.w	r3, r3, #41	; 0x29
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	d02e      	beq.n	8003a24 <HAL_DMA2D_PollForTransfer+0x162>
      {      
        if ((isrflags & DMA2D_FLAG_CAE) != RESET)
 80039c6:	68bb      	ldr	r3, [r7, #8]
 80039c8:	f003 0308 	and.w	r3, r3, #8
 80039cc:	2b00      	cmp	r3, #0
 80039ce:	d005      	beq.n	80039dc <HAL_DMA2D_PollForTransfer+0x11a>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;        
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80039d4:	f043 0204 	orr.w	r2, r3, #4
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	63da      	str	r2, [r3, #60]	; 0x3c
        }   
        if ((isrflags & DMA2D_FLAG_CE) != RESET)             
 80039dc:	68bb      	ldr	r3, [r7, #8]
 80039de:	f003 0320 	and.w	r3, r3, #32
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	d005      	beq.n	80039f2 <HAL_DMA2D_PollForTransfer+0x130>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;        
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80039ea:	f043 0202 	orr.w	r2, r3, #2
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_TE) != RESET)        
 80039f2:	68bb      	ldr	r3, [r7, #8]
 80039f4:	f003 0301 	and.w	r3, r3, #1
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	d005      	beq.n	8003a08 <HAL_DMA2D_PollForTransfer+0x146>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;        
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a00:	f043 0201 	orr.w	r2, r3, #1
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        /* Clear the CLUT Access Error, Configuration Error and Transfer Error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	2229      	movs	r2, #41	; 0x29
 8003a0e:	609a      	str	r2, [r3, #8]
        
        /* Change DMA2D state */
        hdma2d->State= HAL_DMA2D_STATE_ERROR;
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	2204      	movs	r2, #4
 8003a14:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        
        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	2200      	movs	r2, #0
 8003a1c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
          
        return HAL_ERROR;      
 8003a20:	2301      	movs	r3, #1
 8003a22:	e032      	b.n	8003a8a <HAL_DMA2D_PollForTransfer+0x1c8>
      }      
      /* Check for the Timeout */
      if(Timeout != HAL_MAX_DELAY)
 8003a24:	683b      	ldr	r3, [r7, #0]
 8003a26:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a2a:	d01a      	beq.n	8003a62 <HAL_DMA2D_PollForTransfer+0x1a0>
      {
        if((Timeout == 0)||((HAL_GetTick() - tickstart ) > Timeout))
 8003a2c:	683b      	ldr	r3, [r7, #0]
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	d007      	beq.n	8003a42 <HAL_DMA2D_PollForTransfer+0x180>
 8003a32:	f7ff fad3 	bl	8002fdc <HAL_GetTick>
 8003a36:	4602      	mov	r2, r0
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	1ad2      	subs	r2, r2, r3
 8003a3c:	683b      	ldr	r3, [r7, #0]
 8003a3e:	429a      	cmp	r2, r3
 8003a40:	d90f      	bls.n	8003a62 <HAL_DMA2D_PollForTransfer+0x1a0>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a46:	f043 0220 	orr.w	r2, r3, #32
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	63da      	str	r2, [r3, #60]	; 0x3c
    
          /* Change the DMA2D state */
          hdma2d->State= HAL_DMA2D_STATE_TIMEOUT;
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	2203      	movs	r2, #3
 8003a52:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        
          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	2200      	movs	r2, #0
 8003a5a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
                    
          return HAL_TIMEOUT;
 8003a5e:	2303      	movs	r3, #3
 8003a60:	e013      	b.n	8003a8a <HAL_DMA2D_PollForTransfer+0x1c8>
    while(__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == RESET)
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	685b      	ldr	r3, [r3, #4]
 8003a68:	f003 0310 	and.w	r3, r3, #16
 8003a6c:	2b00      	cmp	r3, #0
 8003a6e:	d0a1      	beq.n	80039b4 <HAL_DMA2D_PollForTransfer+0xf2>
      }      
    }
  }

  /* Clear the transfer complete and CLUT loading flags */
  __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC|DMA2D_FLAG_CTC);
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	2212      	movs	r2, #18
 8003a76:	609a      	str	r2, [r3, #8]
  
  /* Change DMA2D state */
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	2201      	movs	r2, #1
 8003a7c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  
  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	2200      	movs	r2, #0
 8003a84:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  
  return HAL_OK;
 8003a88:	2300      	movs	r3, #0
}
 8003a8a:	4618      	mov	r0, r3
 8003a8c:	3710      	adds	r7, #16
 8003a8e:	46bd      	mov	sp, r7
 8003a90:	bd80      	pop	{r7, pc}

08003a92 <HAL_DMA2D_IRQHandler>:
  * @param  hdma2d Pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.  
  * @retval HAL status
  */
void HAL_DMA2D_IRQHandler(DMA2D_HandleTypeDef *hdma2d)
{
 8003a92:	b580      	push	{r7, lr}
 8003a94:	b084      	sub	sp, #16
 8003a96:	af00      	add	r7, sp, #0
 8003a98:	6078      	str	r0, [r7, #4]
  uint32_t isrflags = READ_REG(hdma2d->Instance->ISR);
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	685b      	ldr	r3, [r3, #4]
 8003aa0:	60fb      	str	r3, [r7, #12]
  uint32_t crflags = READ_REG(hdma2d->Instance->CR);
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	60bb      	str	r3, [r7, #8]
        
  /* Transfer Error Interrupt management ***************************************/
  if ((isrflags & DMA2D_FLAG_TE) != RESET)
 8003aaa:	68fb      	ldr	r3, [r7, #12]
 8003aac:	f003 0301 	and.w	r3, r3, #1
 8003ab0:	2b00      	cmp	r3, #0
 8003ab2:	d026      	beq.n	8003b02 <HAL_DMA2D_IRQHandler+0x70>
  {
    if ((crflags & DMA2D_IT_TE) != RESET)    
 8003ab4:	68bb      	ldr	r3, [r7, #8]
 8003ab6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	d021      	beq.n	8003b02 <HAL_DMA2D_IRQHandler+0x70>
    {
      /* Disable the transfer Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TE);  
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	687a      	ldr	r2, [r7, #4]
 8003ac4:	6812      	ldr	r2, [r2, #0]
 8003ac6:	6812      	ldr	r2, [r2, #0]
 8003ac8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003acc:	601a      	str	r2, [r3, #0]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ad2:	f043 0201 	orr.w	r2, r3, #1
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	63da      	str	r2, [r3, #60]	; 0x3c
    
      /* Clear the transfer error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TE);
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	2201      	movs	r2, #1
 8003ae0:	609a      	str	r2, [r3, #8]

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	2204      	movs	r2, #4
 8003ae6:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);       
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	2200      	movs	r2, #0
 8003aee:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
      
      if(hdma2d->XferErrorCallback != NULL)
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	695b      	ldr	r3, [r3, #20]
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	d003      	beq.n	8003b02 <HAL_DMA2D_IRQHandler+0x70>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	695b      	ldr	r3, [r3, #20]
 8003afe:	6878      	ldr	r0, [r7, #4]
 8003b00:	4798      	blx	r3
      }
    }
  }
  /* Configuration Error Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_CE) != RESET)
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	f003 0320 	and.w	r3, r3, #32
 8003b08:	2b00      	cmp	r3, #0
 8003b0a:	d026      	beq.n	8003b5a <HAL_DMA2D_IRQHandler+0xc8>
  {
    if ((crflags & DMA2D_IT_CE) != RESET)    
 8003b0c:	68bb      	ldr	r3, [r7, #8]
 8003b0e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	d021      	beq.n	8003b5a <HAL_DMA2D_IRQHandler+0xc8>
    {  
      /* Disable the Configuration Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CE);
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	687a      	ldr	r2, [r7, #4]
 8003b1c:	6812      	ldr	r2, [r2, #0]
 8003b1e:	6812      	ldr	r2, [r2, #0]
 8003b20:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003b24:	601a      	str	r2, [r3, #0]
  
      /* Clear the Configuration error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE);
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	2220      	movs	r2, #32
 8003b2c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;    
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b32:	f043 0202 	orr.w	r2, r3, #2
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	63da      	str	r2, [r3, #60]	; 0x3c
    
      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	2204      	movs	r2, #4
 8003b3e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);       
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	2200      	movs	r2, #0
 8003b46:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
      
      if(hdma2d->XferErrorCallback != NULL)
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	695b      	ldr	r3, [r3, #20]
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	d003      	beq.n	8003b5a <HAL_DMA2D_IRQHandler+0xc8>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	695b      	ldr	r3, [r3, #20]
 8003b56:	6878      	ldr	r0, [r7, #4]
 8003b58:	4798      	blx	r3
      }
    }
  }
  /* CLUT access Error Interrupt management ***********************************/
  if ((isrflags & DMA2D_FLAG_CAE) != RESET)
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	f003 0308 	and.w	r3, r3, #8
 8003b60:	2b00      	cmp	r3, #0
 8003b62:	d026      	beq.n	8003bb2 <HAL_DMA2D_IRQHandler+0x120>
  {
    if ((crflags & DMA2D_IT_CAE) != RESET)    
 8003b64:	68bb      	ldr	r3, [r7, #8]
 8003b66:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	d021      	beq.n	8003bb2 <HAL_DMA2D_IRQHandler+0x120>
    {    
      /* Disable the CLUT access error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CAE);
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	687a      	ldr	r2, [r7, #4]
 8003b74:	6812      	ldr	r2, [r2, #0]
 8003b76:	6812      	ldr	r2, [r2, #0]
 8003b78:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003b7c:	601a      	str	r2, [r3, #0]
  
      /* Clear the CLUT access error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE);
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	2208      	movs	r2, #8
 8003b84:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;    
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b8a:	f043 0204 	orr.w	r2, r3, #4
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	63da      	str	r2, [r3, #60]	; 0x3c
    
      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	2204      	movs	r2, #4
 8003b96:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);       
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	2200      	movs	r2, #0
 8003b9e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
      
      if(hdma2d->XferErrorCallback != NULL)
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	695b      	ldr	r3, [r3, #20]
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d003      	beq.n	8003bb2 <HAL_DMA2D_IRQHandler+0x120>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	695b      	ldr	r3, [r3, #20]
 8003bae:	6878      	ldr	r0, [r7, #4]
 8003bb0:	4798      	blx	r3
      }
    }
  }  
  /* Transfer watermark Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_TW) != RESET)
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	f003 0304 	and.w	r3, r3, #4
 8003bb8:	2b00      	cmp	r3, #0
 8003bba:	d013      	beq.n	8003be4 <HAL_DMA2D_IRQHandler+0x152>
  {
    if ((crflags & DMA2D_IT_TW) != RESET)    
 8003bbc:	68bb      	ldr	r3, [r7, #8]
 8003bbe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	d00e      	beq.n	8003be4 <HAL_DMA2D_IRQHandler+0x152>
    {    
      /* Disable the transfer watermark interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TW);
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	687a      	ldr	r2, [r7, #4]
 8003bcc:	6812      	ldr	r2, [r2, #0]
 8003bce:	6812      	ldr	r2, [r2, #0]
 8003bd0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003bd4:	601a      	str	r2, [r3, #0]
  
      /* Clear the transfer watermark flag */  
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TW);
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	2204      	movs	r2, #4
 8003bdc:	609a      	str	r2, [r3, #8]

      /* Transfer watermark Callback */
      HAL_DMA2D_LineEventCallback(hdma2d);
 8003bde:	6878      	ldr	r0, [r7, #4]
 8003be0:	f000 f853 	bl	8003c8a <HAL_DMA2D_LineEventCallback>
    }
  }  
  /* Transfer Complete Interrupt management ************************************/
  if ((isrflags & DMA2D_FLAG_TC) != RESET)
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	f003 0302 	and.w	r3, r3, #2
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	d024      	beq.n	8003c38 <HAL_DMA2D_IRQHandler+0x1a6>
  {
    if ((crflags & DMA2D_IT_TC) != RESET)    
 8003bee:	68bb      	ldr	r3, [r7, #8]
 8003bf0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003bf4:	2b00      	cmp	r3, #0
 8003bf6:	d01f      	beq.n	8003c38 <HAL_DMA2D_IRQHandler+0x1a6>
    {   
      /* Disable the transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TC);
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	687a      	ldr	r2, [r7, #4]
 8003bfe:	6812      	ldr	r2, [r2, #0]
 8003c00:	6812      	ldr	r2, [r2, #0]
 8003c02:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8003c06:	601a      	str	r2, [r3, #0]
  
      /* Clear the transfer complete flag */  
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC);
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	2202      	movs	r2, #2
 8003c0e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;    
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	63da      	str	r2, [r3, #60]	; 0x3c
    
      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	2201      	movs	r2, #1
 8003c1c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
    
      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);       
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	2200      	movs	r2, #0
 8003c24:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
      
      if(hdma2d->XferCpltCallback != NULL)
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	691b      	ldr	r3, [r3, #16]
 8003c2c:	2b00      	cmp	r3, #0
 8003c2e:	d003      	beq.n	8003c38 <HAL_DMA2D_IRQHandler+0x1a6>
      {
        /* Transfer complete Callback */
        hdma2d->XferCpltCallback(hdma2d);
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	691b      	ldr	r3, [r3, #16]
 8003c34:	6878      	ldr	r0, [r7, #4]
 8003c36:	4798      	blx	r3
      }         
    }
  }
  /* CLUT Transfer Complete Interrupt management ******************************/
  if ((isrflags & DMA2D_FLAG_CTC) != RESET)
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	f003 0310 	and.w	r3, r3, #16
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	d01f      	beq.n	8003c82 <HAL_DMA2D_IRQHandler+0x1f0>
  {
    if ((crflags & DMA2D_IT_CTC) != RESET)    
 8003c42:	68bb      	ldr	r3, [r7, #8]
 8003c44:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003c48:	2b00      	cmp	r3, #0
 8003c4a:	d01a      	beq.n	8003c82 <HAL_DMA2D_IRQHandler+0x1f0>
    {    
      /* Disable the CLUT transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC);
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	687a      	ldr	r2, [r7, #4]
 8003c52:	6812      	ldr	r2, [r2, #0]
 8003c54:	6812      	ldr	r2, [r2, #0]
 8003c56:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003c5a:	601a      	str	r2, [r3, #0]
  
      /* Clear the CLUT transfer complete flag */  
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CTC);
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	2210      	movs	r2, #16
 8003c62:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;    
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	63da      	str	r2, [r3, #60]	; 0x3c
    
      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	2201      	movs	r2, #1
 8003c70:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
    
      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);       
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	2200      	movs	r2, #0
 8003c78:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
      
      /* CLUT Transfer complete Callback */
      HAL_DMA2D_CLUTLoadingCpltCallback(hdma2d);         
 8003c7c:	6878      	ldr	r0, [r7, #4]
 8003c7e:	f000 f80e 	bl	8003c9e <HAL_DMA2D_CLUTLoadingCpltCallback>
    }
  }  
  
}
 8003c82:	bf00      	nop
 8003c84:	3710      	adds	r7, #16
 8003c86:	46bd      	mov	sp, r7
 8003c88:	bd80      	pop	{r7, pc}

08003c8a <HAL_DMA2D_LineEventCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_LineEventCallback(DMA2D_HandleTypeDef *hdma2d)
{
 8003c8a:	b480      	push	{r7}
 8003c8c:	b083      	sub	sp, #12
 8003c8e:	af00      	add	r7, sp, #0
 8003c90:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);
  
  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_LineEventCallback can be implemented in the user file.
   */
}
 8003c92:	bf00      	nop
 8003c94:	370c      	adds	r7, #12
 8003c96:	46bd      	mov	sp, r7
 8003c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c9c:	4770      	bx	lr

08003c9e <HAL_DMA2D_CLUTLoadingCpltCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_CLUTLoadingCpltCallback(DMA2D_HandleTypeDef *hdma2d)
{
 8003c9e:	b480      	push	{r7}
 8003ca0:	b083      	sub	sp, #12
 8003ca2:	af00      	add	r7, sp, #0
 8003ca4:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);
  
  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_CLUTLoadingCpltCallback can be implemented in the user file.
   */
} 
 8003ca6:	bf00      	nop
 8003ca8:	370c      	adds	r7, #12
 8003caa:	46bd      	mov	sp, r7
 8003cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cb0:	4770      	bx	lr
	...

08003cb4 <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   0(background) / 1(foreground)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{ 
 8003cb4:	b480      	push	{r7}
 8003cb6:	b087      	sub	sp, #28
 8003cb8:	af00      	add	r7, sp, #0
 8003cba:	6078      	str	r0, [r7, #4]
 8003cbc:	6039      	str	r1, [r7, #0]
  DMA2D_LayerCfgTypeDef *pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 8003cbe:	683b      	ldr	r3, [r7, #0]
 8003cc0:	011b      	lsls	r3, r3, #4
 8003cc2:	3318      	adds	r3, #24
 8003cc4:	687a      	ldr	r2, [r7, #4]
 8003cc6:	4413      	add	r3, r2
 8003cc8:	613b      	str	r3, [r7, #16]
  
  uint32_t regMask = 0, regValue = 0;
 8003cca:	2300      	movs	r3, #0
 8003ccc:	60fb      	str	r3, [r7, #12]
 8003cce:	2300      	movs	r3, #0
 8003cd0:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));  
  assert_param(IS_DMA2D_OFFSET(pLayerCfg->InputOffset));  
  if(hdma2d->Init.Mode != DMA2D_R2M)
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	685b      	ldr	r3, [r3, #4]
 8003cd6:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
      assert_param(IS_DMA2D_ALPHA_MODE(pLayerCfg->AlphaMode));
    }
  }

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003ce0:	2b01      	cmp	r3, #1
 8003ce2:	d101      	bne.n	8003ce8 <HAL_DMA2D_ConfigLayer+0x34>
 8003ce4:	2302      	movs	r3, #2
 8003ce6:	e071      	b.n	8003dcc <HAL_DMA2D_ConfigLayer+0x118>
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	2201      	movs	r2, #1
 8003cec:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  
  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;  
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	2202      	movs	r2, #2
 8003cf4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* DMA2D BGPFCR register configuration -----------------------------------*/
  /* Prepare the value to be written to the BGPFCCR register */
  
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
 8003cf8:	693b      	ldr	r3, [r7, #16]
 8003cfa:	685a      	ldr	r2, [r3, #4]
 8003cfc:	693b      	ldr	r3, [r7, #16]
 8003cfe:	689b      	ldr	r3, [r3, #8]
 8003d00:	041b      	lsls	r3, r3, #16
 8003d02:	4313      	orrs	r3, r2
 8003d04:	617b      	str	r3, [r7, #20]
  regMask  = DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA;
 8003d06:	4b34      	ldr	r3, [pc, #208]	; (8003dd8 <HAL_DMA2D_ConfigLayer+0x124>)
 8003d08:	60fb      	str	r3, [r7, #12]
#if defined (DMA2D_FGPFCCR_RBS) && defined (DMA2D_BGPFCCR_RBS)
  regValue |= (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
  regMask  |= DMA2D_BGPFCCR_RBS;  
#endif  
  
  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8003d0a:	693b      	ldr	r3, [r7, #16]
 8003d0c:	685b      	ldr	r3, [r3, #4]
 8003d0e:	2b0a      	cmp	r3, #10
 8003d10:	d003      	beq.n	8003d1a <HAL_DMA2D_ConfigLayer+0x66>
 8003d12:	693b      	ldr	r3, [r7, #16]
 8003d14:	685b      	ldr	r3, [r3, #4]
 8003d16:	2b09      	cmp	r3, #9
 8003d18:	d107      	bne.n	8003d2a <HAL_DMA2D_ConfigLayer+0x76>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 8003d1a:	693b      	ldr	r3, [r7, #16]
 8003d1c:	68db      	ldr	r3, [r3, #12]
 8003d1e:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8003d22:	697a      	ldr	r2, [r7, #20]
 8003d24:	4313      	orrs	r3, r2
 8003d26:	617b      	str	r3, [r7, #20]
 8003d28:	e005      	b.n	8003d36 <HAL_DMA2D_ConfigLayer+0x82>
  }
  else
  {
    regValue |=  (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 8003d2a:	693b      	ldr	r3, [r7, #16]
 8003d2c:	68db      	ldr	r3, [r3, #12]
 8003d2e:	061b      	lsls	r3, r3, #24
 8003d30:	697a      	ldr	r2, [r7, #20]
 8003d32:	4313      	orrs	r3, r2
 8003d34:	617b      	str	r3, [r7, #20]
  }
  
  /* Configure the background DMA2D layer */
  if(LayerIdx == 0)
 8003d36:	683b      	ldr	r3, [r7, #0]
 8003d38:	2b00      	cmp	r3, #0
 8003d3a:	d11f      	bne.n	8003d7c <HAL_DMA2D_ConfigLayer+0xc8>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	687a      	ldr	r2, [r7, #4]
 8003d42:	6812      	ldr	r2, [r2, #0]
 8003d44:	6a51      	ldr	r1, [r2, #36]	; 0x24
 8003d46:	68fa      	ldr	r2, [r7, #12]
 8003d48:	43d2      	mvns	r2, r2
 8003d4a:	4011      	ands	r1, r2
 8003d4c:	697a      	ldr	r2, [r7, #20]
 8003d4e:	430a      	orrs	r2, r1
 8003d50:	625a      	str	r2, [r3, #36]	; 0x24
              
    /* DMA2D BGOR register configuration -------------------------------------*/  
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	693a      	ldr	r2, [r7, #16]
 8003d58:	6812      	ldr	r2, [r2, #0]
 8003d5a:	619a      	str	r2, [r3, #24]
    
    /* DMA2D BGCOLR register configuration -------------------------------------*/ 
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8003d5c:	693b      	ldr	r3, [r7, #16]
 8003d5e:	685b      	ldr	r3, [r3, #4]
 8003d60:	2b0a      	cmp	r3, #10
 8003d62:	d003      	beq.n	8003d6c <HAL_DMA2D_ConfigLayer+0xb8>
 8003d64:	693b      	ldr	r3, [r7, #16]
 8003d66:	685b      	ldr	r3, [r3, #4]
 8003d68:	2b09      	cmp	r3, #9
 8003d6a:	d126      	bne.n	8003dba <HAL_DMA2D_ConfigLayer+0x106>
    {    
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE|DMA2D_BGCOLR_GREEN|DMA2D_BGCOLR_RED));
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	693a      	ldr	r2, [r7, #16]
 8003d72:	68d2      	ldr	r2, [r2, #12]
 8003d74:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8003d78:	629a      	str	r2, [r3, #40]	; 0x28
 8003d7a:	e01e      	b.n	8003dba <HAL_DMA2D_ConfigLayer+0x106>
  }
  /* Configure the foreground DMA2D layer */
  else
  {
     /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	687a      	ldr	r2, [r7, #4]
 8003d82:	6812      	ldr	r2, [r2, #0]
 8003d84:	69d1      	ldr	r1, [r2, #28]
 8003d86:	68fa      	ldr	r2, [r7, #12]
 8003d88:	43d2      	mvns	r2, r2
 8003d8a:	4011      	ands	r1, r2
 8003d8c:	697a      	ldr	r2, [r7, #20]
 8003d8e:	430a      	orrs	r2, r1
 8003d90:	61da      	str	r2, [r3, #28]
    
    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);      
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	693a      	ldr	r2, [r7, #16]
 8003d98:	6812      	ldr	r2, [r2, #0]
 8003d9a:	611a      	str	r2, [r3, #16]
   
    /* DMA2D FGCOLR register configuration -------------------------------------*/   
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8003d9c:	693b      	ldr	r3, [r7, #16]
 8003d9e:	685b      	ldr	r3, [r3, #4]
 8003da0:	2b0a      	cmp	r3, #10
 8003da2:	d003      	beq.n	8003dac <HAL_DMA2D_ConfigLayer+0xf8>
 8003da4:	693b      	ldr	r3, [r7, #16]
 8003da6:	685b      	ldr	r3, [r3, #4]
 8003da8:	2b09      	cmp	r3, #9
 8003daa:	d106      	bne.n	8003dba <HAL_DMA2D_ConfigLayer+0x106>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE|DMA2D_FGCOLR_GREEN|DMA2D_FGCOLR_RED));      
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	693a      	ldr	r2, [r7, #16]
 8003db2:	68d2      	ldr	r2, [r2, #12]
 8003db4:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8003db8:	621a      	str	r2, [r3, #32]
    }   
  }   
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	2201      	movs	r2, #1
 8003dbe:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  
  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);  
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	2200      	movs	r2, #0
 8003dc6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  
  return HAL_OK;
 8003dca:	2300      	movs	r3, #0
}
 8003dcc:	4618      	mov	r0, r3
 8003dce:	371c      	adds	r7, #28
 8003dd0:	46bd      	mov	sp, r7
 8003dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dd6:	4770      	bx	lr
 8003dd8:	ff03000f 	.word	0xff03000f

08003ddc <DMA2D_SetConfig>:
  * @param  Width      The width of data to be transferred from source to destination.
  * @param  Height     The height of data to be transferred from source to destination.
  * @retval HAL status
  */
static void DMA2D_SetConfig(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width, uint32_t Height)
{  
 8003ddc:	b480      	push	{r7}
 8003dde:	b08b      	sub	sp, #44	; 0x2c
 8003de0:	af00      	add	r7, sp, #0
 8003de2:	60f8      	str	r0, [r7, #12]
 8003de4:	60b9      	str	r1, [r7, #8]
 8003de6:	607a      	str	r2, [r7, #4]
 8003de8:	603b      	str	r3, [r7, #0]
  uint32_t tmp = 0;
 8003dea:	2300      	movs	r3, #0
 8003dec:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t tmp1 = 0;
 8003dee:	2300      	movs	r3, #0
 8003df0:	623b      	str	r3, [r7, #32]
  uint32_t tmp2 = 0;
 8003df2:	2300      	movs	r3, #0
 8003df4:	61fb      	str	r3, [r7, #28]
  uint32_t tmp3 = 0;
 8003df6:	2300      	movs	r3, #0
 8003df8:	61bb      	str	r3, [r7, #24]
  uint32_t tmp4 = 0;
 8003dfa:	2300      	movs	r3, #0
 8003dfc:	617b      	str	r3, [r7, #20]
    
  /* Configure DMA2D data size */
  MODIFY_REG(hdma2d->Instance->NLR, (DMA2D_NLR_NL|DMA2D_NLR_PL), (Height| (Width << DMA2D_NLR_PL_Pos))); 
 8003dfe:	68fb      	ldr	r3, [r7, #12]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	68fa      	ldr	r2, [r7, #12]
 8003e04:	6812      	ldr	r2, [r2, #0]
 8003e06:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8003e08:	f002 4140 	and.w	r1, r2, #3221225472	; 0xc0000000
 8003e0c:	683a      	ldr	r2, [r7, #0]
 8003e0e:	0410      	lsls	r0, r2, #16
 8003e10:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003e12:	4302      	orrs	r2, r0
 8003e14:	430a      	orrs	r2, r1
 8003e16:	645a      	str	r2, [r3, #68]	; 0x44
  
  /* Configure DMA2D destination address */
  WRITE_REG(hdma2d->Instance->OMAR, DstAddress);
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	687a      	ldr	r2, [r7, #4]
 8003e1e:	63da      	str	r2, [r3, #60]	; 0x3c
 
  /* Register to memory DMA2D mode selected */
  if (hdma2d->Init.Mode == DMA2D_R2M)
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	685b      	ldr	r3, [r3, #4]
 8003e24:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003e28:	d174      	bne.n	8003f14 <DMA2D_SetConfig+0x138>
  {    
    tmp1 = pdata & DMA2D_OCOLR_ALPHA_1;
 8003e2a:	68bb      	ldr	r3, [r7, #8]
 8003e2c:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8003e30:	623b      	str	r3, [r7, #32]
    tmp2 = pdata & DMA2D_OCOLR_RED_1;
 8003e32:	68bb      	ldr	r3, [r7, #8]
 8003e34:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8003e38:	61fb      	str	r3, [r7, #28]
    tmp3 = pdata & DMA2D_OCOLR_GREEN_1;
 8003e3a:	68bb      	ldr	r3, [r7, #8]
 8003e3c:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8003e40:	61bb      	str	r3, [r7, #24]
    tmp4 = pdata & DMA2D_OCOLR_BLUE_1;
 8003e42:	68bb      	ldr	r3, [r7, #8]
 8003e44:	b2db      	uxtb	r3, r3
 8003e46:	617b      	str	r3, [r7, #20]
    
    /* Prepare the value to be written to the OCOLR register according to the color mode */
    if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB8888)
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	689b      	ldr	r3, [r3, #8]
 8003e4c:	2b00      	cmp	r3, #0
 8003e4e:	d108      	bne.n	8003e62 <DMA2D_SetConfig+0x86>
    {
      tmp = (tmp3 | tmp2 | tmp1| tmp4);
 8003e50:	69ba      	ldr	r2, [r7, #24]
 8003e52:	69fb      	ldr	r3, [r7, #28]
 8003e54:	431a      	orrs	r2, r3
 8003e56:	6a3b      	ldr	r3, [r7, #32]
 8003e58:	431a      	orrs	r2, r3
 8003e5a:	697b      	ldr	r3, [r7, #20]
 8003e5c:	4313      	orrs	r3, r2
 8003e5e:	627b      	str	r3, [r7, #36]	; 0x24
 8003e60:	e053      	b.n	8003f0a <DMA2D_SetConfig+0x12e>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB888)
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	689b      	ldr	r3, [r3, #8]
 8003e66:	2b01      	cmp	r3, #1
 8003e68:	d106      	bne.n	8003e78 <DMA2D_SetConfig+0x9c>
    {
      tmp = (tmp3 | tmp2 | tmp4);  
 8003e6a:	69ba      	ldr	r2, [r7, #24]
 8003e6c:	69fb      	ldr	r3, [r7, #28]
 8003e6e:	431a      	orrs	r2, r3
 8003e70:	697b      	ldr	r3, [r7, #20]
 8003e72:	4313      	orrs	r3, r2
 8003e74:	627b      	str	r3, [r7, #36]	; 0x24
 8003e76:	e048      	b.n	8003f0a <DMA2D_SetConfig+0x12e>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB565)
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	689b      	ldr	r3, [r3, #8]
 8003e7c:	2b02      	cmp	r3, #2
 8003e7e:	d111      	bne.n	8003ea4 <DMA2D_SetConfig+0xc8>
    {
      tmp2 = (tmp2 >> 19);
 8003e80:	69fb      	ldr	r3, [r7, #28]
 8003e82:	0cdb      	lsrs	r3, r3, #19
 8003e84:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 10);
 8003e86:	69bb      	ldr	r3, [r7, #24]
 8003e88:	0a9b      	lsrs	r3, r3, #10
 8003e8a:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3 );
 8003e8c:	697b      	ldr	r3, [r7, #20]
 8003e8e:	08db      	lsrs	r3, r3, #3
 8003e90:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5) | (tmp2 << 11) | tmp4); 
 8003e92:	69bb      	ldr	r3, [r7, #24]
 8003e94:	015a      	lsls	r2, r3, #5
 8003e96:	69fb      	ldr	r3, [r7, #28]
 8003e98:	02db      	lsls	r3, r3, #11
 8003e9a:	431a      	orrs	r2, r3
 8003e9c:	697b      	ldr	r3, [r7, #20]
 8003e9e:	4313      	orrs	r3, r2
 8003ea0:	627b      	str	r3, [r7, #36]	; 0x24
 8003ea2:	e032      	b.n	8003f0a <DMA2D_SetConfig+0x12e>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB1555)
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	689b      	ldr	r3, [r3, #8]
 8003ea8:	2b03      	cmp	r3, #3
 8003eaa:	d117      	bne.n	8003edc <DMA2D_SetConfig+0x100>
    { 
      tmp1 = (tmp1 >> 31);
 8003eac:	6a3b      	ldr	r3, [r7, #32]
 8003eae:	0fdb      	lsrs	r3, r3, #31
 8003eb0:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 19);
 8003eb2:	69fb      	ldr	r3, [r7, #28]
 8003eb4:	0cdb      	lsrs	r3, r3, #19
 8003eb6:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 11);
 8003eb8:	69bb      	ldr	r3, [r7, #24]
 8003eba:	0adb      	lsrs	r3, r3, #11
 8003ebc:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3 );      
 8003ebe:	697b      	ldr	r3, [r7, #20]
 8003ec0:	08db      	lsrs	r3, r3, #3
 8003ec2:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5) | (tmp2 << 10) | (tmp1 << 15) | tmp4);    
 8003ec4:	69bb      	ldr	r3, [r7, #24]
 8003ec6:	015a      	lsls	r2, r3, #5
 8003ec8:	69fb      	ldr	r3, [r7, #28]
 8003eca:	029b      	lsls	r3, r3, #10
 8003ecc:	431a      	orrs	r2, r3
 8003ece:	6a3b      	ldr	r3, [r7, #32]
 8003ed0:	03db      	lsls	r3, r3, #15
 8003ed2:	431a      	orrs	r2, r3
 8003ed4:	697b      	ldr	r3, [r7, #20]
 8003ed6:	4313      	orrs	r3, r2
 8003ed8:	627b      	str	r3, [r7, #36]	; 0x24
 8003eda:	e016      	b.n	8003f0a <DMA2D_SetConfig+0x12e>
    } 
    else /* Dhdma2d->Init.ColorMode = DMA2D_OUTPUT_ARGB4444 */
    {
      tmp1 = (tmp1 >> 28);
 8003edc:	6a3b      	ldr	r3, [r7, #32]
 8003ede:	0f1b      	lsrs	r3, r3, #28
 8003ee0:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 20);
 8003ee2:	69fb      	ldr	r3, [r7, #28]
 8003ee4:	0d1b      	lsrs	r3, r3, #20
 8003ee6:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 12);
 8003ee8:	69bb      	ldr	r3, [r7, #24]
 8003eea:	0b1b      	lsrs	r3, r3, #12
 8003eec:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 4 );
 8003eee:	697b      	ldr	r3, [r7, #20]
 8003ef0:	091b      	lsrs	r3, r3, #4
 8003ef2:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 4) | (tmp2 << 8) | (tmp1 << 12) | tmp4);
 8003ef4:	69bb      	ldr	r3, [r7, #24]
 8003ef6:	011a      	lsls	r2, r3, #4
 8003ef8:	69fb      	ldr	r3, [r7, #28]
 8003efa:	021b      	lsls	r3, r3, #8
 8003efc:	431a      	orrs	r2, r3
 8003efe:	6a3b      	ldr	r3, [r7, #32]
 8003f00:	031b      	lsls	r3, r3, #12
 8003f02:	431a      	orrs	r2, r3
 8003f04:	697b      	ldr	r3, [r7, #20]
 8003f06:	4313      	orrs	r3, r2
 8003f08:	627b      	str	r3, [r7, #36]	; 0x24
    }    
    /* Write to DMA2D OCOLR register */
    WRITE_REG(hdma2d->Instance->OCOLR, tmp);    
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003f10:	639a      	str	r2, [r3, #56]	; 0x38
  else /* M2M, M2M_PFC or M2M_Blending DMA2D Mode */
  {
    /* Configure DMA2D source address */
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
  }
}
 8003f12:	e003      	b.n	8003f1c <DMA2D_SetConfig+0x140>
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	68ba      	ldr	r2, [r7, #8]
 8003f1a:	60da      	str	r2, [r3, #12]
}
 8003f1c:	bf00      	nop
 8003f1e:	372c      	adds	r7, #44	; 0x2c
 8003f20:	46bd      	mov	sp, r7
 8003f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f26:	4770      	bx	lr

08003f28 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003f28:	b480      	push	{r7}
 8003f2a:	b089      	sub	sp, #36	; 0x24
 8003f2c:	af00      	add	r7, sp, #0
 8003f2e:	6078      	str	r0, [r7, #4]
 8003f30:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8003f32:	2300      	movs	r3, #0
 8003f34:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8003f36:	2300      	movs	r3, #0
 8003f38:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8003f3a:	2300      	movs	r3, #0
 8003f3c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8003f3e:	2300      	movs	r3, #0
 8003f40:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8003f42:	2300      	movs	r3, #0
 8003f44:	61fb      	str	r3, [r7, #28]
 8003f46:	e175      	b.n	8004234 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8003f48:	2201      	movs	r2, #1
 8003f4a:	69fb      	ldr	r3, [r7, #28]
 8003f4c:	fa02 f303 	lsl.w	r3, r2, r3
 8003f50:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003f52:	683b      	ldr	r3, [r7, #0]
 8003f54:	681a      	ldr	r2, [r3, #0]
 8003f56:	697b      	ldr	r3, [r7, #20]
 8003f58:	4013      	ands	r3, r2
 8003f5a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003f5c:	693a      	ldr	r2, [r7, #16]
 8003f5e:	697b      	ldr	r3, [r7, #20]
 8003f60:	429a      	cmp	r2, r3
 8003f62:	f040 8164 	bne.w	800422e <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003f66:	683b      	ldr	r3, [r7, #0]
 8003f68:	685b      	ldr	r3, [r3, #4]
 8003f6a:	2b02      	cmp	r3, #2
 8003f6c:	d003      	beq.n	8003f76 <HAL_GPIO_Init+0x4e>
 8003f6e:	683b      	ldr	r3, [r7, #0]
 8003f70:	685b      	ldr	r3, [r3, #4]
 8003f72:	2b12      	cmp	r3, #18
 8003f74:	d123      	bne.n	8003fbe <HAL_GPIO_Init+0x96>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8003f76:	69fb      	ldr	r3, [r7, #28]
 8003f78:	08da      	lsrs	r2, r3, #3
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	3208      	adds	r2, #8
 8003f7e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003f82:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8003f84:	69fb      	ldr	r3, [r7, #28]
 8003f86:	f003 0307 	and.w	r3, r3, #7
 8003f8a:	009b      	lsls	r3, r3, #2
 8003f8c:	220f      	movs	r2, #15
 8003f8e:	fa02 f303 	lsl.w	r3, r2, r3
 8003f92:	43db      	mvns	r3, r3
 8003f94:	69ba      	ldr	r2, [r7, #24]
 8003f96:	4013      	ands	r3, r2
 8003f98:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8003f9a:	683b      	ldr	r3, [r7, #0]
 8003f9c:	691a      	ldr	r2, [r3, #16]
 8003f9e:	69fb      	ldr	r3, [r7, #28]
 8003fa0:	f003 0307 	and.w	r3, r3, #7
 8003fa4:	009b      	lsls	r3, r3, #2
 8003fa6:	fa02 f303 	lsl.w	r3, r2, r3
 8003faa:	69ba      	ldr	r2, [r7, #24]
 8003fac:	4313      	orrs	r3, r2
 8003fae:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8003fb0:	69fb      	ldr	r3, [r7, #28]
 8003fb2:	08da      	lsrs	r2, r3, #3
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	3208      	adds	r2, #8
 8003fb8:	69b9      	ldr	r1, [r7, #24]
 8003fba:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8003fc4:	69fb      	ldr	r3, [r7, #28]
 8003fc6:	005b      	lsls	r3, r3, #1
 8003fc8:	2203      	movs	r2, #3
 8003fca:	fa02 f303 	lsl.w	r3, r2, r3
 8003fce:	43db      	mvns	r3, r3
 8003fd0:	69ba      	ldr	r2, [r7, #24]
 8003fd2:	4013      	ands	r3, r2
 8003fd4:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8003fd6:	683b      	ldr	r3, [r7, #0]
 8003fd8:	685b      	ldr	r3, [r3, #4]
 8003fda:	f003 0203 	and.w	r2, r3, #3
 8003fde:	69fb      	ldr	r3, [r7, #28]
 8003fe0:	005b      	lsls	r3, r3, #1
 8003fe2:	fa02 f303 	lsl.w	r3, r2, r3
 8003fe6:	69ba      	ldr	r2, [r7, #24]
 8003fe8:	4313      	orrs	r3, r2
 8003fea:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	69ba      	ldr	r2, [r7, #24]
 8003ff0:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003ff2:	683b      	ldr	r3, [r7, #0]
 8003ff4:	685b      	ldr	r3, [r3, #4]
 8003ff6:	2b01      	cmp	r3, #1
 8003ff8:	d00b      	beq.n	8004012 <HAL_GPIO_Init+0xea>
 8003ffa:	683b      	ldr	r3, [r7, #0]
 8003ffc:	685b      	ldr	r3, [r3, #4]
 8003ffe:	2b02      	cmp	r3, #2
 8004000:	d007      	beq.n	8004012 <HAL_GPIO_Init+0xea>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004002:	683b      	ldr	r3, [r7, #0]
 8004004:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8004006:	2b11      	cmp	r3, #17
 8004008:	d003      	beq.n	8004012 <HAL_GPIO_Init+0xea>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800400a:	683b      	ldr	r3, [r7, #0]
 800400c:	685b      	ldr	r3, [r3, #4]
 800400e:	2b12      	cmp	r3, #18
 8004010:	d130      	bne.n	8004074 <HAL_GPIO_Init+0x14c>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	689b      	ldr	r3, [r3, #8]
 8004016:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8004018:	69fb      	ldr	r3, [r7, #28]
 800401a:	005b      	lsls	r3, r3, #1
 800401c:	2203      	movs	r2, #3
 800401e:	fa02 f303 	lsl.w	r3, r2, r3
 8004022:	43db      	mvns	r3, r3
 8004024:	69ba      	ldr	r2, [r7, #24]
 8004026:	4013      	ands	r3, r2
 8004028:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 800402a:	683b      	ldr	r3, [r7, #0]
 800402c:	68da      	ldr	r2, [r3, #12]
 800402e:	69fb      	ldr	r3, [r7, #28]
 8004030:	005b      	lsls	r3, r3, #1
 8004032:	fa02 f303 	lsl.w	r3, r2, r3
 8004036:	69ba      	ldr	r2, [r7, #24]
 8004038:	4313      	orrs	r3, r2
 800403a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	69ba      	ldr	r2, [r7, #24]
 8004040:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	685b      	ldr	r3, [r3, #4]
 8004046:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004048:	2201      	movs	r2, #1
 800404a:	69fb      	ldr	r3, [r7, #28]
 800404c:	fa02 f303 	lsl.w	r3, r2, r3
 8004050:	43db      	mvns	r3, r3
 8004052:	69ba      	ldr	r2, [r7, #24]
 8004054:	4013      	ands	r3, r2
 8004056:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8004058:	683b      	ldr	r3, [r7, #0]
 800405a:	685b      	ldr	r3, [r3, #4]
 800405c:	091b      	lsrs	r3, r3, #4
 800405e:	f003 0201 	and.w	r2, r3, #1
 8004062:	69fb      	ldr	r3, [r7, #28]
 8004064:	fa02 f303 	lsl.w	r3, r2, r3
 8004068:	69ba      	ldr	r2, [r7, #24]
 800406a:	4313      	orrs	r3, r2
 800406c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	69ba      	ldr	r2, [r7, #24]
 8004072:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	68db      	ldr	r3, [r3, #12]
 8004078:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 800407a:	69fb      	ldr	r3, [r7, #28]
 800407c:	005b      	lsls	r3, r3, #1
 800407e:	2203      	movs	r2, #3
 8004080:	fa02 f303 	lsl.w	r3, r2, r3
 8004084:	43db      	mvns	r3, r3
 8004086:	69ba      	ldr	r2, [r7, #24]
 8004088:	4013      	ands	r3, r2
 800408a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 800408c:	683b      	ldr	r3, [r7, #0]
 800408e:	689a      	ldr	r2, [r3, #8]
 8004090:	69fb      	ldr	r3, [r7, #28]
 8004092:	005b      	lsls	r3, r3, #1
 8004094:	fa02 f303 	lsl.w	r3, r2, r3
 8004098:	69ba      	ldr	r2, [r7, #24]
 800409a:	4313      	orrs	r3, r2
 800409c:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	69ba      	ldr	r2, [r7, #24]
 80040a2:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80040a4:	683b      	ldr	r3, [r7, #0]
 80040a6:	685b      	ldr	r3, [r3, #4]
 80040a8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80040ac:	2b00      	cmp	r3, #0
 80040ae:	f000 80be 	beq.w	800422e <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80040b2:	4a65      	ldr	r2, [pc, #404]	; (8004248 <HAL_GPIO_Init+0x320>)
 80040b4:	4b64      	ldr	r3, [pc, #400]	; (8004248 <HAL_GPIO_Init+0x320>)
 80040b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80040b8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80040bc:	6453      	str	r3, [r2, #68]	; 0x44
 80040be:	4b62      	ldr	r3, [pc, #392]	; (8004248 <HAL_GPIO_Init+0x320>)
 80040c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80040c2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80040c6:	60fb      	str	r3, [r7, #12]
 80040c8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 80040ca:	4a60      	ldr	r2, [pc, #384]	; (800424c <HAL_GPIO_Init+0x324>)
 80040cc:	69fb      	ldr	r3, [r7, #28]
 80040ce:	089b      	lsrs	r3, r3, #2
 80040d0:	3302      	adds	r3, #2
 80040d2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80040d6:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80040d8:	69fb      	ldr	r3, [r7, #28]
 80040da:	f003 0303 	and.w	r3, r3, #3
 80040de:	009b      	lsls	r3, r3, #2
 80040e0:	220f      	movs	r2, #15
 80040e2:	fa02 f303 	lsl.w	r3, r2, r3
 80040e6:	43db      	mvns	r3, r3
 80040e8:	69ba      	ldr	r2, [r7, #24]
 80040ea:	4013      	ands	r3, r2
 80040ec:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	4a57      	ldr	r2, [pc, #348]	; (8004250 <HAL_GPIO_Init+0x328>)
 80040f2:	4293      	cmp	r3, r2
 80040f4:	d037      	beq.n	8004166 <HAL_GPIO_Init+0x23e>
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	4a56      	ldr	r2, [pc, #344]	; (8004254 <HAL_GPIO_Init+0x32c>)
 80040fa:	4293      	cmp	r3, r2
 80040fc:	d031      	beq.n	8004162 <HAL_GPIO_Init+0x23a>
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	4a55      	ldr	r2, [pc, #340]	; (8004258 <HAL_GPIO_Init+0x330>)
 8004102:	4293      	cmp	r3, r2
 8004104:	d02b      	beq.n	800415e <HAL_GPIO_Init+0x236>
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	4a54      	ldr	r2, [pc, #336]	; (800425c <HAL_GPIO_Init+0x334>)
 800410a:	4293      	cmp	r3, r2
 800410c:	d025      	beq.n	800415a <HAL_GPIO_Init+0x232>
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	4a53      	ldr	r2, [pc, #332]	; (8004260 <HAL_GPIO_Init+0x338>)
 8004112:	4293      	cmp	r3, r2
 8004114:	d01f      	beq.n	8004156 <HAL_GPIO_Init+0x22e>
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	4a52      	ldr	r2, [pc, #328]	; (8004264 <HAL_GPIO_Init+0x33c>)
 800411a:	4293      	cmp	r3, r2
 800411c:	d019      	beq.n	8004152 <HAL_GPIO_Init+0x22a>
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	4a51      	ldr	r2, [pc, #324]	; (8004268 <HAL_GPIO_Init+0x340>)
 8004122:	4293      	cmp	r3, r2
 8004124:	d013      	beq.n	800414e <HAL_GPIO_Init+0x226>
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	4a50      	ldr	r2, [pc, #320]	; (800426c <HAL_GPIO_Init+0x344>)
 800412a:	4293      	cmp	r3, r2
 800412c:	d00d      	beq.n	800414a <HAL_GPIO_Init+0x222>
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	4a4f      	ldr	r2, [pc, #316]	; (8004270 <HAL_GPIO_Init+0x348>)
 8004132:	4293      	cmp	r3, r2
 8004134:	d007      	beq.n	8004146 <HAL_GPIO_Init+0x21e>
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	4a4e      	ldr	r2, [pc, #312]	; (8004274 <HAL_GPIO_Init+0x34c>)
 800413a:	4293      	cmp	r3, r2
 800413c:	d101      	bne.n	8004142 <HAL_GPIO_Init+0x21a>
 800413e:	2309      	movs	r3, #9
 8004140:	e012      	b.n	8004168 <HAL_GPIO_Init+0x240>
 8004142:	230a      	movs	r3, #10
 8004144:	e010      	b.n	8004168 <HAL_GPIO_Init+0x240>
 8004146:	2308      	movs	r3, #8
 8004148:	e00e      	b.n	8004168 <HAL_GPIO_Init+0x240>
 800414a:	2307      	movs	r3, #7
 800414c:	e00c      	b.n	8004168 <HAL_GPIO_Init+0x240>
 800414e:	2306      	movs	r3, #6
 8004150:	e00a      	b.n	8004168 <HAL_GPIO_Init+0x240>
 8004152:	2305      	movs	r3, #5
 8004154:	e008      	b.n	8004168 <HAL_GPIO_Init+0x240>
 8004156:	2304      	movs	r3, #4
 8004158:	e006      	b.n	8004168 <HAL_GPIO_Init+0x240>
 800415a:	2303      	movs	r3, #3
 800415c:	e004      	b.n	8004168 <HAL_GPIO_Init+0x240>
 800415e:	2302      	movs	r3, #2
 8004160:	e002      	b.n	8004168 <HAL_GPIO_Init+0x240>
 8004162:	2301      	movs	r3, #1
 8004164:	e000      	b.n	8004168 <HAL_GPIO_Init+0x240>
 8004166:	2300      	movs	r3, #0
 8004168:	69fa      	ldr	r2, [r7, #28]
 800416a:	f002 0203 	and.w	r2, r2, #3
 800416e:	0092      	lsls	r2, r2, #2
 8004170:	4093      	lsls	r3, r2
 8004172:	69ba      	ldr	r2, [r7, #24]
 8004174:	4313      	orrs	r3, r2
 8004176:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8004178:	4934      	ldr	r1, [pc, #208]	; (800424c <HAL_GPIO_Init+0x324>)
 800417a:	69fb      	ldr	r3, [r7, #28]
 800417c:	089b      	lsrs	r3, r3, #2
 800417e:	3302      	adds	r3, #2
 8004180:	69ba      	ldr	r2, [r7, #24]
 8004182:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004186:	4b3c      	ldr	r3, [pc, #240]	; (8004278 <HAL_GPIO_Init+0x350>)
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800418c:	693b      	ldr	r3, [r7, #16]
 800418e:	43db      	mvns	r3, r3
 8004190:	69ba      	ldr	r2, [r7, #24]
 8004192:	4013      	ands	r3, r2
 8004194:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8004196:	683b      	ldr	r3, [r7, #0]
 8004198:	685b      	ldr	r3, [r3, #4]
 800419a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800419e:	2b00      	cmp	r3, #0
 80041a0:	d003      	beq.n	80041aa <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80041a2:	69ba      	ldr	r2, [r7, #24]
 80041a4:	693b      	ldr	r3, [r7, #16]
 80041a6:	4313      	orrs	r3, r2
 80041a8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80041aa:	4a33      	ldr	r2, [pc, #204]	; (8004278 <HAL_GPIO_Init+0x350>)
 80041ac:	69bb      	ldr	r3, [r7, #24]
 80041ae:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80041b0:	4b31      	ldr	r3, [pc, #196]	; (8004278 <HAL_GPIO_Init+0x350>)
 80041b2:	685b      	ldr	r3, [r3, #4]
 80041b4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80041b6:	693b      	ldr	r3, [r7, #16]
 80041b8:	43db      	mvns	r3, r3
 80041ba:	69ba      	ldr	r2, [r7, #24]
 80041bc:	4013      	ands	r3, r2
 80041be:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80041c0:	683b      	ldr	r3, [r7, #0]
 80041c2:	685b      	ldr	r3, [r3, #4]
 80041c4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80041c8:	2b00      	cmp	r3, #0
 80041ca:	d003      	beq.n	80041d4 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80041cc:	69ba      	ldr	r2, [r7, #24]
 80041ce:	693b      	ldr	r3, [r7, #16]
 80041d0:	4313      	orrs	r3, r2
 80041d2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80041d4:	4a28      	ldr	r2, [pc, #160]	; (8004278 <HAL_GPIO_Init+0x350>)
 80041d6:	69bb      	ldr	r3, [r7, #24]
 80041d8:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80041da:	4b27      	ldr	r3, [pc, #156]	; (8004278 <HAL_GPIO_Init+0x350>)
 80041dc:	689b      	ldr	r3, [r3, #8]
 80041de:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80041e0:	693b      	ldr	r3, [r7, #16]
 80041e2:	43db      	mvns	r3, r3
 80041e4:	69ba      	ldr	r2, [r7, #24]
 80041e6:	4013      	ands	r3, r2
 80041e8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80041ea:	683b      	ldr	r3, [r7, #0]
 80041ec:	685b      	ldr	r3, [r3, #4]
 80041ee:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	d003      	beq.n	80041fe <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80041f6:	69ba      	ldr	r2, [r7, #24]
 80041f8:	693b      	ldr	r3, [r7, #16]
 80041fa:	4313      	orrs	r3, r2
 80041fc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80041fe:	4a1e      	ldr	r2, [pc, #120]	; (8004278 <HAL_GPIO_Init+0x350>)
 8004200:	69bb      	ldr	r3, [r7, #24]
 8004202:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004204:	4b1c      	ldr	r3, [pc, #112]	; (8004278 <HAL_GPIO_Init+0x350>)
 8004206:	68db      	ldr	r3, [r3, #12]
 8004208:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800420a:	693b      	ldr	r3, [r7, #16]
 800420c:	43db      	mvns	r3, r3
 800420e:	69ba      	ldr	r2, [r7, #24]
 8004210:	4013      	ands	r3, r2
 8004212:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8004214:	683b      	ldr	r3, [r7, #0]
 8004216:	685b      	ldr	r3, [r3, #4]
 8004218:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800421c:	2b00      	cmp	r3, #0
 800421e:	d003      	beq.n	8004228 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8004220:	69ba      	ldr	r2, [r7, #24]
 8004222:	693b      	ldr	r3, [r7, #16]
 8004224:	4313      	orrs	r3, r2
 8004226:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004228:	4a13      	ldr	r2, [pc, #76]	; (8004278 <HAL_GPIO_Init+0x350>)
 800422a:	69bb      	ldr	r3, [r7, #24]
 800422c:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 800422e:	69fb      	ldr	r3, [r7, #28]
 8004230:	3301      	adds	r3, #1
 8004232:	61fb      	str	r3, [r7, #28]
 8004234:	69fb      	ldr	r3, [r7, #28]
 8004236:	2b0f      	cmp	r3, #15
 8004238:	f67f ae86 	bls.w	8003f48 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 800423c:	bf00      	nop
 800423e:	3724      	adds	r7, #36	; 0x24
 8004240:	46bd      	mov	sp, r7
 8004242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004246:	4770      	bx	lr
 8004248:	40023800 	.word	0x40023800
 800424c:	40013800 	.word	0x40013800
 8004250:	40020000 	.word	0x40020000
 8004254:	40020400 	.word	0x40020400
 8004258:	40020800 	.word	0x40020800
 800425c:	40020c00 	.word	0x40020c00
 8004260:	40021000 	.word	0x40021000
 8004264:	40021400 	.word	0x40021400
 8004268:	40021800 	.word	0x40021800
 800426c:	40021c00 	.word	0x40021c00
 8004270:	40022000 	.word	0x40022000
 8004274:	40022400 	.word	0x40022400
 8004278:	40013c00 	.word	0x40013c00

0800427c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800427c:	b480      	push	{r7}
 800427e:	b085      	sub	sp, #20
 8004280:	af00      	add	r7, sp, #0
 8004282:	6078      	str	r0, [r7, #4]
 8004284:	460b      	mov	r3, r1
 8004286:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	691a      	ldr	r2, [r3, #16]
 800428c:	887b      	ldrh	r3, [r7, #2]
 800428e:	4013      	ands	r3, r2
 8004290:	2b00      	cmp	r3, #0
 8004292:	d002      	beq.n	800429a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8004294:	2301      	movs	r3, #1
 8004296:	73fb      	strb	r3, [r7, #15]
 8004298:	e001      	b.n	800429e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800429a:	2300      	movs	r3, #0
 800429c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800429e:	7bfb      	ldrb	r3, [r7, #15]
}
 80042a0:	4618      	mov	r0, r3
 80042a2:	3714      	adds	r7, #20
 80042a4:	46bd      	mov	sp, r7
 80042a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042aa:	4770      	bx	lr

080042ac <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80042ac:	b480      	push	{r7}
 80042ae:	b083      	sub	sp, #12
 80042b0:	af00      	add	r7, sp, #0
 80042b2:	6078      	str	r0, [r7, #4]
 80042b4:	460b      	mov	r3, r1
 80042b6:	807b      	strh	r3, [r7, #2]
 80042b8:	4613      	mov	r3, r2
 80042ba:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80042bc:	787b      	ldrb	r3, [r7, #1]
 80042be:	2b00      	cmp	r3, #0
 80042c0:	d003      	beq.n	80042ca <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80042c2:	887a      	ldrh	r2, [r7, #2]
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 80042c8:	e003      	b.n	80042d2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 80042ca:	887b      	ldrh	r3, [r7, #2]
 80042cc:	041a      	lsls	r2, r3, #16
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	619a      	str	r2, [r3, #24]
}
 80042d2:	bf00      	nop
 80042d4:	370c      	adds	r7, #12
 80042d6:	46bd      	mov	sp, r7
 80042d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042dc:	4770      	bx	lr
	...

080042e0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80042e0:	b580      	push	{r7, lr}
 80042e2:	b082      	sub	sp, #8
 80042e4:	af00      	add	r7, sp, #0
 80042e6:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	2b00      	cmp	r3, #0
 80042ec:	d101      	bne.n	80042f2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80042ee:	2301      	movs	r3, #1
 80042f0:	e07e      	b.n	80043f0 <HAL_I2C_Init+0x110>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80042f8:	b2db      	uxtb	r3, r3
 80042fa:	2b00      	cmp	r3, #0
 80042fc:	d106      	bne.n	800430c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	2200      	movs	r2, #0
 8004302:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8004306:	6878      	ldr	r0, [r7, #4]
 8004308:	f000 f8a7 	bl	800445a <HAL_I2C_MspInit>
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	2224      	movs	r2, #36	; 0x24
 8004310:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	687a      	ldr	r2, [r7, #4]
 800431a:	6812      	ldr	r2, [r2, #0]
 800431c:	6812      	ldr	r2, [r2, #0]
 800431e:	f022 0201 	bic.w	r2, r2, #1
 8004322:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	687a      	ldr	r2, [r7, #4]
 800432a:	6852      	ldr	r2, [r2, #4]
 800432c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8004330:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	687a      	ldr	r2, [r7, #4]
 8004338:	6812      	ldr	r2, [r2, #0]
 800433a:	6892      	ldr	r2, [r2, #8]
 800433c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004340:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	68db      	ldr	r3, [r3, #12]
 8004346:	2b01      	cmp	r3, #1
 8004348:	d107      	bne.n	800435a <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	687a      	ldr	r2, [r7, #4]
 8004350:	6892      	ldr	r2, [r2, #8]
 8004352:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004356:	609a      	str	r2, [r3, #8]
 8004358:	e006      	b.n	8004368 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	687a      	ldr	r2, [r7, #4]
 8004360:	6892      	ldr	r2, [r2, #8]
 8004362:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8004366:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	68db      	ldr	r3, [r3, #12]
 800436c:	2b02      	cmp	r3, #2
 800436e:	d104      	bne.n	800437a <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004378:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	681a      	ldr	r2, [r3, #0]
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	6859      	ldr	r1, [r3, #4]
 8004384:	4b1c      	ldr	r3, [pc, #112]	; (80043f8 <HAL_I2C_Init+0x118>)
 8004386:	430b      	orrs	r3, r1
 8004388:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	687a      	ldr	r2, [r7, #4]
 8004390:	6812      	ldr	r2, [r2, #0]
 8004392:	68d2      	ldr	r2, [r2, #12]
 8004394:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004398:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	687a      	ldr	r2, [r7, #4]
 80043a0:	6911      	ldr	r1, [r2, #16]
 80043a2:	687a      	ldr	r2, [r7, #4]
 80043a4:	6952      	ldr	r2, [r2, #20]
 80043a6:	4311      	orrs	r1, r2
 80043a8:	687a      	ldr	r2, [r7, #4]
 80043aa:	6992      	ldr	r2, [r2, #24]
 80043ac:	0212      	lsls	r2, r2, #8
 80043ae:	430a      	orrs	r2, r1
 80043b0:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	687a      	ldr	r2, [r7, #4]
 80043b8:	69d1      	ldr	r1, [r2, #28]
 80043ba:	687a      	ldr	r2, [r7, #4]
 80043bc:	6a12      	ldr	r2, [r2, #32]
 80043be:	430a      	orrs	r2, r1
 80043c0:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	687a      	ldr	r2, [r7, #4]
 80043c8:	6812      	ldr	r2, [r2, #0]
 80043ca:	6812      	ldr	r2, [r2, #0]
 80043cc:	f042 0201 	orr.w	r2, r2, #1
 80043d0:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	2200      	movs	r2, #0
 80043d6:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	2220      	movs	r2, #32
 80043dc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	2200      	movs	r2, #0
 80043e4:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	2200      	movs	r2, #0
 80043ea:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80043ee:	2300      	movs	r3, #0
}
 80043f0:	4618      	mov	r0, r3
 80043f2:	3708      	adds	r7, #8
 80043f4:	46bd      	mov	sp, r7
 80043f6:	bd80      	pop	{r7, pc}
 80043f8:	02008000 	.word	0x02008000

080043fc <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 80043fc:	b580      	push	{r7, lr}
 80043fe:	b082      	sub	sp, #8
 8004400:	af00      	add	r7, sp, #0
 8004402:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	2b00      	cmp	r3, #0
 8004408:	d101      	bne.n	800440e <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 800440a:	2301      	movs	r3, #1
 800440c:	e021      	b.n	8004452 <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	2224      	movs	r2, #36	; 0x24
 8004412:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	687a      	ldr	r2, [r7, #4]
 800441c:	6812      	ldr	r2, [r2, #0]
 800441e:	6812      	ldr	r2, [r2, #0]
 8004420:	f022 0201 	bic.w	r2, r2, #1
 8004424:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 8004426:	6878      	ldr	r0, [r7, #4]
 8004428:	f000 f821 	bl	800446e <HAL_I2C_MspDeInit>

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	2200      	movs	r2, #0
 8004430:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	2200      	movs	r2, #0
 8004436:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	2200      	movs	r2, #0
 800443e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	2200      	movs	r2, #0
 8004444:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	2200      	movs	r2, #0
 800444c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8004450:	2300      	movs	r3, #0
}
 8004452:	4618      	mov	r0, r3
 8004454:	3708      	adds	r7, #8
 8004456:	46bd      	mov	sp, r7
 8004458:	bd80      	pop	{r7, pc}

0800445a <HAL_I2C_MspInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspInit(I2C_HandleTypeDef *hi2c)
{
 800445a:	b480      	push	{r7}
 800445c:	b083      	sub	sp, #12
 800445e:	af00      	add	r7, sp, #0
 8004460:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspInit could be implemented in the user file
   */
}
 8004462:	bf00      	nop
 8004464:	370c      	adds	r7, #12
 8004466:	46bd      	mov	sp, r7
 8004468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800446c:	4770      	bx	lr

0800446e <HAL_I2C_MspDeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspDeInit(I2C_HandleTypeDef *hi2c)
{
 800446e:	b480      	push	{r7}
 8004470:	b083      	sub	sp, #12
 8004472:	af00      	add	r7, sp, #0
 8004474:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspDeInit could be implemented in the user file
   */
}
 8004476:	bf00      	nop
 8004478:	370c      	adds	r7, #12
 800447a:	46bd      	mov	sp, r7
 800447c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004480:	4770      	bx	lr
	...

08004484 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004484:	b580      	push	{r7, lr}
 8004486:	b088      	sub	sp, #32
 8004488:	af02      	add	r7, sp, #8
 800448a:	60f8      	str	r0, [r7, #12]
 800448c:	4608      	mov	r0, r1
 800448e:	4611      	mov	r1, r2
 8004490:	461a      	mov	r2, r3
 8004492:	4603      	mov	r3, r0
 8004494:	817b      	strh	r3, [r7, #10]
 8004496:	460b      	mov	r3, r1
 8004498:	813b      	strh	r3, [r7, #8]
 800449a:	4613      	mov	r3, r2
 800449c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart = 0U;
 800449e:	2300      	movs	r3, #0
 80044a0:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80044a2:	68fb      	ldr	r3, [r7, #12]
 80044a4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80044a8:	b2db      	uxtb	r3, r3
 80044aa:	2b20      	cmp	r3, #32
 80044ac:	f040 8109 	bne.w	80046c2 <HAL_I2C_Mem_Write+0x23e>
  {
    if ((pData == NULL) || (Size == 0U))
 80044b0:	6a3b      	ldr	r3, [r7, #32]
 80044b2:	2b00      	cmp	r3, #0
 80044b4:	d002      	beq.n	80044bc <HAL_I2C_Mem_Write+0x38>
 80044b6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80044b8:	2b00      	cmp	r3, #0
 80044ba:	d101      	bne.n	80044c0 <HAL_I2C_Mem_Write+0x3c>
    {
      return  HAL_ERROR;
 80044bc:	2301      	movs	r3, #1
 80044be:	e101      	b.n	80046c4 <HAL_I2C_Mem_Write+0x240>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80044c6:	2b01      	cmp	r3, #1
 80044c8:	d101      	bne.n	80044ce <HAL_I2C_Mem_Write+0x4a>
 80044ca:	2302      	movs	r3, #2
 80044cc:	e0fa      	b.n	80046c4 <HAL_I2C_Mem_Write+0x240>
 80044ce:	68fb      	ldr	r3, [r7, #12]
 80044d0:	2201      	movs	r2, #1
 80044d2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80044d6:	f7fe fd81 	bl	8002fdc <HAL_GetTick>
 80044da:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80044dc:	697b      	ldr	r3, [r7, #20]
 80044de:	9300      	str	r3, [sp, #0]
 80044e0:	2319      	movs	r3, #25
 80044e2:	2201      	movs	r2, #1
 80044e4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80044e8:	68f8      	ldr	r0, [r7, #12]
 80044ea:	f000 fb09 	bl	8004b00 <I2C_WaitOnFlagUntilTimeout>
 80044ee:	4603      	mov	r3, r0
 80044f0:	2b00      	cmp	r3, #0
 80044f2:	d001      	beq.n	80044f8 <HAL_I2C_Mem_Write+0x74>
    {
      return HAL_TIMEOUT;
 80044f4:	2303      	movs	r3, #3
 80044f6:	e0e5      	b.n	80046c4 <HAL_I2C_Mem_Write+0x240>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	2221      	movs	r2, #33	; 0x21
 80044fc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004500:	68fb      	ldr	r3, [r7, #12]
 8004502:	2240      	movs	r2, #64	; 0x40
 8004504:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	2200      	movs	r2, #0
 800450c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800450e:	68fb      	ldr	r3, [r7, #12]
 8004510:	6a3a      	ldr	r2, [r7, #32]
 8004512:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8004514:	68fb      	ldr	r3, [r7, #12]
 8004516:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8004518:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800451a:	68fb      	ldr	r3, [r7, #12]
 800451c:	2200      	movs	r2, #0
 800451e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004520:	88f8      	ldrh	r0, [r7, #6]
 8004522:	893a      	ldrh	r2, [r7, #8]
 8004524:	8979      	ldrh	r1, [r7, #10]
 8004526:	697b      	ldr	r3, [r7, #20]
 8004528:	9301      	str	r3, [sp, #4]
 800452a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800452c:	9300      	str	r3, [sp, #0]
 800452e:	4603      	mov	r3, r0
 8004530:	68f8      	ldr	r0, [r7, #12]
 8004532:	f000 fa01 	bl	8004938 <I2C_RequestMemoryWrite>
 8004536:	4603      	mov	r3, r0
 8004538:	2b00      	cmp	r3, #0
 800453a:	d00f      	beq.n	800455c <HAL_I2C_Mem_Write+0xd8>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004540:	2b04      	cmp	r3, #4
 8004542:	d105      	bne.n	8004550 <HAL_I2C_Mem_Write+0xcc>
      {
        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	2200      	movs	r2, #0
 8004548:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 800454c:	2301      	movs	r3, #1
 800454e:	e0b9      	b.n	80046c4 <HAL_I2C_Mem_Write+0x240>
      }
      else
      {
        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004550:	68fb      	ldr	r3, [r7, #12]
 8004552:	2200      	movs	r2, #0
 8004554:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_TIMEOUT;
 8004558:	2303      	movs	r3, #3
 800455a:	e0b3      	b.n	80046c4 <HAL_I2C_Mem_Write+0x240>
      }
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004560:	b29b      	uxth	r3, r3
 8004562:	2bff      	cmp	r3, #255	; 0xff
 8004564:	d90e      	bls.n	8004584 <HAL_I2C_Mem_Write+0x100>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8004566:	68fb      	ldr	r3, [r7, #12]
 8004568:	22ff      	movs	r2, #255	; 0xff
 800456a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004570:	b2da      	uxtb	r2, r3
 8004572:	8979      	ldrh	r1, [r7, #10]
 8004574:	2300      	movs	r3, #0
 8004576:	9300      	str	r3, [sp, #0]
 8004578:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800457c:	68f8      	ldr	r0, [r7, #12]
 800457e:	f000 fbd3 	bl	8004d28 <I2C_TransferConfig>
 8004582:	e00f      	b.n	80045a4 <HAL_I2C_Mem_Write+0x120>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004588:	b29a      	uxth	r2, r3
 800458a:	68fb      	ldr	r3, [r7, #12]
 800458c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800458e:	68fb      	ldr	r3, [r7, #12]
 8004590:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004592:	b2da      	uxtb	r2, r3
 8004594:	8979      	ldrh	r1, [r7, #10]
 8004596:	2300      	movs	r3, #0
 8004598:	9300      	str	r3, [sp, #0]
 800459a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800459e:	68f8      	ldr	r0, [r7, #12]
 80045a0:	f000 fbc2 	bl	8004d28 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80045a4:	697a      	ldr	r2, [r7, #20]
 80045a6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80045a8:	68f8      	ldr	r0, [r7, #12]
 80045aa:	f000 fae3 	bl	8004b74 <I2C_WaitOnTXISFlagUntilTimeout>
 80045ae:	4603      	mov	r3, r0
 80045b0:	2b00      	cmp	r3, #0
 80045b2:	d007      	beq.n	80045c4 <HAL_I2C_Mem_Write+0x140>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80045b4:	68fb      	ldr	r3, [r7, #12]
 80045b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80045b8:	2b04      	cmp	r3, #4
 80045ba:	d101      	bne.n	80045c0 <HAL_I2C_Mem_Write+0x13c>
        {
          return HAL_ERROR;
 80045bc:	2301      	movs	r3, #1
 80045be:	e081      	b.n	80046c4 <HAL_I2C_Mem_Write+0x240>
        }
        else
        {
          return HAL_TIMEOUT;
 80045c0:	2303      	movs	r3, #3
 80045c2:	e07f      	b.n	80046c4 <HAL_I2C_Mem_Write+0x240>
        }
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = (*hi2c->pBuffPtr++);
 80045c4:	68fb      	ldr	r3, [r7, #12]
 80045c6:	681a      	ldr	r2, [r3, #0]
 80045c8:	68fb      	ldr	r3, [r7, #12]
 80045ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045cc:	1c58      	adds	r0, r3, #1
 80045ce:	68f9      	ldr	r1, [r7, #12]
 80045d0:	6248      	str	r0, [r1, #36]	; 0x24
 80045d2:	781b      	ldrb	r3, [r3, #0]
 80045d4:	6293      	str	r3, [r2, #40]	; 0x28
      hi2c->XferCount--;
 80045d6:	68fb      	ldr	r3, [r7, #12]
 80045d8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80045da:	b29b      	uxth	r3, r3
 80045dc:	3b01      	subs	r3, #1
 80045de:	b29a      	uxth	r2, r3
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80045e4:	68fb      	ldr	r3, [r7, #12]
 80045e6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80045e8:	3b01      	subs	r3, #1
 80045ea:	b29a      	uxth	r2, r3
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferSize == 0U) && (hi2c->XferCount != 0U))
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80045f4:	2b00      	cmp	r3, #0
 80045f6:	d135      	bne.n	8004664 <HAL_I2C_Mem_Write+0x1e0>
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80045fc:	b29b      	uxth	r3, r3
 80045fe:	2b00      	cmp	r3, #0
 8004600:	d030      	beq.n	8004664 <HAL_I2C_Mem_Write+0x1e0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8004602:	697b      	ldr	r3, [r7, #20]
 8004604:	9300      	str	r3, [sp, #0]
 8004606:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004608:	2200      	movs	r2, #0
 800460a:	2180      	movs	r1, #128	; 0x80
 800460c:	68f8      	ldr	r0, [r7, #12]
 800460e:	f000 fa77 	bl	8004b00 <I2C_WaitOnFlagUntilTimeout>
 8004612:	4603      	mov	r3, r0
 8004614:	2b00      	cmp	r3, #0
 8004616:	d001      	beq.n	800461c <HAL_I2C_Mem_Write+0x198>
        {
          return HAL_TIMEOUT;
 8004618:	2303      	movs	r3, #3
 800461a:	e053      	b.n	80046c4 <HAL_I2C_Mem_Write+0x240>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800461c:	68fb      	ldr	r3, [r7, #12]
 800461e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004620:	b29b      	uxth	r3, r3
 8004622:	2bff      	cmp	r3, #255	; 0xff
 8004624:	d90e      	bls.n	8004644 <HAL_I2C_Mem_Write+0x1c0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	22ff      	movs	r2, #255	; 0xff
 800462a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004630:	b2da      	uxtb	r2, r3
 8004632:	8979      	ldrh	r1, [r7, #10]
 8004634:	2300      	movs	r3, #0
 8004636:	9300      	str	r3, [sp, #0]
 8004638:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800463c:	68f8      	ldr	r0, [r7, #12]
 800463e:	f000 fb73 	bl	8004d28 <I2C_TransferConfig>
 8004642:	e00f      	b.n	8004664 <HAL_I2C_Mem_Write+0x1e0>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004648:	b29a      	uxth	r2, r3
 800464a:	68fb      	ldr	r3, [r7, #12]
 800464c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800464e:	68fb      	ldr	r3, [r7, #12]
 8004650:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004652:	b2da      	uxtb	r2, r3
 8004654:	8979      	ldrh	r1, [r7, #10]
 8004656:	2300      	movs	r3, #0
 8004658:	9300      	str	r3, [sp, #0]
 800465a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800465e:	68f8      	ldr	r0, [r7, #12]
 8004660:	f000 fb62 	bl	8004d28 <I2C_TransferConfig>
        }
      }

    }
    while (hi2c->XferCount > 0U);
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004668:	b29b      	uxth	r3, r3
 800466a:	2b00      	cmp	r3, #0
 800466c:	d19a      	bne.n	80045a4 <HAL_I2C_Mem_Write+0x120>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800466e:	697a      	ldr	r2, [r7, #20]
 8004670:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004672:	68f8      	ldr	r0, [r7, #12]
 8004674:	f000 fabe 	bl	8004bf4 <I2C_WaitOnSTOPFlagUntilTimeout>
 8004678:	4603      	mov	r3, r0
 800467a:	2b00      	cmp	r3, #0
 800467c:	d007      	beq.n	800468e <HAL_I2C_Mem_Write+0x20a>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004682:	2b04      	cmp	r3, #4
 8004684:	d101      	bne.n	800468a <HAL_I2C_Mem_Write+0x206>
      {
        return HAL_ERROR;
 8004686:	2301      	movs	r3, #1
 8004688:	e01c      	b.n	80046c4 <HAL_I2C_Mem_Write+0x240>
      }
      else
      {
        return HAL_TIMEOUT;
 800468a:	2303      	movs	r3, #3
 800468c:	e01a      	b.n	80046c4 <HAL_I2C_Mem_Write+0x240>
      }
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800468e:	68fb      	ldr	r3, [r7, #12]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	2220      	movs	r2, #32
 8004694:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004696:	68fb      	ldr	r3, [r7, #12]
 8004698:	681a      	ldr	r2, [r3, #0]
 800469a:	68fb      	ldr	r3, [r7, #12]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	6859      	ldr	r1, [r3, #4]
 80046a0:	4b0a      	ldr	r3, [pc, #40]	; (80046cc <HAL_I2C_Mem_Write+0x248>)
 80046a2:	400b      	ands	r3, r1
 80046a4:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80046a6:	68fb      	ldr	r3, [r7, #12]
 80046a8:	2220      	movs	r2, #32
 80046aa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80046ae:	68fb      	ldr	r3, [r7, #12]
 80046b0:	2200      	movs	r2, #0
 80046b2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80046b6:	68fb      	ldr	r3, [r7, #12]
 80046b8:	2200      	movs	r2, #0
 80046ba:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80046be:	2300      	movs	r3, #0
 80046c0:	e000      	b.n	80046c4 <HAL_I2C_Mem_Write+0x240>
  }
  else
  {
    return HAL_BUSY;
 80046c2:	2302      	movs	r3, #2
  }
}
 80046c4:	4618      	mov	r0, r3
 80046c6:	3718      	adds	r7, #24
 80046c8:	46bd      	mov	sp, r7
 80046ca:	bd80      	pop	{r7, pc}
 80046cc:	fe00e800 	.word	0xfe00e800

080046d0 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80046d0:	b580      	push	{r7, lr}
 80046d2:	b088      	sub	sp, #32
 80046d4:	af02      	add	r7, sp, #8
 80046d6:	60f8      	str	r0, [r7, #12]
 80046d8:	4608      	mov	r0, r1
 80046da:	4611      	mov	r1, r2
 80046dc:	461a      	mov	r2, r3
 80046de:	4603      	mov	r3, r0
 80046e0:	817b      	strh	r3, [r7, #10]
 80046e2:	460b      	mov	r3, r1
 80046e4:	813b      	strh	r3, [r7, #8]
 80046e6:	4613      	mov	r3, r2
 80046e8:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart = 0U;
 80046ea:	2300      	movs	r3, #0
 80046ec:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80046ee:	68fb      	ldr	r3, [r7, #12]
 80046f0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80046f4:	b2db      	uxtb	r3, r3
 80046f6:	2b20      	cmp	r3, #32
 80046f8:	f040 8107 	bne.w	800490a <HAL_I2C_Mem_Read+0x23a>
  {
    if ((pData == NULL) || (Size == 0U))
 80046fc:	6a3b      	ldr	r3, [r7, #32]
 80046fe:	2b00      	cmp	r3, #0
 8004700:	d002      	beq.n	8004708 <HAL_I2C_Mem_Read+0x38>
 8004702:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004704:	2b00      	cmp	r3, #0
 8004706:	d101      	bne.n	800470c <HAL_I2C_Mem_Read+0x3c>
    {
      return  HAL_ERROR;
 8004708:	2301      	movs	r3, #1
 800470a:	e0ff      	b.n	800490c <HAL_I2C_Mem_Read+0x23c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800470c:	68fb      	ldr	r3, [r7, #12]
 800470e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004712:	2b01      	cmp	r3, #1
 8004714:	d101      	bne.n	800471a <HAL_I2C_Mem_Read+0x4a>
 8004716:	2302      	movs	r3, #2
 8004718:	e0f8      	b.n	800490c <HAL_I2C_Mem_Read+0x23c>
 800471a:	68fb      	ldr	r3, [r7, #12]
 800471c:	2201      	movs	r2, #1
 800471e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8004722:	f7fe fc5b 	bl	8002fdc <HAL_GetTick>
 8004726:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8004728:	697b      	ldr	r3, [r7, #20]
 800472a:	9300      	str	r3, [sp, #0]
 800472c:	2319      	movs	r3, #25
 800472e:	2201      	movs	r2, #1
 8004730:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004734:	68f8      	ldr	r0, [r7, #12]
 8004736:	f000 f9e3 	bl	8004b00 <I2C_WaitOnFlagUntilTimeout>
 800473a:	4603      	mov	r3, r0
 800473c:	2b00      	cmp	r3, #0
 800473e:	d001      	beq.n	8004744 <HAL_I2C_Mem_Read+0x74>
    {
      return HAL_TIMEOUT;
 8004740:	2303      	movs	r3, #3
 8004742:	e0e3      	b.n	800490c <HAL_I2C_Mem_Read+0x23c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8004744:	68fb      	ldr	r3, [r7, #12]
 8004746:	2222      	movs	r2, #34	; 0x22
 8004748:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	2240      	movs	r2, #64	; 0x40
 8004750:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004754:	68fb      	ldr	r3, [r7, #12]
 8004756:	2200      	movs	r2, #0
 8004758:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800475a:	68fb      	ldr	r3, [r7, #12]
 800475c:	6a3a      	ldr	r2, [r7, #32]
 800475e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8004760:	68fb      	ldr	r3, [r7, #12]
 8004762:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8004764:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8004766:	68fb      	ldr	r3, [r7, #12]
 8004768:	2200      	movs	r2, #0
 800476a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800476c:	88f8      	ldrh	r0, [r7, #6]
 800476e:	893a      	ldrh	r2, [r7, #8]
 8004770:	8979      	ldrh	r1, [r7, #10]
 8004772:	697b      	ldr	r3, [r7, #20]
 8004774:	9301      	str	r3, [sp, #4]
 8004776:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004778:	9300      	str	r3, [sp, #0]
 800477a:	4603      	mov	r3, r0
 800477c:	68f8      	ldr	r0, [r7, #12]
 800477e:	f000 f93b 	bl	80049f8 <I2C_RequestMemoryRead>
 8004782:	4603      	mov	r3, r0
 8004784:	2b00      	cmp	r3, #0
 8004786:	d00f      	beq.n	80047a8 <HAL_I2C_Mem_Read+0xd8>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800478c:	2b04      	cmp	r3, #4
 800478e:	d105      	bne.n	800479c <HAL_I2C_Mem_Read+0xcc>
      {
        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004790:	68fb      	ldr	r3, [r7, #12]
 8004792:	2200      	movs	r2, #0
 8004794:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8004798:	2301      	movs	r3, #1
 800479a:	e0b7      	b.n	800490c <HAL_I2C_Mem_Read+0x23c>
      }
      else
      {
        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800479c:	68fb      	ldr	r3, [r7, #12]
 800479e:	2200      	movs	r2, #0
 80047a0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_TIMEOUT;
 80047a4:	2303      	movs	r3, #3
 80047a6:	e0b1      	b.n	800490c <HAL_I2C_Mem_Read+0x23c>
      }
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80047a8:	68fb      	ldr	r3, [r7, #12]
 80047aa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80047ac:	b29b      	uxth	r3, r3
 80047ae:	2bff      	cmp	r3, #255	; 0xff
 80047b0:	d90e      	bls.n	80047d0 <HAL_I2C_Mem_Read+0x100>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80047b2:	68fb      	ldr	r3, [r7, #12]
 80047b4:	22ff      	movs	r2, #255	; 0xff
 80047b6:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 80047b8:	68fb      	ldr	r3, [r7, #12]
 80047ba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80047bc:	b2da      	uxtb	r2, r3
 80047be:	8979      	ldrh	r1, [r7, #10]
 80047c0:	4b54      	ldr	r3, [pc, #336]	; (8004914 <HAL_I2C_Mem_Read+0x244>)
 80047c2:	9300      	str	r3, [sp, #0]
 80047c4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80047c8:	68f8      	ldr	r0, [r7, #12]
 80047ca:	f000 faad 	bl	8004d28 <I2C_TransferConfig>
 80047ce:	e00f      	b.n	80047f0 <HAL_I2C_Mem_Read+0x120>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80047d0:	68fb      	ldr	r3, [r7, #12]
 80047d2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80047d4:	b29a      	uxth	r2, r3
 80047d6:	68fb      	ldr	r3, [r7, #12]
 80047d8:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 80047da:	68fb      	ldr	r3, [r7, #12]
 80047dc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80047de:	b2da      	uxtb	r2, r3
 80047e0:	8979      	ldrh	r1, [r7, #10]
 80047e2:	4b4c      	ldr	r3, [pc, #304]	; (8004914 <HAL_I2C_Mem_Read+0x244>)
 80047e4:	9300      	str	r3, [sp, #0]
 80047e6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80047ea:	68f8      	ldr	r0, [r7, #12]
 80047ec:	f000 fa9c 	bl	8004d28 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 80047f0:	697b      	ldr	r3, [r7, #20]
 80047f2:	9300      	str	r3, [sp, #0]
 80047f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80047f6:	2200      	movs	r2, #0
 80047f8:	2104      	movs	r1, #4
 80047fa:	68f8      	ldr	r0, [r7, #12]
 80047fc:	f000 f980 	bl	8004b00 <I2C_WaitOnFlagUntilTimeout>
 8004800:	4603      	mov	r3, r0
 8004802:	2b00      	cmp	r3, #0
 8004804:	d001      	beq.n	800480a <HAL_I2C_Mem_Read+0x13a>
      {
        return HAL_TIMEOUT;
 8004806:	2303      	movs	r3, #3
 8004808:	e080      	b.n	800490c <HAL_I2C_Mem_Read+0x23c>
      }

      /* Read data from RXDR */
      (*hi2c->pBuffPtr++) = hi2c->Instance->RXDR;
 800480a:	68fb      	ldr	r3, [r7, #12]
 800480c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800480e:	1c59      	adds	r1, r3, #1
 8004810:	68fa      	ldr	r2, [r7, #12]
 8004812:	6251      	str	r1, [r2, #36]	; 0x24
 8004814:	68fa      	ldr	r2, [r7, #12]
 8004816:	6812      	ldr	r2, [r2, #0]
 8004818:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800481a:	b2d2      	uxtb	r2, r2
 800481c:	701a      	strb	r2, [r3, #0]
      hi2c->XferSize--;
 800481e:	68fb      	ldr	r3, [r7, #12]
 8004820:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004822:	3b01      	subs	r3, #1
 8004824:	b29a      	uxth	r2, r3
 8004826:	68fb      	ldr	r3, [r7, #12]
 8004828:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800482a:	68fb      	ldr	r3, [r7, #12]
 800482c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800482e:	b29b      	uxth	r3, r3
 8004830:	3b01      	subs	r3, #1
 8004832:	b29a      	uxth	r2, r3
 8004834:	68fb      	ldr	r3, [r7, #12]
 8004836:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferSize == 0U) && (hi2c->XferCount != 0U))
 8004838:	68fb      	ldr	r3, [r7, #12]
 800483a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800483c:	2b00      	cmp	r3, #0
 800483e:	d135      	bne.n	80048ac <HAL_I2C_Mem_Read+0x1dc>
 8004840:	68fb      	ldr	r3, [r7, #12]
 8004842:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004844:	b29b      	uxth	r3, r3
 8004846:	2b00      	cmp	r3, #0
 8004848:	d030      	beq.n	80048ac <HAL_I2C_Mem_Read+0x1dc>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800484a:	697b      	ldr	r3, [r7, #20]
 800484c:	9300      	str	r3, [sp, #0]
 800484e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004850:	2200      	movs	r2, #0
 8004852:	2180      	movs	r1, #128	; 0x80
 8004854:	68f8      	ldr	r0, [r7, #12]
 8004856:	f000 f953 	bl	8004b00 <I2C_WaitOnFlagUntilTimeout>
 800485a:	4603      	mov	r3, r0
 800485c:	2b00      	cmp	r3, #0
 800485e:	d001      	beq.n	8004864 <HAL_I2C_Mem_Read+0x194>
        {
          return HAL_TIMEOUT;
 8004860:	2303      	movs	r3, #3
 8004862:	e053      	b.n	800490c <HAL_I2C_Mem_Read+0x23c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004868:	b29b      	uxth	r3, r3
 800486a:	2bff      	cmp	r3, #255	; 0xff
 800486c:	d90e      	bls.n	800488c <HAL_I2C_Mem_Read+0x1bc>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800486e:	68fb      	ldr	r3, [r7, #12]
 8004870:	22ff      	movs	r2, #255	; 0xff
 8004872:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8004874:	68fb      	ldr	r3, [r7, #12]
 8004876:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004878:	b2da      	uxtb	r2, r3
 800487a:	8979      	ldrh	r1, [r7, #10]
 800487c:	2300      	movs	r3, #0
 800487e:	9300      	str	r3, [sp, #0]
 8004880:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004884:	68f8      	ldr	r0, [r7, #12]
 8004886:	f000 fa4f 	bl	8004d28 <I2C_TransferConfig>
 800488a:	e00f      	b.n	80048ac <HAL_I2C_Mem_Read+0x1dc>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800488c:	68fb      	ldr	r3, [r7, #12]
 800488e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004890:	b29a      	uxth	r2, r3
 8004892:	68fb      	ldr	r3, [r7, #12]
 8004894:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8004896:	68fb      	ldr	r3, [r7, #12]
 8004898:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800489a:	b2da      	uxtb	r2, r3
 800489c:	8979      	ldrh	r1, [r7, #10]
 800489e:	2300      	movs	r3, #0
 80048a0:	9300      	str	r3, [sp, #0]
 80048a2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80048a6:	68f8      	ldr	r0, [r7, #12]
 80048a8:	f000 fa3e 	bl	8004d28 <I2C_TransferConfig>
        }
      }
    }
    while (hi2c->XferCount > 0U);
 80048ac:	68fb      	ldr	r3, [r7, #12]
 80048ae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80048b0:	b29b      	uxth	r3, r3
 80048b2:	2b00      	cmp	r3, #0
 80048b4:	d19c      	bne.n	80047f0 <HAL_I2C_Mem_Read+0x120>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80048b6:	697a      	ldr	r2, [r7, #20]
 80048b8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80048ba:	68f8      	ldr	r0, [r7, #12]
 80048bc:	f000 f99a 	bl	8004bf4 <I2C_WaitOnSTOPFlagUntilTimeout>
 80048c0:	4603      	mov	r3, r0
 80048c2:	2b00      	cmp	r3, #0
 80048c4:	d007      	beq.n	80048d6 <HAL_I2C_Mem_Read+0x206>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80048c6:	68fb      	ldr	r3, [r7, #12]
 80048c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80048ca:	2b04      	cmp	r3, #4
 80048cc:	d101      	bne.n	80048d2 <HAL_I2C_Mem_Read+0x202>
      {
        return HAL_ERROR;
 80048ce:	2301      	movs	r3, #1
 80048d0:	e01c      	b.n	800490c <HAL_I2C_Mem_Read+0x23c>
      }
      else
      {
        return HAL_TIMEOUT;
 80048d2:	2303      	movs	r3, #3
 80048d4:	e01a      	b.n	800490c <HAL_I2C_Mem_Read+0x23c>
      }
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80048d6:	68fb      	ldr	r3, [r7, #12]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	2220      	movs	r2, #32
 80048dc:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80048de:	68fb      	ldr	r3, [r7, #12]
 80048e0:	681a      	ldr	r2, [r3, #0]
 80048e2:	68fb      	ldr	r3, [r7, #12]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	6859      	ldr	r1, [r3, #4]
 80048e8:	4b0b      	ldr	r3, [pc, #44]	; (8004918 <HAL_I2C_Mem_Read+0x248>)
 80048ea:	400b      	ands	r3, r1
 80048ec:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80048ee:	68fb      	ldr	r3, [r7, #12]
 80048f0:	2220      	movs	r2, #32
 80048f2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80048f6:	68fb      	ldr	r3, [r7, #12]
 80048f8:	2200      	movs	r2, #0
 80048fa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80048fe:	68fb      	ldr	r3, [r7, #12]
 8004900:	2200      	movs	r2, #0
 8004902:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004906:	2300      	movs	r3, #0
 8004908:	e000      	b.n	800490c <HAL_I2C_Mem_Read+0x23c>
  }
  else
  {
    return HAL_BUSY;
 800490a:	2302      	movs	r3, #2
  }
}
 800490c:	4618      	mov	r0, r3
 800490e:	3718      	adds	r7, #24
 8004910:	46bd      	mov	sp, r7
 8004912:	bd80      	pop	{r7, pc}
 8004914:	80002400 	.word	0x80002400
 8004918:	fe00e800 	.word	0xfe00e800

0800491c <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 800491c:	b480      	push	{r7}
 800491e:	b083      	sub	sp, #12
 8004920:	af00      	add	r7, sp, #0
 8004922:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800492a:	b2db      	uxtb	r3, r3
}
 800492c:	4618      	mov	r0, r3
 800492e:	370c      	adds	r7, #12
 8004930:	46bd      	mov	sp, r7
 8004932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004936:	4770      	bx	lr

08004938 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004938:	b580      	push	{r7, lr}
 800493a:	b086      	sub	sp, #24
 800493c:	af02      	add	r7, sp, #8
 800493e:	60f8      	str	r0, [r7, #12]
 8004940:	4608      	mov	r0, r1
 8004942:	4611      	mov	r1, r2
 8004944:	461a      	mov	r2, r3
 8004946:	4603      	mov	r3, r0
 8004948:	817b      	strh	r3, [r7, #10]
 800494a:	460b      	mov	r3, r1
 800494c:	813b      	strh	r3, [r7, #8]
 800494e:	4613      	mov	r3, r2
 8004950:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8004952:	88fb      	ldrh	r3, [r7, #6]
 8004954:	b2da      	uxtb	r2, r3
 8004956:	8979      	ldrh	r1, [r7, #10]
 8004958:	4b26      	ldr	r3, [pc, #152]	; (80049f4 <I2C_RequestMemoryWrite+0xbc>)
 800495a:	9300      	str	r3, [sp, #0]
 800495c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004960:	68f8      	ldr	r0, [r7, #12]
 8004962:	f000 f9e1 	bl	8004d28 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004966:	69fa      	ldr	r2, [r7, #28]
 8004968:	69b9      	ldr	r1, [r7, #24]
 800496a:	68f8      	ldr	r0, [r7, #12]
 800496c:	f000 f902 	bl	8004b74 <I2C_WaitOnTXISFlagUntilTimeout>
 8004970:	4603      	mov	r3, r0
 8004972:	2b00      	cmp	r3, #0
 8004974:	d007      	beq.n	8004986 <I2C_RequestMemoryWrite+0x4e>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004976:	68fb      	ldr	r3, [r7, #12]
 8004978:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800497a:	2b04      	cmp	r3, #4
 800497c:	d101      	bne.n	8004982 <I2C_RequestMemoryWrite+0x4a>
    {
      return HAL_ERROR;
 800497e:	2301      	movs	r3, #1
 8004980:	e034      	b.n	80049ec <I2C_RequestMemoryWrite+0xb4>
    }
    else
    {
      return HAL_TIMEOUT;
 8004982:	2303      	movs	r3, #3
 8004984:	e032      	b.n	80049ec <I2C_RequestMemoryWrite+0xb4>
    }
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004986:	88fb      	ldrh	r3, [r7, #6]
 8004988:	2b01      	cmp	r3, #1
 800498a:	d105      	bne.n	8004998 <I2C_RequestMemoryWrite+0x60>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800498c:	68fb      	ldr	r3, [r7, #12]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	893a      	ldrh	r2, [r7, #8]
 8004992:	b2d2      	uxtb	r2, r2
 8004994:	629a      	str	r2, [r3, #40]	; 0x28
 8004996:	e01b      	b.n	80049d0 <I2C_RequestMemoryWrite+0x98>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8004998:	68fb      	ldr	r3, [r7, #12]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	893a      	ldrh	r2, [r7, #8]
 800499e:	0a12      	lsrs	r2, r2, #8
 80049a0:	b292      	uxth	r2, r2
 80049a2:	b2d2      	uxtb	r2, r2
 80049a4:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80049a6:	69fa      	ldr	r2, [r7, #28]
 80049a8:	69b9      	ldr	r1, [r7, #24]
 80049aa:	68f8      	ldr	r0, [r7, #12]
 80049ac:	f000 f8e2 	bl	8004b74 <I2C_WaitOnTXISFlagUntilTimeout>
 80049b0:	4603      	mov	r3, r0
 80049b2:	2b00      	cmp	r3, #0
 80049b4:	d007      	beq.n	80049c6 <I2C_RequestMemoryWrite+0x8e>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80049b6:	68fb      	ldr	r3, [r7, #12]
 80049b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80049ba:	2b04      	cmp	r3, #4
 80049bc:	d101      	bne.n	80049c2 <I2C_RequestMemoryWrite+0x8a>
      {
        return HAL_ERROR;
 80049be:	2301      	movs	r3, #1
 80049c0:	e014      	b.n	80049ec <I2C_RequestMemoryWrite+0xb4>
      }
      else
      {
        return HAL_TIMEOUT;
 80049c2:	2303      	movs	r3, #3
 80049c4:	e012      	b.n	80049ec <I2C_RequestMemoryWrite+0xb4>
      }
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80049c6:	68fb      	ldr	r3, [r7, #12]
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	893a      	ldrh	r2, [r7, #8]
 80049cc:	b2d2      	uxtb	r2, r2
 80049ce:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 80049d0:	69fb      	ldr	r3, [r7, #28]
 80049d2:	9300      	str	r3, [sp, #0]
 80049d4:	69bb      	ldr	r3, [r7, #24]
 80049d6:	2200      	movs	r2, #0
 80049d8:	2180      	movs	r1, #128	; 0x80
 80049da:	68f8      	ldr	r0, [r7, #12]
 80049dc:	f000 f890 	bl	8004b00 <I2C_WaitOnFlagUntilTimeout>
 80049e0:	4603      	mov	r3, r0
 80049e2:	2b00      	cmp	r3, #0
 80049e4:	d001      	beq.n	80049ea <I2C_RequestMemoryWrite+0xb2>
  {
    return HAL_TIMEOUT;
 80049e6:	2303      	movs	r3, #3
 80049e8:	e000      	b.n	80049ec <I2C_RequestMemoryWrite+0xb4>
  }

  return HAL_OK;
 80049ea:	2300      	movs	r3, #0
}
 80049ec:	4618      	mov	r0, r3
 80049ee:	3710      	adds	r7, #16
 80049f0:	46bd      	mov	sp, r7
 80049f2:	bd80      	pop	{r7, pc}
 80049f4:	80002000 	.word	0x80002000

080049f8 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80049f8:	b580      	push	{r7, lr}
 80049fa:	b086      	sub	sp, #24
 80049fc:	af02      	add	r7, sp, #8
 80049fe:	60f8      	str	r0, [r7, #12]
 8004a00:	4608      	mov	r0, r1
 8004a02:	4611      	mov	r1, r2
 8004a04:	461a      	mov	r2, r3
 8004a06:	4603      	mov	r3, r0
 8004a08:	817b      	strh	r3, [r7, #10]
 8004a0a:	460b      	mov	r3, r1
 8004a0c:	813b      	strh	r3, [r7, #8]
 8004a0e:	4613      	mov	r3, r2
 8004a10:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8004a12:	88fb      	ldrh	r3, [r7, #6]
 8004a14:	b2da      	uxtb	r2, r3
 8004a16:	8979      	ldrh	r1, [r7, #10]
 8004a18:	4b26      	ldr	r3, [pc, #152]	; (8004ab4 <I2C_RequestMemoryRead+0xbc>)
 8004a1a:	9300      	str	r3, [sp, #0]
 8004a1c:	2300      	movs	r3, #0
 8004a1e:	68f8      	ldr	r0, [r7, #12]
 8004a20:	f000 f982 	bl	8004d28 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004a24:	69fa      	ldr	r2, [r7, #28]
 8004a26:	69b9      	ldr	r1, [r7, #24]
 8004a28:	68f8      	ldr	r0, [r7, #12]
 8004a2a:	f000 f8a3 	bl	8004b74 <I2C_WaitOnTXISFlagUntilTimeout>
 8004a2e:	4603      	mov	r3, r0
 8004a30:	2b00      	cmp	r3, #0
 8004a32:	d007      	beq.n	8004a44 <I2C_RequestMemoryRead+0x4c>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004a34:	68fb      	ldr	r3, [r7, #12]
 8004a36:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004a38:	2b04      	cmp	r3, #4
 8004a3a:	d101      	bne.n	8004a40 <I2C_RequestMemoryRead+0x48>
    {
      return HAL_ERROR;
 8004a3c:	2301      	movs	r3, #1
 8004a3e:	e034      	b.n	8004aaa <I2C_RequestMemoryRead+0xb2>
    }
    else
    {
      return HAL_TIMEOUT;
 8004a40:	2303      	movs	r3, #3
 8004a42:	e032      	b.n	8004aaa <I2C_RequestMemoryRead+0xb2>
    }
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004a44:	88fb      	ldrh	r3, [r7, #6]
 8004a46:	2b01      	cmp	r3, #1
 8004a48:	d105      	bne.n	8004a56 <I2C_RequestMemoryRead+0x5e>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004a4a:	68fb      	ldr	r3, [r7, #12]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	893a      	ldrh	r2, [r7, #8]
 8004a50:	b2d2      	uxtb	r2, r2
 8004a52:	629a      	str	r2, [r3, #40]	; 0x28
 8004a54:	e01b      	b.n	8004a8e <I2C_RequestMemoryRead+0x96>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8004a56:	68fb      	ldr	r3, [r7, #12]
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	893a      	ldrh	r2, [r7, #8]
 8004a5c:	0a12      	lsrs	r2, r2, #8
 8004a5e:	b292      	uxth	r2, r2
 8004a60:	b2d2      	uxtb	r2, r2
 8004a62:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004a64:	69fa      	ldr	r2, [r7, #28]
 8004a66:	69b9      	ldr	r1, [r7, #24]
 8004a68:	68f8      	ldr	r0, [r7, #12]
 8004a6a:	f000 f883 	bl	8004b74 <I2C_WaitOnTXISFlagUntilTimeout>
 8004a6e:	4603      	mov	r3, r0
 8004a70:	2b00      	cmp	r3, #0
 8004a72:	d007      	beq.n	8004a84 <I2C_RequestMemoryRead+0x8c>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004a74:	68fb      	ldr	r3, [r7, #12]
 8004a76:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004a78:	2b04      	cmp	r3, #4
 8004a7a:	d101      	bne.n	8004a80 <I2C_RequestMemoryRead+0x88>
      {
        return HAL_ERROR;
 8004a7c:	2301      	movs	r3, #1
 8004a7e:	e014      	b.n	8004aaa <I2C_RequestMemoryRead+0xb2>
      }
      else
      {
        return HAL_TIMEOUT;
 8004a80:	2303      	movs	r3, #3
 8004a82:	e012      	b.n	8004aaa <I2C_RequestMemoryRead+0xb2>
      }
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004a84:	68fb      	ldr	r3, [r7, #12]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	893a      	ldrh	r2, [r7, #8]
 8004a8a:	b2d2      	uxtb	r2, r2
 8004a8c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8004a8e:	69fb      	ldr	r3, [r7, #28]
 8004a90:	9300      	str	r3, [sp, #0]
 8004a92:	69bb      	ldr	r3, [r7, #24]
 8004a94:	2200      	movs	r2, #0
 8004a96:	2140      	movs	r1, #64	; 0x40
 8004a98:	68f8      	ldr	r0, [r7, #12]
 8004a9a:	f000 f831 	bl	8004b00 <I2C_WaitOnFlagUntilTimeout>
 8004a9e:	4603      	mov	r3, r0
 8004aa0:	2b00      	cmp	r3, #0
 8004aa2:	d001      	beq.n	8004aa8 <I2C_RequestMemoryRead+0xb0>
  {
    return HAL_TIMEOUT;
 8004aa4:	2303      	movs	r3, #3
 8004aa6:	e000      	b.n	8004aaa <I2C_RequestMemoryRead+0xb2>
  }

  return HAL_OK;
 8004aa8:	2300      	movs	r3, #0
}
 8004aaa:	4618      	mov	r0, r3
 8004aac:	3710      	adds	r7, #16
 8004aae:	46bd      	mov	sp, r7
 8004ab0:	bd80      	pop	{r7, pc}
 8004ab2:	bf00      	nop
 8004ab4:	80002000 	.word	0x80002000

08004ab8 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8004ab8:	b480      	push	{r7}
 8004aba:	b083      	sub	sp, #12
 8004abc:	af00      	add	r7, sp, #0
 8004abe:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	699b      	ldr	r3, [r3, #24]
 8004ac6:	f003 0302 	and.w	r3, r3, #2
 8004aca:	2b02      	cmp	r3, #2
 8004acc:	d103      	bne.n	8004ad6 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	2200      	movs	r2, #0
 8004ad4:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	699b      	ldr	r3, [r3, #24]
 8004adc:	f003 0301 	and.w	r3, r3, #1
 8004ae0:	2b01      	cmp	r3, #1
 8004ae2:	d007      	beq.n	8004af4 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	687a      	ldr	r2, [r7, #4]
 8004aea:	6812      	ldr	r2, [r2, #0]
 8004aec:	6992      	ldr	r2, [r2, #24]
 8004aee:	f042 0201 	orr.w	r2, r2, #1
 8004af2:	619a      	str	r2, [r3, #24]
  }
}
 8004af4:	bf00      	nop
 8004af6:	370c      	adds	r7, #12
 8004af8:	46bd      	mov	sp, r7
 8004afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004afe:	4770      	bx	lr

08004b00 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8004b00:	b580      	push	{r7, lr}
 8004b02:	b084      	sub	sp, #16
 8004b04:	af00      	add	r7, sp, #0
 8004b06:	60f8      	str	r0, [r7, #12]
 8004b08:	60b9      	str	r1, [r7, #8]
 8004b0a:	603b      	str	r3, [r7, #0]
 8004b0c:	4613      	mov	r3, r2
 8004b0e:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004b10:	e01c      	b.n	8004b4c <I2C_WaitOnFlagUntilTimeout+0x4c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004b12:	683b      	ldr	r3, [r7, #0]
 8004b14:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b18:	d018      	beq.n	8004b4c <I2C_WaitOnFlagUntilTimeout+0x4c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8004b1a:	683b      	ldr	r3, [r7, #0]
 8004b1c:	2b00      	cmp	r3, #0
 8004b1e:	d007      	beq.n	8004b30 <I2C_WaitOnFlagUntilTimeout+0x30>
 8004b20:	f7fe fa5c 	bl	8002fdc <HAL_GetTick>
 8004b24:	4602      	mov	r2, r0
 8004b26:	69bb      	ldr	r3, [r7, #24]
 8004b28:	1ad2      	subs	r2, r2, r3
 8004b2a:	683b      	ldr	r3, [r7, #0]
 8004b2c:	429a      	cmp	r2, r3
 8004b2e:	d90d      	bls.n	8004b4c <I2C_WaitOnFlagUntilTimeout+0x4c>
      {
        hi2c->State = HAL_I2C_STATE_READY;
 8004b30:	68fb      	ldr	r3, [r7, #12]
 8004b32:	2220      	movs	r2, #32
 8004b34:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004b38:	68fb      	ldr	r3, [r7, #12]
 8004b3a:	2200      	movs	r2, #0
 8004b3c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004b40:	68fb      	ldr	r3, [r7, #12]
 8004b42:	2200      	movs	r2, #0
 8004b44:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_TIMEOUT;
 8004b48:	2303      	movs	r3, #3
 8004b4a:	e00f      	b.n	8004b6c <I2C_WaitOnFlagUntilTimeout+0x6c>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004b4c:	68fb      	ldr	r3, [r7, #12]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	699a      	ldr	r2, [r3, #24]
 8004b52:	68bb      	ldr	r3, [r7, #8]
 8004b54:	401a      	ands	r2, r3
 8004b56:	68bb      	ldr	r3, [r7, #8]
 8004b58:	429a      	cmp	r2, r3
 8004b5a:	bf0c      	ite	eq
 8004b5c:	2301      	moveq	r3, #1
 8004b5e:	2300      	movne	r3, #0
 8004b60:	b2db      	uxtb	r3, r3
 8004b62:	461a      	mov	r2, r3
 8004b64:	79fb      	ldrb	r3, [r7, #7]
 8004b66:	429a      	cmp	r2, r3
 8004b68:	d0d3      	beq.n	8004b12 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004b6a:	2300      	movs	r3, #0
}
 8004b6c:	4618      	mov	r0, r3
 8004b6e:	3710      	adds	r7, #16
 8004b70:	46bd      	mov	sp, r7
 8004b72:	bd80      	pop	{r7, pc}

08004b74 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004b74:	b580      	push	{r7, lr}
 8004b76:	b084      	sub	sp, #16
 8004b78:	af00      	add	r7, sp, #0
 8004b7a:	60f8      	str	r0, [r7, #12]
 8004b7c:	60b9      	str	r1, [r7, #8]
 8004b7e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8004b80:	e02c      	b.n	8004bdc <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8004b82:	687a      	ldr	r2, [r7, #4]
 8004b84:	68b9      	ldr	r1, [r7, #8]
 8004b86:	68f8      	ldr	r0, [r7, #12]
 8004b88:	f000 f870 	bl	8004c6c <I2C_IsAcknowledgeFailed>
 8004b8c:	4603      	mov	r3, r0
 8004b8e:	2b00      	cmp	r3, #0
 8004b90:	d001      	beq.n	8004b96 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8004b92:	2301      	movs	r3, #1
 8004b94:	e02a      	b.n	8004bec <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004b96:	68bb      	ldr	r3, [r7, #8]
 8004b98:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b9c:	d01e      	beq.n	8004bdc <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8004b9e:	68bb      	ldr	r3, [r7, #8]
 8004ba0:	2b00      	cmp	r3, #0
 8004ba2:	d007      	beq.n	8004bb4 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8004ba4:	f7fe fa1a 	bl	8002fdc <HAL_GetTick>
 8004ba8:	4602      	mov	r2, r0
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	1ad2      	subs	r2, r2, r3
 8004bae:	68bb      	ldr	r3, [r7, #8]
 8004bb0:	429a      	cmp	r2, r3
 8004bb2:	d913      	bls.n	8004bdc <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004bb4:	68fb      	ldr	r3, [r7, #12]
 8004bb6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004bb8:	f043 0220 	orr.w	r2, r3, #32
 8004bbc:	68fb      	ldr	r3, [r7, #12]
 8004bbe:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8004bc0:	68fb      	ldr	r3, [r7, #12]
 8004bc2:	2220      	movs	r2, #32
 8004bc4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004bc8:	68fb      	ldr	r3, [r7, #12]
 8004bca:	2200      	movs	r2, #0
 8004bcc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004bd0:	68fb      	ldr	r3, [r7, #12]
 8004bd2:	2200      	movs	r2, #0
 8004bd4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 8004bd8:	2303      	movs	r3, #3
 8004bda:	e007      	b.n	8004bec <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8004bdc:	68fb      	ldr	r3, [r7, #12]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	699b      	ldr	r3, [r3, #24]
 8004be2:	f003 0302 	and.w	r3, r3, #2
 8004be6:	2b02      	cmp	r3, #2
 8004be8:	d1cb      	bne.n	8004b82 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004bea:	2300      	movs	r3, #0
}
 8004bec:	4618      	mov	r0, r3
 8004bee:	3710      	adds	r7, #16
 8004bf0:	46bd      	mov	sp, r7
 8004bf2:	bd80      	pop	{r7, pc}

08004bf4 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004bf4:	b580      	push	{r7, lr}
 8004bf6:	b084      	sub	sp, #16
 8004bf8:	af00      	add	r7, sp, #0
 8004bfa:	60f8      	str	r0, [r7, #12]
 8004bfc:	60b9      	str	r1, [r7, #8]
 8004bfe:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004c00:	e028      	b.n	8004c54 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8004c02:	687a      	ldr	r2, [r7, #4]
 8004c04:	68b9      	ldr	r1, [r7, #8]
 8004c06:	68f8      	ldr	r0, [r7, #12]
 8004c08:	f000 f830 	bl	8004c6c <I2C_IsAcknowledgeFailed>
 8004c0c:	4603      	mov	r3, r0
 8004c0e:	2b00      	cmp	r3, #0
 8004c10:	d001      	beq.n	8004c16 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8004c12:	2301      	movs	r3, #1
 8004c14:	e026      	b.n	8004c64 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8004c16:	68bb      	ldr	r3, [r7, #8]
 8004c18:	2b00      	cmp	r3, #0
 8004c1a:	d007      	beq.n	8004c2c <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8004c1c:	f7fe f9de 	bl	8002fdc <HAL_GetTick>
 8004c20:	4602      	mov	r2, r0
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	1ad2      	subs	r2, r2, r3
 8004c26:	68bb      	ldr	r3, [r7, #8]
 8004c28:	429a      	cmp	r2, r3
 8004c2a:	d913      	bls.n	8004c54 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004c2c:	68fb      	ldr	r3, [r7, #12]
 8004c2e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c30:	f043 0220 	orr.w	r2, r3, #32
 8004c34:	68fb      	ldr	r3, [r7, #12]
 8004c36:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8004c38:	68fb      	ldr	r3, [r7, #12]
 8004c3a:	2220      	movs	r2, #32
 8004c3c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004c40:	68fb      	ldr	r3, [r7, #12]
 8004c42:	2200      	movs	r2, #0
 8004c44:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004c48:	68fb      	ldr	r3, [r7, #12]
 8004c4a:	2200      	movs	r2, #0
 8004c4c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_TIMEOUT;
 8004c50:	2303      	movs	r3, #3
 8004c52:	e007      	b.n	8004c64 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004c54:	68fb      	ldr	r3, [r7, #12]
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	699b      	ldr	r3, [r3, #24]
 8004c5a:	f003 0320 	and.w	r3, r3, #32
 8004c5e:	2b20      	cmp	r3, #32
 8004c60:	d1cf      	bne.n	8004c02 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8004c62:	2300      	movs	r3, #0
}
 8004c64:	4618      	mov	r0, r3
 8004c66:	3710      	adds	r7, #16
 8004c68:	46bd      	mov	sp, r7
 8004c6a:	bd80      	pop	{r7, pc}

08004c6c <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004c6c:	b580      	push	{r7, lr}
 8004c6e:	b084      	sub	sp, #16
 8004c70:	af00      	add	r7, sp, #0
 8004c72:	60f8      	str	r0, [r7, #12]
 8004c74:	60b9      	str	r1, [r7, #8]
 8004c76:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004c78:	68fb      	ldr	r3, [r7, #12]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	699b      	ldr	r3, [r3, #24]
 8004c7e:	f003 0310 	and.w	r3, r3, #16
 8004c82:	2b10      	cmp	r3, #16
 8004c84:	d148      	bne.n	8004d18 <I2C_IsAcknowledgeFailed+0xac>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004c86:	e01c      	b.n	8004cc2 <I2C_IsAcknowledgeFailed+0x56>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8004c88:	68bb      	ldr	r3, [r7, #8]
 8004c8a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c8e:	d018      	beq.n	8004cc2 <I2C_IsAcknowledgeFailed+0x56>
      {
        if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8004c90:	68bb      	ldr	r3, [r7, #8]
 8004c92:	2b00      	cmp	r3, #0
 8004c94:	d007      	beq.n	8004ca6 <I2C_IsAcknowledgeFailed+0x3a>
 8004c96:	f7fe f9a1 	bl	8002fdc <HAL_GetTick>
 8004c9a:	4602      	mov	r2, r0
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	1ad2      	subs	r2, r2, r3
 8004ca0:	68bb      	ldr	r3, [r7, #8]
 8004ca2:	429a      	cmp	r2, r3
 8004ca4:	d90d      	bls.n	8004cc2 <I2C_IsAcknowledgeFailed+0x56>
        {
          hi2c->State = HAL_I2C_STATE_READY;
 8004ca6:	68fb      	ldr	r3, [r7, #12]
 8004ca8:	2220      	movs	r2, #32
 8004caa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004cae:	68fb      	ldr	r3, [r7, #12]
 8004cb0:	2200      	movs	r2, #0
 8004cb2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004cb6:	68fb      	ldr	r3, [r7, #12]
 8004cb8:	2200      	movs	r2, #0
 8004cba:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
          return HAL_TIMEOUT;
 8004cbe:	2303      	movs	r3, #3
 8004cc0:	e02b      	b.n	8004d1a <I2C_IsAcknowledgeFailed+0xae>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004cc2:	68fb      	ldr	r3, [r7, #12]
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	699b      	ldr	r3, [r3, #24]
 8004cc8:	f003 0320 	and.w	r3, r3, #32
 8004ccc:	2b20      	cmp	r3, #32
 8004cce:	d1db      	bne.n	8004c88 <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004cd0:	68fb      	ldr	r3, [r7, #12]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	2210      	movs	r2, #16
 8004cd6:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004cd8:	68fb      	ldr	r3, [r7, #12]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	2220      	movs	r2, #32
 8004cde:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8004ce0:	68f8      	ldr	r0, [r7, #12]
 8004ce2:	f7ff fee9 	bl	8004ab8 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004ce6:	68fb      	ldr	r3, [r7, #12]
 8004ce8:	681a      	ldr	r2, [r3, #0]
 8004cea:	68fb      	ldr	r3, [r7, #12]
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	6859      	ldr	r1, [r3, #4]
 8004cf0:	4b0c      	ldr	r3, [pc, #48]	; (8004d24 <I2C_IsAcknowledgeFailed+0xb8>)
 8004cf2:	400b      	ands	r3, r1
 8004cf4:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8004cf6:	68fb      	ldr	r3, [r7, #12]
 8004cf8:	2204      	movs	r2, #4
 8004cfa:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8004cfc:	68fb      	ldr	r3, [r7, #12]
 8004cfe:	2220      	movs	r2, #32
 8004d00:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004d04:	68fb      	ldr	r3, [r7, #12]
 8004d06:	2200      	movs	r2, #0
 8004d08:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004d0c:	68fb      	ldr	r3, [r7, #12]
 8004d0e:	2200      	movs	r2, #0
 8004d10:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 8004d14:	2301      	movs	r3, #1
 8004d16:	e000      	b.n	8004d1a <I2C_IsAcknowledgeFailed+0xae>
  }
  return HAL_OK;
 8004d18:	2300      	movs	r3, #0
}
 8004d1a:	4618      	mov	r0, r3
 8004d1c:	3710      	adds	r7, #16
 8004d1e:	46bd      	mov	sp, r7
 8004d20:	bd80      	pop	{r7, pc}
 8004d22:	bf00      	nop
 8004d24:	fe00e800 	.word	0xfe00e800

08004d28 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_READ Generate Restart for read request.
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c,  uint16_t DevAddress, uint8_t Size, uint32_t Mode, uint32_t Request)
{
 8004d28:	b480      	push	{r7}
 8004d2a:	b085      	sub	sp, #20
 8004d2c:	af00      	add	r7, sp, #0
 8004d2e:	60f8      	str	r0, [r7, #12]
 8004d30:	607b      	str	r3, [r7, #4]
 8004d32:	460b      	mov	r3, r1
 8004d34:	817b      	strh	r3, [r7, #10]
 8004d36:	4613      	mov	r3, r2
 8004d38:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 8004d3a:	68fb      	ldr	r3, [r7, #12]
 8004d3c:	681a      	ldr	r2, [r3, #0]
 8004d3e:	68fb      	ldr	r3, [r7, #12]
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	6859      	ldr	r1, [r3, #4]
 8004d44:	69bb      	ldr	r3, [r7, #24]
 8004d46:	0d5b      	lsrs	r3, r3, #21
 8004d48:	f403 6080 	and.w	r0, r3, #1024	; 0x400
 8004d4c:	4b0b      	ldr	r3, [pc, #44]	; (8004d7c <I2C_TransferConfig+0x54>)
 8004d4e:	4303      	orrs	r3, r0
 8004d50:	43db      	mvns	r3, r3
 8004d52:	4019      	ands	r1, r3
 8004d54:	897b      	ldrh	r3, [r7, #10]
 8004d56:	f3c3 0009 	ubfx	r0, r3, #0, #10
 8004d5a:	7a7b      	ldrb	r3, [r7, #9]
 8004d5c:	041b      	lsls	r3, r3, #16
 8004d5e:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8004d62:	4318      	orrs	r0, r3
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	4318      	orrs	r0, r3
 8004d68:	69bb      	ldr	r3, [r7, #24]
 8004d6a:	4303      	orrs	r3, r0
 8004d6c:	430b      	orrs	r3, r1
 8004d6e:	6053      	str	r3, [r2, #4]
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 8004d70:	bf00      	nop
 8004d72:	3714      	adds	r7, #20
 8004d74:	46bd      	mov	sp, r7
 8004d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d7a:	4770      	bx	lr
 8004d7c:	03ff63ff 	.word	0x03ff63ff

08004d80 <HAL_LTDC_Init>:
  * @param  hltdc pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 8004d80:	b580      	push	{r7, lr}
 8004d82:	b084      	sub	sp, #16
 8004d84:	af00      	add	r7, sp, #0
 8004d86:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0, tmp1 = 0;
 8004d88:	2300      	movs	r3, #0
 8004d8a:	60fb      	str	r3, [r7, #12]
 8004d8c:	2300      	movs	r3, #0
 8004d8e:	60bb      	str	r3, [r7, #8]

  /* Check the LTDC peripheral state */
  if(hltdc == NULL)
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	2b00      	cmp	r3, #0
 8004d94:	d101      	bne.n	8004d9a <HAL_LTDC_Init+0x1a>
  {
    return HAL_ERROR;
 8004d96:	2301      	movs	r3, #1
 8004d98:	e0c7      	b.n	8004f2a <HAL_LTDC_Init+0x1aa>
  assert_param(IS_LTDC_HSPOL(hltdc->Init.HSPolarity));
  assert_param(IS_LTDC_VSPOL(hltdc->Init.VSPolarity));
  assert_param(IS_LTDC_DEPOL(hltdc->Init.DEPolarity));
  assert_param(IS_LTDC_PCPOL(hltdc->Init.PCPolarity));

  if(hltdc->State == HAL_LTDC_STATE_RESET)
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 8004da0:	b2db      	uxtb	r3, r3
 8004da2:	2b00      	cmp	r3, #0
 8004da4:	d106      	bne.n	8004db4 <HAL_LTDC_Init+0x34>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	2200      	movs	r2, #0
 8004daa:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 8004dae:	6878      	ldr	r0, [r7, #4]
 8004db0:	f004 fe82 	bl	8009ab8 <HAL_LTDC_MspInit>
  }
  
  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	2202      	movs	r2, #2
 8004db8:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Configures the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	687a      	ldr	r2, [r7, #4]
 8004dc2:	6812      	ldr	r2, [r2, #0]
 8004dc4:	6992      	ldr	r2, [r2, #24]
 8004dc6:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 8004dca:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |=  (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	687a      	ldr	r2, [r7, #4]
 8004dd2:	6812      	ldr	r2, [r2, #0]
 8004dd4:	6991      	ldr	r1, [r2, #24]
 8004dd6:	687a      	ldr	r2, [r7, #4]
 8004dd8:	6850      	ldr	r0, [r2, #4]
 8004dda:	687a      	ldr	r2, [r7, #4]
 8004ddc:	6892      	ldr	r2, [r2, #8]
 8004dde:	4310      	orrs	r0, r2
  hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8004de0:	687a      	ldr	r2, [r7, #4]
 8004de2:	68d2      	ldr	r2, [r2, #12]
  hltdc->Instance->GCR |=  (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8004de4:	4310      	orrs	r0, r2
  hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8004de6:	687a      	ldr	r2, [r7, #4]
 8004de8:	6912      	ldr	r2, [r2, #16]
 8004dea:	4302      	orrs	r2, r0
  hltdc->Instance->GCR |=  (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8004dec:	430a      	orrs	r2, r1
 8004dee:	619a      	str	r2, [r3, #24]

  /* Sets Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	681a      	ldr	r2, [r3, #0]
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	6899      	ldr	r1, [r3, #8]
 8004dfa:	4b4e      	ldr	r3, [pc, #312]	; (8004f34 <HAL_LTDC_Init+0x1b4>)
 8004dfc:	400b      	ands	r3, r1
 8004dfe:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16);
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	695b      	ldr	r3, [r3, #20]
 8004e04:	041b      	lsls	r3, r3, #16
 8004e06:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	687a      	ldr	r2, [r7, #4]
 8004e0e:	6812      	ldr	r2, [r2, #0]
 8004e10:	6891      	ldr	r1, [r2, #8]
 8004e12:	687a      	ldr	r2, [r7, #4]
 8004e14:	6990      	ldr	r0, [r2, #24]
 8004e16:	68fa      	ldr	r2, [r7, #12]
 8004e18:	4302      	orrs	r2, r0
 8004e1a:	430a      	orrs	r2, r1
 8004e1c:	609a      	str	r2, [r3, #8]

  /* Sets Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	681a      	ldr	r2, [r3, #0]
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	68d9      	ldr	r1, [r3, #12]
 8004e28:	4b42      	ldr	r3, [pc, #264]	; (8004f34 <HAL_LTDC_Init+0x1b4>)
 8004e2a:	400b      	ands	r3, r1
 8004e2c:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16);
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	69db      	ldr	r3, [r3, #28]
 8004e32:	041b      	lsls	r3, r3, #16
 8004e34:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	687a      	ldr	r2, [r7, #4]
 8004e3c:	6812      	ldr	r2, [r2, #0]
 8004e3e:	68d1      	ldr	r1, [r2, #12]
 8004e40:	687a      	ldr	r2, [r7, #4]
 8004e42:	6a10      	ldr	r0, [r2, #32]
 8004e44:	68fa      	ldr	r2, [r7, #12]
 8004e46:	4302      	orrs	r2, r0
 8004e48:	430a      	orrs	r2, r1
 8004e4a:	60da      	str	r2, [r3, #12]

  /* Sets Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	681a      	ldr	r2, [r3, #0]
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	6919      	ldr	r1, [r3, #16]
 8004e56:	4b37      	ldr	r3, [pc, #220]	; (8004f34 <HAL_LTDC_Init+0x1b4>)
 8004e58:	400b      	ands	r3, r1
 8004e5a:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16);
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e60:	041b      	lsls	r3, r3, #16
 8004e62:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	687a      	ldr	r2, [r7, #4]
 8004e6a:	6812      	ldr	r2, [r2, #0]
 8004e6c:	6911      	ldr	r1, [r2, #16]
 8004e6e:	687a      	ldr	r2, [r7, #4]
 8004e70:	6a90      	ldr	r0, [r2, #40]	; 0x28
 8004e72:	68fa      	ldr	r2, [r7, #12]
 8004e74:	4302      	orrs	r2, r0
 8004e76:	430a      	orrs	r2, r1
 8004e78:	611a      	str	r2, [r3, #16]

  /* Sets Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	681a      	ldr	r2, [r3, #0]
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	6959      	ldr	r1, [r3, #20]
 8004e84:	4b2b      	ldr	r3, [pc, #172]	; (8004f34 <HAL_LTDC_Init+0x1b4>)
 8004e86:	400b      	ands	r3, r1
 8004e88:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16);
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e8e:	041b      	lsls	r3, r3, #16
 8004e90:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	687a      	ldr	r2, [r7, #4]
 8004e98:	6812      	ldr	r2, [r2, #0]
 8004e9a:	6951      	ldr	r1, [r2, #20]
 8004e9c:	687a      	ldr	r2, [r7, #4]
 8004e9e:	6b10      	ldr	r0, [r2, #48]	; 0x30
 8004ea0:	68fa      	ldr	r2, [r7, #12]
 8004ea2:	4302      	orrs	r2, r0
 8004ea4:	430a      	orrs	r2, r1
 8004ea6:	615a      	str	r2, [r3, #20]

  /* Sets the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8);
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004eae:	021b      	lsls	r3, r3, #8
 8004eb0:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16);
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8004eb8:	041b      	lsls	r3, r3, #16
 8004eba:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	687a      	ldr	r2, [r7, #4]
 8004ec2:	6812      	ldr	r2, [r2, #0]
 8004ec4:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8004ec6:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 8004eca:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	687a      	ldr	r2, [r7, #4]
 8004ed2:	6812      	ldr	r2, [r2, #0]
 8004ed4:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8004ed6:	68b8      	ldr	r0, [r7, #8]
 8004ed8:	68fa      	ldr	r2, [r7, #12]
 8004eda:	4302      	orrs	r2, r0
 8004edc:	6878      	ldr	r0, [r7, #4]
 8004ede:	f890 0034 	ldrb.w	r0, [r0, #52]	; 0x34
 8004ee2:	4302      	orrs	r2, r0
 8004ee4:	430a      	orrs	r2, r1
 8004ee6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable the transfer Error interrupt */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE);
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	687a      	ldr	r2, [r7, #4]
 8004eee:	6812      	ldr	r2, [r2, #0]
 8004ef0:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004ef2:	f042 0204 	orr.w	r2, r2, #4
 8004ef6:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable the FIFO underrun interrupt */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_FU);
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	687a      	ldr	r2, [r7, #4]
 8004efe:	6812      	ldr	r2, [r2, #0]
 8004f00:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004f02:	f042 0202 	orr.w	r2, r2, #2
 8004f06:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	687a      	ldr	r2, [r7, #4]
 8004f0e:	6812      	ldr	r2, [r2, #0]
 8004f10:	6992      	ldr	r2, [r2, #24]
 8004f12:	f042 0201 	orr.w	r2, r2, #1
 8004f16:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;  
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	2200      	movs	r2, #0
 8004f1c:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	2201      	movs	r2, #1
 8004f24:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  return HAL_OK;
 8004f28:	2300      	movs	r3, #0
}
 8004f2a:	4618      	mov	r0, r3
 8004f2c:	3710      	adds	r7, #16
 8004f2e:	46bd      	mov	sp, r7
 8004f30:	bd80      	pop	{r7, pc}
 8004f32:	bf00      	nop
 8004f34:	f000f800 	.word	0xf000f800

08004f38 <HAL_LTDC_IRQHandler>:
  * @param  hltdc pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.  
  * @retval HAL status
  */
void HAL_LTDC_IRQHandler(LTDC_HandleTypeDef *hltdc)
{
 8004f38:	b580      	push	{r7, lr}
 8004f3a:	b082      	sub	sp, #8
 8004f3c:	af00      	add	r7, sp, #0
 8004f3e:	6078      	str	r0, [r7, #4]
  /* Transfer Error Interrupt management ***************************************/
  if(__HAL_LTDC_GET_FLAG(hltdc, LTDC_FLAG_TE) != RESET)
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f46:	f003 0304 	and.w	r3, r3, #4
 8004f4a:	2b00      	cmp	r3, #0
 8004f4c:	d025      	beq.n	8004f9a <HAL_LTDC_IRQHandler+0x62>
  {
    if(__HAL_LTDC_GET_IT_SOURCE(hltdc, LTDC_IT_TE) != RESET)
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f54:	f003 0304 	and.w	r3, r3, #4
 8004f58:	2b00      	cmp	r3, #0
 8004f5a:	d01e      	beq.n	8004f9a <HAL_LTDC_IRQHandler+0x62>
    {
      /* Disable the transfer Error interrupt */
      __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_TE);
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	687a      	ldr	r2, [r7, #4]
 8004f62:	6812      	ldr	r2, [r2, #0]
 8004f64:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004f66:	f022 0204 	bic.w	r2, r2, #4
 8004f6a:	635a      	str	r2, [r3, #52]	; 0x34

      /* Clear the transfer error flag */
      __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_TE);
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	2204      	movs	r2, #4
 8004f72:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Update error code */
      hltdc->ErrorCode |= HAL_LTDC_ERROR_TE;
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8004f7a:	f043 0201 	orr.w	r2, r3, #1
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

      /* Change LTDC state */
      hltdc->State = HAL_LTDC_STATE_ERROR;
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	2204      	movs	r2, #4
 8004f88:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

      /* Process unlocked */
      __HAL_UNLOCK(hltdc);
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	2200      	movs	r2, #0
 8004f90:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

      /* Transfer error Callback */
      HAL_LTDC_ErrorCallback(hltdc);
 8004f94:	6878      	ldr	r0, [r7, #4]
 8004f96:	f000 f87b 	bl	8005090 <HAL_LTDC_ErrorCallback>
    }
  }
  /* FIFO underrun Interrupt management ***************************************/
  if(__HAL_LTDC_GET_FLAG(hltdc, LTDC_FLAG_FU) != RESET)
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004fa0:	f003 0302 	and.w	r3, r3, #2
 8004fa4:	2b00      	cmp	r3, #0
 8004fa6:	d025      	beq.n	8004ff4 <HAL_LTDC_IRQHandler+0xbc>
  {
    if(__HAL_LTDC_GET_IT_SOURCE(hltdc, LTDC_IT_FU) != RESET)
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004fae:	f003 0302 	and.w	r3, r3, #2
 8004fb2:	2b00      	cmp	r3, #0
 8004fb4:	d01e      	beq.n	8004ff4 <HAL_LTDC_IRQHandler+0xbc>
    {
      /* Disable the FIFO underrun interrupt */
      __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	687a      	ldr	r2, [r7, #4]
 8004fbc:	6812      	ldr	r2, [r2, #0]
 8004fbe:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004fc0:	f022 0202 	bic.w	r2, r2, #2
 8004fc4:	635a      	str	r2, [r3, #52]	; 0x34

      /* Clear the FIFO underrun flag */
      __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_FU);
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	2202      	movs	r2, #2
 8004fcc:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Update error code */
      hltdc->ErrorCode |= HAL_LTDC_ERROR_FU;
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8004fd4:	f043 0202 	orr.w	r2, r3, #2
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

      /* Change LTDC state */
      hltdc->State = HAL_LTDC_STATE_ERROR;
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	2204      	movs	r2, #4
 8004fe2:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

      /* Process unlocked */
      __HAL_UNLOCK(hltdc);
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	2200      	movs	r2, #0
 8004fea:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
      
      /* Transfer error Callback */
      HAL_LTDC_ErrorCallback(hltdc);
 8004fee:	6878      	ldr	r0, [r7, #4]
 8004ff0:	f000 f84e 	bl	8005090 <HAL_LTDC_ErrorCallback>
    }
  }
  /* Line Interrupt management ************************************************/
  if(__HAL_LTDC_GET_FLAG(hltdc, LTDC_FLAG_LI) != RESET)
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ffa:	f003 0301 	and.w	r3, r3, #1
 8004ffe:	2b00      	cmp	r3, #0
 8005000:	d01d      	beq.n	800503e <HAL_LTDC_IRQHandler+0x106>
  {
    if(__HAL_LTDC_GET_IT_SOURCE(hltdc, LTDC_IT_LI) != RESET)
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005008:	f003 0301 	and.w	r3, r3, #1
 800500c:	2b00      	cmp	r3, #0
 800500e:	d016      	beq.n	800503e <HAL_LTDC_IRQHandler+0x106>
    {
      /* Disable the Line interrupt */
      __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	687a      	ldr	r2, [r7, #4]
 8005016:	6812      	ldr	r2, [r2, #0]
 8005018:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800501a:	f022 0201 	bic.w	r2, r2, #1
 800501e:	635a      	str	r2, [r3, #52]	; 0x34

      /* Clear the Line interrupt flag */  
      __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_LI);
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	2201      	movs	r2, #1
 8005026:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change LTDC state */
      hltdc->State = HAL_LTDC_STATE_READY;
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	2201      	movs	r2, #1
 800502c:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

      /* Process unlocked */
      __HAL_UNLOCK(hltdc);
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	2200      	movs	r2, #0
 8005034:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

      /* Line interrupt Callback */
      HAL_LTDC_LineEventCallback(hltdc);
 8005038:	6878      	ldr	r0, [r7, #4]
 800503a:	f000 f833 	bl	80050a4 <HAL_LTDC_LineEventCallback>
    }
  }
  /* Register reload Interrupt management ***************************************/
  if(__HAL_LTDC_GET_FLAG(hltdc, LTDC_FLAG_RR) != RESET)
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005044:	f003 0308 	and.w	r3, r3, #8
 8005048:	2b00      	cmp	r3, #0
 800504a:	d01d      	beq.n	8005088 <HAL_LTDC_IRQHandler+0x150>
  {
    if(__HAL_LTDC_GET_IT_SOURCE(hltdc, LTDC_IT_RR) != RESET)
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005052:	f003 0308 	and.w	r3, r3, #8
 8005056:	2b00      	cmp	r3, #0
 8005058:	d016      	beq.n	8005088 <HAL_LTDC_IRQHandler+0x150>
    {
      /* Disable the register reload interrupt */
      __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	687a      	ldr	r2, [r7, #4]
 8005060:	6812      	ldr	r2, [r2, #0]
 8005062:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8005064:	f022 0208 	bic.w	r2, r2, #8
 8005068:	635a      	str	r2, [r3, #52]	; 0x34
      
      /* Clear the register reload flag */
      __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_RR);
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	2208      	movs	r2, #8
 8005070:	63da      	str	r2, [r3, #60]	; 0x3c
      
      /* Change LTDC state */
      hltdc->State = HAL_LTDC_STATE_READY;
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	2201      	movs	r2, #1
 8005076:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1
      
      /* Process unlocked */
      __HAL_UNLOCK(hltdc);
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	2200      	movs	r2, #0
 800507e:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
      
      /* Register reload interrupt Callback */
      HAL_LTDC_ReloadEventCallback(hltdc);
 8005082:	6878      	ldr	r0, [r7, #4]
 8005084:	f000 f818 	bl	80050b8 <HAL_LTDC_ReloadEventCallback>
    }
  }  
}
 8005088:	bf00      	nop
 800508a:	3708      	adds	r7, #8
 800508c:	46bd      	mov	sp, r7
 800508e:	bd80      	pop	{r7, pc}

08005090 <HAL_LTDC_ErrorCallback>:
  * @param  hltdc pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ErrorCallback(LTDC_HandleTypeDef *hltdc)
{
 8005090:	b480      	push	{r7}
 8005092:	b083      	sub	sp, #12
 8005094:	af00      	add	r7, sp, #0
 8005096:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);
  
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_LTDC_ErrorCallback could be implemented in the user file
   */
}
 8005098:	bf00      	nop
 800509a:	370c      	adds	r7, #12
 800509c:	46bd      	mov	sp, r7
 800509e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050a2:	4770      	bx	lr

080050a4 <HAL_LTDC_LineEventCallback>:
  * @param  hltdc pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_LineEventCallback(LTDC_HandleTypeDef *hltdc)
{
 80050a4:	b480      	push	{r7}
 80050a6:	b083      	sub	sp, #12
 80050a8:	af00      	add	r7, sp, #0
 80050aa:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);
  
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_LTDC_LineEventCallback could be implemented in the user file
   */
}
 80050ac:	bf00      	nop
 80050ae:	370c      	adds	r7, #12
 80050b0:	46bd      	mov	sp, r7
 80050b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050b6:	4770      	bx	lr

080050b8 <HAL_LTDC_ReloadEventCallback>:
  * @param  hltdc pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ReloadEventCallback(LTDC_HandleTypeDef *hltdc)
{
 80050b8:	b480      	push	{r7}
 80050ba:	b083      	sub	sp, #12
 80050bc:	af00      	add	r7, sp, #0
 80050be:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);
  
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_LTDC_ReloadEvenCallback could be implemented in the user file
   */
}
 80050c0:	bf00      	nop
 80050c2:	370c      	adds	r7, #12
 80050c4:	46bd      	mov	sp, r7
 80050c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050ca:	4770      	bx	lr

080050cc <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    0 or 1
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{   
 80050cc:	b5b0      	push	{r4, r5, r7, lr}
 80050ce:	b084      	sub	sp, #16
 80050d0:	af00      	add	r7, sp, #0
 80050d2:	60f8      	str	r0, [r7, #12]
 80050d4:	60b9      	str	r1, [r7, #8]
 80050d6:	607a      	str	r2, [r7, #4]
  /* Process locked */
  __HAL_LOCK(hltdc);
 80050d8:	68fb      	ldr	r3, [r7, #12]
 80050da:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 80050de:	2b01      	cmp	r3, #1
 80050e0:	d101      	bne.n	80050e6 <HAL_LTDC_ConfigLayer+0x1a>
 80050e2:	2302      	movs	r3, #2
 80050e4:	e02c      	b.n	8005140 <HAL_LTDC_ConfigLayer+0x74>
 80050e6:	68fb      	ldr	r3, [r7, #12]
 80050e8:	2201      	movs	r2, #1
 80050ea:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
  
  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 80050ee:	68fb      	ldr	r3, [r7, #12]
 80050f0:	2202      	movs	r2, #2
 80050f2:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1
  assert_param(IS_LTDC_ALPHA(pLayerCfg->Alpha0));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;  
 80050f6:	68fa      	ldr	r2, [r7, #12]
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	2134      	movs	r1, #52	; 0x34
 80050fc:	fb01 f303 	mul.w	r3, r1, r3
 8005100:	4413      	add	r3, r2
 8005102:	f103 0238 	add.w	r2, r3, #56	; 0x38
 8005106:	68bb      	ldr	r3, [r7, #8]
 8005108:	4614      	mov	r4, r2
 800510a:	461d      	mov	r5, r3
 800510c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800510e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005110:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005112:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005114:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005116:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005118:	682b      	ldr	r3, [r5, #0]
 800511a:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */  
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 800511c:	687a      	ldr	r2, [r7, #4]
 800511e:	68b9      	ldr	r1, [r7, #8]
 8005120:	68f8      	ldr	r0, [r7, #12]
 8005122:	f000 f81f 	bl	8005164 <LTDC_SetConfig>

  /* Sets the Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8005126:	68fb      	ldr	r3, [r7, #12]
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	2201      	movs	r2, #1
 800512c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 800512e:	68fb      	ldr	r3, [r7, #12]
 8005130:	2201      	movs	r2, #1
 8005132:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8005136:	68fb      	ldr	r3, [r7, #12]
 8005138:	2200      	movs	r2, #0
 800513a:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 800513e:	2300      	movs	r3, #0
}
 8005140:	4618      	mov	r0, r3
 8005142:	3710      	adds	r7, #16
 8005144:	46bd      	mov	sp, r7
 8005146:	bdb0      	pop	{r4, r5, r7, pc}

08005148 <HAL_LTDC_GetState>:
  * @param  hltdc pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL state
  */
HAL_LTDC_StateTypeDef HAL_LTDC_GetState(LTDC_HandleTypeDef *hltdc)
{
 8005148:	b480      	push	{r7}
 800514a:	b083      	sub	sp, #12
 800514c:	af00      	add	r7, sp, #0
 800514e:	6078      	str	r0, [r7, #4]
  return hltdc->State;
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 8005156:	b2db      	uxtb	r3, r3
}
 8005158:	4618      	mov	r0, r3
 800515a:	370c      	adds	r7, #12
 800515c:	46bd      	mov	sp, r7
 800515e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005162:	4770      	bx	lr

08005164 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                    This parameter can be one of the following values: 0 or 1
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8005164:	b480      	push	{r7}
 8005166:	b089      	sub	sp, #36	; 0x24
 8005168:	af00      	add	r7, sp, #0
 800516a:	60f8      	str	r0, [r7, #12]
 800516c:	60b9      	str	r1, [r7, #8]
 800516e:	607a      	str	r2, [r7, #4]
  uint32_t tmp = 0;
 8005170:	2300      	movs	r3, #0
 8005172:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1 = 0;
 8005174:	2300      	movs	r3, #0
 8005176:	61bb      	str	r3, [r7, #24]
  uint32_t tmp2 = 0;
 8005178:	2300      	movs	r3, #0
 800517a:	617b      	str	r3, [r7, #20]

  /* Configures the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16)) << 16);
 800517c:	68bb      	ldr	r3, [r7, #8]
 800517e:	685a      	ldr	r2, [r3, #4]
 8005180:	68fb      	ldr	r3, [r7, #12]
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	68db      	ldr	r3, [r3, #12]
 8005186:	0c1b      	lsrs	r3, r3, #16
 8005188:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800518c:	4413      	add	r3, r2
 800518e:	041b      	lsls	r3, r3, #16
 8005190:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8005192:	68fb      	ldr	r3, [r7, #12]
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	461a      	mov	r2, r3
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	01db      	lsls	r3, r3, #7
 800519c:	4413      	add	r3, r2
 800519e:	3384      	adds	r3, #132	; 0x84
 80051a0:	461a      	mov	r2, r3
 80051a2:	68fb      	ldr	r3, [r7, #12]
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	4619      	mov	r1, r3
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	01db      	lsls	r3, r3, #7
 80051ac:	440b      	add	r3, r1
 80051ae:	3384      	adds	r3, #132	; 0x84
 80051b0:	685b      	ldr	r3, [r3, #4]
 80051b2:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 80051b6:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16) + 1) | tmp);
 80051b8:	68fb      	ldr	r3, [r7, #12]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	461a      	mov	r2, r3
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	01db      	lsls	r3, r3, #7
 80051c2:	4413      	add	r3, r2
 80051c4:	3384      	adds	r3, #132	; 0x84
 80051c6:	4619      	mov	r1, r3
 80051c8:	68bb      	ldr	r3, [r7, #8]
 80051ca:	681a      	ldr	r2, [r3, #0]
 80051cc:	68fb      	ldr	r3, [r7, #12]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	68db      	ldr	r3, [r3, #12]
 80051d2:	0c1b      	lsrs	r3, r3, #16
 80051d4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80051d8:	4413      	add	r3, r2
 80051da:	1c5a      	adds	r2, r3, #1
 80051dc:	69fb      	ldr	r3, [r7, #28]
 80051de:	4313      	orrs	r3, r2
 80051e0:	604b      	str	r3, [r1, #4]

  /* Configures the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16);
 80051e2:	68bb      	ldr	r3, [r7, #8]
 80051e4:	68da      	ldr	r2, [r3, #12]
 80051e6:	68fb      	ldr	r3, [r7, #12]
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	68db      	ldr	r3, [r3, #12]
 80051ec:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80051f0:	4413      	add	r3, r2
 80051f2:	041b      	lsls	r3, r3, #16
 80051f4:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 80051f6:	68fb      	ldr	r3, [r7, #12]
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	461a      	mov	r2, r3
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	01db      	lsls	r3, r3, #7
 8005200:	4413      	add	r3, r2
 8005202:	3384      	adds	r3, #132	; 0x84
 8005204:	461a      	mov	r2, r3
 8005206:	68fb      	ldr	r3, [r7, #12]
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	4619      	mov	r1, r3
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	01db      	lsls	r3, r3, #7
 8005210:	440b      	add	r3, r1
 8005212:	3384      	adds	r3, #132	; 0x84
 8005214:	689b      	ldr	r3, [r3, #8]
 8005216:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 800521a:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1) | tmp);  
 800521c:	68fb      	ldr	r3, [r7, #12]
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	461a      	mov	r2, r3
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	01db      	lsls	r3, r3, #7
 8005226:	4413      	add	r3, r2
 8005228:	3384      	adds	r3, #132	; 0x84
 800522a:	4619      	mov	r1, r3
 800522c:	68bb      	ldr	r3, [r7, #8]
 800522e:	689a      	ldr	r2, [r3, #8]
 8005230:	68fb      	ldr	r3, [r7, #12]
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	68db      	ldr	r3, [r3, #12]
 8005236:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800523a:	4413      	add	r3, r2
 800523c:	1c5a      	adds	r2, r3, #1
 800523e:	69fb      	ldr	r3, [r7, #28]
 8005240:	4313      	orrs	r3, r2
 8005242:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 8005244:	68fb      	ldr	r3, [r7, #12]
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	461a      	mov	r2, r3
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	01db      	lsls	r3, r3, #7
 800524e:	4413      	add	r3, r2
 8005250:	3384      	adds	r3, #132	; 0x84
 8005252:	461a      	mov	r2, r3
 8005254:	68fb      	ldr	r3, [r7, #12]
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	4619      	mov	r1, r3
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	01db      	lsls	r3, r3, #7
 800525e:	440b      	add	r3, r1
 8005260:	3384      	adds	r3, #132	; 0x84
 8005262:	691b      	ldr	r3, [r3, #16]
 8005264:	f023 0307 	bic.w	r3, r3, #7
 8005268:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 800526a:	68fb      	ldr	r3, [r7, #12]
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	461a      	mov	r2, r3
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	01db      	lsls	r3, r3, #7
 8005274:	4413      	add	r3, r2
 8005276:	3384      	adds	r3, #132	; 0x84
 8005278:	461a      	mov	r2, r3
 800527a:	68bb      	ldr	r3, [r7, #8]
 800527c:	691b      	ldr	r3, [r3, #16]
 800527e:	6113      	str	r3, [r2, #16]

  /* Configures the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8);
 8005280:	68bb      	ldr	r3, [r7, #8]
 8005282:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8005286:	021b      	lsls	r3, r3, #8
 8005288:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16);
 800528a:	68bb      	ldr	r3, [r7, #8]
 800528c:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8005290:	041b      	lsls	r3, r3, #16
 8005292:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24);  
 8005294:	68bb      	ldr	r3, [r7, #8]
 8005296:	699b      	ldr	r3, [r3, #24]
 8005298:	061b      	lsls	r3, r3, #24
 800529a:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED | LTDC_LxDCCR_DCALPHA);
 800529c:	68fb      	ldr	r3, [r7, #12]
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	461a      	mov	r2, r3
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	01db      	lsls	r3, r3, #7
 80052a6:	4413      	add	r3, r2
 80052a8:	3384      	adds	r3, #132	; 0x84
 80052aa:	699b      	ldr	r3, [r3, #24]
 80052ac:	68fb      	ldr	r3, [r7, #12]
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	461a      	mov	r2, r3
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	01db      	lsls	r3, r3, #7
 80052b6:	4413      	add	r3, r2
 80052b8:	3384      	adds	r3, #132	; 0x84
 80052ba:	461a      	mov	r2, r3
 80052bc:	2300      	movs	r3, #0
 80052be:	6193      	str	r3, [r2, #24]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2); 
 80052c0:	68fb      	ldr	r3, [r7, #12]
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	461a      	mov	r2, r3
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	01db      	lsls	r3, r3, #7
 80052ca:	4413      	add	r3, r2
 80052cc:	3384      	adds	r3, #132	; 0x84
 80052ce:	4619      	mov	r1, r3
 80052d0:	68bb      	ldr	r3, [r7, #8]
 80052d2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80052d6:	461a      	mov	r2, r3
 80052d8:	69fb      	ldr	r3, [r7, #28]
 80052da:	431a      	orrs	r2, r3
 80052dc:	69bb      	ldr	r3, [r7, #24]
 80052de:	431a      	orrs	r2, r3
 80052e0:	697b      	ldr	r3, [r7, #20]
 80052e2:	4313      	orrs	r3, r2
 80052e4:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 80052e6:	68fb      	ldr	r3, [r7, #12]
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	461a      	mov	r2, r3
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	01db      	lsls	r3, r3, #7
 80052f0:	4413      	add	r3, r2
 80052f2:	3384      	adds	r3, #132	; 0x84
 80052f4:	461a      	mov	r2, r3
 80052f6:	68fb      	ldr	r3, [r7, #12]
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	4619      	mov	r1, r3
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	01db      	lsls	r3, r3, #7
 8005300:	440b      	add	r3, r1
 8005302:	3384      	adds	r3, #132	; 0x84
 8005304:	695b      	ldr	r3, [r3, #20]
 8005306:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800530a:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 800530c:	68fb      	ldr	r3, [r7, #12]
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	461a      	mov	r2, r3
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	01db      	lsls	r3, r3, #7
 8005316:	4413      	add	r3, r2
 8005318:	3384      	adds	r3, #132	; 0x84
 800531a:	461a      	mov	r2, r3
 800531c:	68bb      	ldr	r3, [r7, #8]
 800531e:	695b      	ldr	r3, [r3, #20]
 8005320:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 8005322:	68fb      	ldr	r3, [r7, #12]
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	461a      	mov	r2, r3
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	01db      	lsls	r3, r3, #7
 800532c:	4413      	add	r3, r2
 800532e:	3384      	adds	r3, #132	; 0x84
 8005330:	4619      	mov	r1, r3
 8005332:	68fb      	ldr	r3, [r7, #12]
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	461a      	mov	r2, r3
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	01db      	lsls	r3, r3, #7
 800533c:	4413      	add	r3, r2
 800533e:	3384      	adds	r3, #132	; 0x84
 8005340:	69da      	ldr	r2, [r3, #28]
 8005342:	4b5a      	ldr	r3, [pc, #360]	; (80054ac <LTDC_SetConfig+0x348>)
 8005344:	4013      	ands	r3, r2
 8005346:	61cb      	str	r3, [r1, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 8005348:	68fb      	ldr	r3, [r7, #12]
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	461a      	mov	r2, r3
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	01db      	lsls	r3, r3, #7
 8005352:	4413      	add	r3, r2
 8005354:	3384      	adds	r3, #132	; 0x84
 8005356:	4619      	mov	r1, r3
 8005358:	68bb      	ldr	r3, [r7, #8]
 800535a:	69da      	ldr	r2, [r3, #28]
 800535c:	68bb      	ldr	r3, [r7, #8]
 800535e:	6a1b      	ldr	r3, [r3, #32]
 8005360:	4313      	orrs	r3, r2
 8005362:	61cb      	str	r3, [r1, #28]

  /* Configures the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 8005364:	68fb      	ldr	r3, [r7, #12]
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	461a      	mov	r2, r3
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	01db      	lsls	r3, r3, #7
 800536e:	4413      	add	r3, r2
 8005370:	3384      	adds	r3, #132	; 0x84
 8005372:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005374:	68fb      	ldr	r3, [r7, #12]
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	461a      	mov	r2, r3
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	01db      	lsls	r3, r3, #7
 800537e:	4413      	add	r3, r2
 8005380:	3384      	adds	r3, #132	; 0x84
 8005382:	461a      	mov	r2, r3
 8005384:	2300      	movs	r3, #0
 8005386:	6293      	str	r3, [r2, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 8005388:	68fb      	ldr	r3, [r7, #12]
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	461a      	mov	r2, r3
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	01db      	lsls	r3, r3, #7
 8005392:	4413      	add	r3, r2
 8005394:	3384      	adds	r3, #132	; 0x84
 8005396:	461a      	mov	r2, r3
 8005398:	68bb      	ldr	r3, [r7, #8]
 800539a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800539c:	6293      	str	r3, [r2, #40]	; 0x28

  if(pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 800539e:	68bb      	ldr	r3, [r7, #8]
 80053a0:	691b      	ldr	r3, [r3, #16]
 80053a2:	2b00      	cmp	r3, #0
 80053a4:	d102      	bne.n	80053ac <LTDC_SetConfig+0x248>
  {
    tmp = 4;
 80053a6:	2304      	movs	r3, #4
 80053a8:	61fb      	str	r3, [r7, #28]
 80053aa:	e01b      	b.n	80053e4 <LTDC_SetConfig+0x280>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 80053ac:	68bb      	ldr	r3, [r7, #8]
 80053ae:	691b      	ldr	r3, [r3, #16]
 80053b0:	2b01      	cmp	r3, #1
 80053b2:	d102      	bne.n	80053ba <LTDC_SetConfig+0x256>
  {
    tmp = 3;
 80053b4:	2303      	movs	r3, #3
 80053b6:	61fb      	str	r3, [r7, #28]
 80053b8:	e014      	b.n	80053e4 <LTDC_SetConfig+0x280>
  }
  else if((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 80053ba:	68bb      	ldr	r3, [r7, #8]
 80053bc:	691b      	ldr	r3, [r3, #16]
 80053be:	2b04      	cmp	r3, #4
 80053c0:	d00b      	beq.n	80053da <LTDC_SetConfig+0x276>
    (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 80053c2:	68bb      	ldr	r3, [r7, #8]
 80053c4:	691b      	ldr	r3, [r3, #16]
  else if((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 80053c6:	2b02      	cmp	r3, #2
 80053c8:	d007      	beq.n	80053da <LTDC_SetConfig+0x276>
      (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 80053ca:	68bb      	ldr	r3, [r7, #8]
 80053cc:	691b      	ldr	r3, [r3, #16]
    (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 80053ce:	2b03      	cmp	r3, #3
 80053d0:	d003      	beq.n	80053da <LTDC_SetConfig+0x276>
        (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 80053d2:	68bb      	ldr	r3, [r7, #8]
 80053d4:	691b      	ldr	r3, [r3, #16]
      (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 80053d6:	2b07      	cmp	r3, #7
 80053d8:	d102      	bne.n	80053e0 <LTDC_SetConfig+0x27c>
  {
    tmp = 2;
 80053da:	2302      	movs	r3, #2
 80053dc:	61fb      	str	r3, [r7, #28]
 80053de:	e001      	b.n	80053e4 <LTDC_SetConfig+0x280>
  }
  else
  {
    tmp = 1;
 80053e0:	2301      	movs	r3, #1
 80053e2:	61fb      	str	r3, [r7, #28]
  }

  /* Configures the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 80053e4:	68fb      	ldr	r3, [r7, #12]
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	461a      	mov	r2, r3
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	01db      	lsls	r3, r3, #7
 80053ee:	4413      	add	r3, r2
 80053f0:	3384      	adds	r3, #132	; 0x84
 80053f2:	461a      	mov	r2, r3
 80053f4:	68fb      	ldr	r3, [r7, #12]
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	4619      	mov	r1, r3
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	01db      	lsls	r3, r3, #7
 80053fe:	440b      	add	r3, r1
 8005400:	3384      	adds	r3, #132	; 0x84
 8005402:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005404:	f003 23e0 	and.w	r3, r3, #3758153728	; 0xe000e000
 8005408:	62d3      	str	r3, [r2, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3));
 800540a:	68fb      	ldr	r3, [r7, #12]
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	461a      	mov	r2, r3
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	01db      	lsls	r3, r3, #7
 8005414:	4413      	add	r3, r2
 8005416:	3384      	adds	r3, #132	; 0x84
 8005418:	4618      	mov	r0, r3
 800541a:	68bb      	ldr	r3, [r7, #8]
 800541c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800541e:	69fa      	ldr	r2, [r7, #28]
 8005420:	fb02 f303 	mul.w	r3, r2, r3
 8005424:	041a      	lsls	r2, r3, #16
 8005426:	68bb      	ldr	r3, [r7, #8]
 8005428:	6859      	ldr	r1, [r3, #4]
 800542a:	68bb      	ldr	r3, [r7, #8]
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	1acb      	subs	r3, r1, r3
 8005430:	69f9      	ldr	r1, [r7, #28]
 8005432:	fb01 f303 	mul.w	r3, r1, r3
 8005436:	3303      	adds	r3, #3
 8005438:	4313      	orrs	r3, r2
 800543a:	62c3      	str	r3, [r0, #44]	; 0x2c

  /* Configures the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 800543c:	68fb      	ldr	r3, [r7, #12]
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	461a      	mov	r2, r3
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	01db      	lsls	r3, r3, #7
 8005446:	4413      	add	r3, r2
 8005448:	3384      	adds	r3, #132	; 0x84
 800544a:	4619      	mov	r1, r3
 800544c:	68fb      	ldr	r3, [r7, #12]
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	461a      	mov	r2, r3
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	01db      	lsls	r3, r3, #7
 8005456:	4413      	add	r3, r2
 8005458:	3384      	adds	r3, #132	; 0x84
 800545a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800545c:	4b14      	ldr	r3, [pc, #80]	; (80054b0 <LTDC_SetConfig+0x34c>)
 800545e:	4013      	ands	r3, r2
 8005460:	630b      	str	r3, [r1, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8005462:	68fb      	ldr	r3, [r7, #12]
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	461a      	mov	r2, r3
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	01db      	lsls	r3, r3, #7
 800546c:	4413      	add	r3, r2
 800546e:	3384      	adds	r3, #132	; 0x84
 8005470:	461a      	mov	r2, r3
 8005472:	68bb      	ldr	r3, [r7, #8]
 8005474:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005476:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */  
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 8005478:	68fb      	ldr	r3, [r7, #12]
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	461a      	mov	r2, r3
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	01db      	lsls	r3, r3, #7
 8005482:	4413      	add	r3, r2
 8005484:	3384      	adds	r3, #132	; 0x84
 8005486:	461a      	mov	r2, r3
 8005488:	68fb      	ldr	r3, [r7, #12]
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	4619      	mov	r1, r3
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	01db      	lsls	r3, r3, #7
 8005492:	440b      	add	r3, r1
 8005494:	3384      	adds	r3, #132	; 0x84
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	f043 0301 	orr.w	r3, r3, #1
 800549c:	6013      	str	r3, [r2, #0]
}
 800549e:	bf00      	nop
 80054a0:	3724      	adds	r7, #36	; 0x24
 80054a2:	46bd      	mov	sp, r7
 80054a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054a8:	4770      	bx	lr
 80054aa:	bf00      	nop
 80054ac:	fffff8f8 	.word	0xfffff8f8
 80054b0:	fffff800 	.word	0xfffff800

080054b4 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 80054b4:	b580      	push	{r7, lr}
 80054b6:	b082      	sub	sp, #8
 80054b8:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 80054ba:	2300      	movs	r3, #0
 80054bc:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 80054be:	4a23      	ldr	r2, [pc, #140]	; (800554c <HAL_PWREx_EnableOverDrive+0x98>)
 80054c0:	4b22      	ldr	r3, [pc, #136]	; (800554c <HAL_PWREx_EnableOverDrive+0x98>)
 80054c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054c4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80054c8:	6413      	str	r3, [r2, #64]	; 0x40
 80054ca:	4b20      	ldr	r3, [pc, #128]	; (800554c <HAL_PWREx_EnableOverDrive+0x98>)
 80054cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80054d2:	603b      	str	r3, [r7, #0]
 80054d4:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 80054d6:	4a1e      	ldr	r2, [pc, #120]	; (8005550 <HAL_PWREx_EnableOverDrive+0x9c>)
 80054d8:	4b1d      	ldr	r3, [pc, #116]	; (8005550 <HAL_PWREx_EnableOverDrive+0x9c>)
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80054e0:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80054e2:	f7fd fd7b 	bl	8002fdc <HAL_GetTick>
 80054e6:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80054e8:	e009      	b.n	80054fe <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80054ea:	f7fd fd77 	bl	8002fdc <HAL_GetTick>
 80054ee:	4602      	mov	r2, r0
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	1ad3      	subs	r3, r2, r3
 80054f4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80054f8:	d901      	bls.n	80054fe <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 80054fa:	2303      	movs	r3, #3
 80054fc:	e022      	b.n	8005544 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80054fe:	4b14      	ldr	r3, [pc, #80]	; (8005550 <HAL_PWREx_EnableOverDrive+0x9c>)
 8005500:	685b      	ldr	r3, [r3, #4]
 8005502:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005506:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800550a:	d1ee      	bne.n	80054ea <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 800550c:	4a10      	ldr	r2, [pc, #64]	; (8005550 <HAL_PWREx_EnableOverDrive+0x9c>)
 800550e:	4b10      	ldr	r3, [pc, #64]	; (8005550 <HAL_PWREx_EnableOverDrive+0x9c>)
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005516:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8005518:	f7fd fd60 	bl	8002fdc <HAL_GetTick>
 800551c:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800551e:	e009      	b.n	8005534 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8005520:	f7fd fd5c 	bl	8002fdc <HAL_GetTick>
 8005524:	4602      	mov	r2, r0
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	1ad3      	subs	r3, r2, r3
 800552a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800552e:	d901      	bls.n	8005534 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8005530:	2303      	movs	r3, #3
 8005532:	e007      	b.n	8005544 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8005534:	4b06      	ldr	r3, [pc, #24]	; (8005550 <HAL_PWREx_EnableOverDrive+0x9c>)
 8005536:	685b      	ldr	r3, [r3, #4]
 8005538:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800553c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005540:	d1ee      	bne.n	8005520 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8005542:	2300      	movs	r3, #0
}
 8005544:	4618      	mov	r0, r3
 8005546:	3708      	adds	r7, #8
 8005548:	46bd      	mov	sp, r7
 800554a:	bd80      	pop	{r7, pc}
 800554c:	40023800 	.word	0x40023800
 8005550:	40007000 	.word	0x40007000

08005554 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005554:	b580      	push	{r7, lr}
 8005556:	b086      	sub	sp, #24
 8005558:	af00      	add	r7, sp, #0
 800555a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  FlagStatus pwrclkchanged = RESET;
 800555c:	2300      	movs	r3, #0
 800555e:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	2b00      	cmp	r3, #0
 8005564:	d101      	bne.n	800556a <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8005566:	2301      	movs	r3, #1
 8005568:	e25c      	b.n	8005a24 <HAL_RCC_OscConfig+0x4d0>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	f003 0301 	and.w	r3, r3, #1
 8005572:	2b00      	cmp	r3, #0
 8005574:	f000 8087 	beq.w	8005686 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8005578:	4b96      	ldr	r3, [pc, #600]	; (80057d4 <HAL_RCC_OscConfig+0x280>)
 800557a:	689b      	ldr	r3, [r3, #8]
 800557c:	f003 030c 	and.w	r3, r3, #12
 8005580:	2b04      	cmp	r3, #4
 8005582:	d00c      	beq.n	800559e <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005584:	4b93      	ldr	r3, [pc, #588]	; (80057d4 <HAL_RCC_OscConfig+0x280>)
 8005586:	689b      	ldr	r3, [r3, #8]
 8005588:	f003 030c 	and.w	r3, r3, #12
 800558c:	2b08      	cmp	r3, #8
 800558e:	d112      	bne.n	80055b6 <HAL_RCC_OscConfig+0x62>
 8005590:	4b90      	ldr	r3, [pc, #576]	; (80057d4 <HAL_RCC_OscConfig+0x280>)
 8005592:	685b      	ldr	r3, [r3, #4]
 8005594:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005598:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800559c:	d10b      	bne.n	80055b6 <HAL_RCC_OscConfig+0x62>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800559e:	4b8d      	ldr	r3, [pc, #564]	; (80057d4 <HAL_RCC_OscConfig+0x280>)
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80055a6:	2b00      	cmp	r3, #0
 80055a8:	d06c      	beq.n	8005684 <HAL_RCC_OscConfig+0x130>
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	685b      	ldr	r3, [r3, #4]
 80055ae:	2b00      	cmp	r3, #0
 80055b0:	d168      	bne.n	8005684 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80055b2:	2301      	movs	r3, #1
 80055b4:	e236      	b.n	8005a24 <HAL_RCC_OscConfig+0x4d0>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	685b      	ldr	r3, [r3, #4]
 80055ba:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80055be:	d106      	bne.n	80055ce <HAL_RCC_OscConfig+0x7a>
 80055c0:	4a84      	ldr	r2, [pc, #528]	; (80057d4 <HAL_RCC_OscConfig+0x280>)
 80055c2:	4b84      	ldr	r3, [pc, #528]	; (80057d4 <HAL_RCC_OscConfig+0x280>)
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80055ca:	6013      	str	r3, [r2, #0]
 80055cc:	e02e      	b.n	800562c <HAL_RCC_OscConfig+0xd8>
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	685b      	ldr	r3, [r3, #4]
 80055d2:	2b00      	cmp	r3, #0
 80055d4:	d10c      	bne.n	80055f0 <HAL_RCC_OscConfig+0x9c>
 80055d6:	4a7f      	ldr	r2, [pc, #508]	; (80057d4 <HAL_RCC_OscConfig+0x280>)
 80055d8:	4b7e      	ldr	r3, [pc, #504]	; (80057d4 <HAL_RCC_OscConfig+0x280>)
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80055e0:	6013      	str	r3, [r2, #0]
 80055e2:	4a7c      	ldr	r2, [pc, #496]	; (80057d4 <HAL_RCC_OscConfig+0x280>)
 80055e4:	4b7b      	ldr	r3, [pc, #492]	; (80057d4 <HAL_RCC_OscConfig+0x280>)
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80055ec:	6013      	str	r3, [r2, #0]
 80055ee:	e01d      	b.n	800562c <HAL_RCC_OscConfig+0xd8>
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	685b      	ldr	r3, [r3, #4]
 80055f4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80055f8:	d10c      	bne.n	8005614 <HAL_RCC_OscConfig+0xc0>
 80055fa:	4a76      	ldr	r2, [pc, #472]	; (80057d4 <HAL_RCC_OscConfig+0x280>)
 80055fc:	4b75      	ldr	r3, [pc, #468]	; (80057d4 <HAL_RCC_OscConfig+0x280>)
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005604:	6013      	str	r3, [r2, #0]
 8005606:	4a73      	ldr	r2, [pc, #460]	; (80057d4 <HAL_RCC_OscConfig+0x280>)
 8005608:	4b72      	ldr	r3, [pc, #456]	; (80057d4 <HAL_RCC_OscConfig+0x280>)
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005610:	6013      	str	r3, [r2, #0]
 8005612:	e00b      	b.n	800562c <HAL_RCC_OscConfig+0xd8>
 8005614:	4a6f      	ldr	r2, [pc, #444]	; (80057d4 <HAL_RCC_OscConfig+0x280>)
 8005616:	4b6f      	ldr	r3, [pc, #444]	; (80057d4 <HAL_RCC_OscConfig+0x280>)
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800561e:	6013      	str	r3, [r2, #0]
 8005620:	4a6c      	ldr	r2, [pc, #432]	; (80057d4 <HAL_RCC_OscConfig+0x280>)
 8005622:	4b6c      	ldr	r3, [pc, #432]	; (80057d4 <HAL_RCC_OscConfig+0x280>)
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800562a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	685b      	ldr	r3, [r3, #4]
 8005630:	2b00      	cmp	r3, #0
 8005632:	d013      	beq.n	800565c <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005634:	f7fd fcd2 	bl	8002fdc <HAL_GetTick>
 8005638:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800563a:	e008      	b.n	800564e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800563c:	f7fd fcce 	bl	8002fdc <HAL_GetTick>
 8005640:	4602      	mov	r2, r0
 8005642:	693b      	ldr	r3, [r7, #16]
 8005644:	1ad3      	subs	r3, r2, r3
 8005646:	2b64      	cmp	r3, #100	; 0x64
 8005648:	d901      	bls.n	800564e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800564a:	2303      	movs	r3, #3
 800564c:	e1ea      	b.n	8005a24 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800564e:	4b61      	ldr	r3, [pc, #388]	; (80057d4 <HAL_RCC_OscConfig+0x280>)
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005656:	2b00      	cmp	r3, #0
 8005658:	d0f0      	beq.n	800563c <HAL_RCC_OscConfig+0xe8>
 800565a:	e014      	b.n	8005686 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800565c:	f7fd fcbe 	bl	8002fdc <HAL_GetTick>
 8005660:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005662:	e008      	b.n	8005676 <HAL_RCC_OscConfig+0x122>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005664:	f7fd fcba 	bl	8002fdc <HAL_GetTick>
 8005668:	4602      	mov	r2, r0
 800566a:	693b      	ldr	r3, [r7, #16]
 800566c:	1ad3      	subs	r3, r2, r3
 800566e:	2b64      	cmp	r3, #100	; 0x64
 8005670:	d901      	bls.n	8005676 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8005672:	2303      	movs	r3, #3
 8005674:	e1d6      	b.n	8005a24 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005676:	4b57      	ldr	r3, [pc, #348]	; (80057d4 <HAL_RCC_OscConfig+0x280>)
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800567e:	2b00      	cmp	r3, #0
 8005680:	d1f0      	bne.n	8005664 <HAL_RCC_OscConfig+0x110>
 8005682:	e000      	b.n	8005686 <HAL_RCC_OscConfig+0x132>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005684:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	f003 0302 	and.w	r3, r3, #2
 800568e:	2b00      	cmp	r3, #0
 8005690:	d069      	beq.n	8005766 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8005692:	4b50      	ldr	r3, [pc, #320]	; (80057d4 <HAL_RCC_OscConfig+0x280>)
 8005694:	689b      	ldr	r3, [r3, #8]
 8005696:	f003 030c 	and.w	r3, r3, #12
 800569a:	2b00      	cmp	r3, #0
 800569c:	d00b      	beq.n	80056b6 <HAL_RCC_OscConfig+0x162>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800569e:	4b4d      	ldr	r3, [pc, #308]	; (80057d4 <HAL_RCC_OscConfig+0x280>)
 80056a0:	689b      	ldr	r3, [r3, #8]
 80056a2:	f003 030c 	and.w	r3, r3, #12
 80056a6:	2b08      	cmp	r3, #8
 80056a8:	d11c      	bne.n	80056e4 <HAL_RCC_OscConfig+0x190>
 80056aa:	4b4a      	ldr	r3, [pc, #296]	; (80057d4 <HAL_RCC_OscConfig+0x280>)
 80056ac:	685b      	ldr	r3, [r3, #4]
 80056ae:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80056b2:	2b00      	cmp	r3, #0
 80056b4:	d116      	bne.n	80056e4 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80056b6:	4b47      	ldr	r3, [pc, #284]	; (80057d4 <HAL_RCC_OscConfig+0x280>)
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	f003 0302 	and.w	r3, r3, #2
 80056be:	2b00      	cmp	r3, #0
 80056c0:	d005      	beq.n	80056ce <HAL_RCC_OscConfig+0x17a>
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	68db      	ldr	r3, [r3, #12]
 80056c6:	2b01      	cmp	r3, #1
 80056c8:	d001      	beq.n	80056ce <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80056ca:	2301      	movs	r3, #1
 80056cc:	e1aa      	b.n	8005a24 <HAL_RCC_OscConfig+0x4d0>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80056ce:	4941      	ldr	r1, [pc, #260]	; (80057d4 <HAL_RCC_OscConfig+0x280>)
 80056d0:	4b40      	ldr	r3, [pc, #256]	; (80057d4 <HAL_RCC_OscConfig+0x280>)
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	691b      	ldr	r3, [r3, #16]
 80056dc:	00db      	lsls	r3, r3, #3
 80056de:	4313      	orrs	r3, r2
 80056e0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80056e2:	e040      	b.n	8005766 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	68db      	ldr	r3, [r3, #12]
 80056e8:	2b00      	cmp	r3, #0
 80056ea:	d023      	beq.n	8005734 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80056ec:	4a39      	ldr	r2, [pc, #228]	; (80057d4 <HAL_RCC_OscConfig+0x280>)
 80056ee:	4b39      	ldr	r3, [pc, #228]	; (80057d4 <HAL_RCC_OscConfig+0x280>)
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	f043 0301 	orr.w	r3, r3, #1
 80056f6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80056f8:	f7fd fc70 	bl	8002fdc <HAL_GetTick>
 80056fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80056fe:	e008      	b.n	8005712 <HAL_RCC_OscConfig+0x1be>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005700:	f7fd fc6c 	bl	8002fdc <HAL_GetTick>
 8005704:	4602      	mov	r2, r0
 8005706:	693b      	ldr	r3, [r7, #16]
 8005708:	1ad3      	subs	r3, r2, r3
 800570a:	2b02      	cmp	r3, #2
 800570c:	d901      	bls.n	8005712 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 800570e:	2303      	movs	r3, #3
 8005710:	e188      	b.n	8005a24 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005712:	4b30      	ldr	r3, [pc, #192]	; (80057d4 <HAL_RCC_OscConfig+0x280>)
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	f003 0302 	and.w	r3, r3, #2
 800571a:	2b00      	cmp	r3, #0
 800571c:	d0f0      	beq.n	8005700 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800571e:	492d      	ldr	r1, [pc, #180]	; (80057d4 <HAL_RCC_OscConfig+0x280>)
 8005720:	4b2c      	ldr	r3, [pc, #176]	; (80057d4 <HAL_RCC_OscConfig+0x280>)
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	691b      	ldr	r3, [r3, #16]
 800572c:	00db      	lsls	r3, r3, #3
 800572e:	4313      	orrs	r3, r2
 8005730:	600b      	str	r3, [r1, #0]
 8005732:	e018      	b.n	8005766 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005734:	4a27      	ldr	r2, [pc, #156]	; (80057d4 <HAL_RCC_OscConfig+0x280>)
 8005736:	4b27      	ldr	r3, [pc, #156]	; (80057d4 <HAL_RCC_OscConfig+0x280>)
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	f023 0301 	bic.w	r3, r3, #1
 800573e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005740:	f7fd fc4c 	bl	8002fdc <HAL_GetTick>
 8005744:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005746:	e008      	b.n	800575a <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005748:	f7fd fc48 	bl	8002fdc <HAL_GetTick>
 800574c:	4602      	mov	r2, r0
 800574e:	693b      	ldr	r3, [r7, #16]
 8005750:	1ad3      	subs	r3, r2, r3
 8005752:	2b02      	cmp	r3, #2
 8005754:	d901      	bls.n	800575a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8005756:	2303      	movs	r3, #3
 8005758:	e164      	b.n	8005a24 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800575a:	4b1e      	ldr	r3, [pc, #120]	; (80057d4 <HAL_RCC_OscConfig+0x280>)
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	f003 0302 	and.w	r3, r3, #2
 8005762:	2b00      	cmp	r3, #0
 8005764:	d1f0      	bne.n	8005748 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	f003 0308 	and.w	r3, r3, #8
 800576e:	2b00      	cmp	r3, #0
 8005770:	d038      	beq.n	80057e4 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	695b      	ldr	r3, [r3, #20]
 8005776:	2b00      	cmp	r3, #0
 8005778:	d019      	beq.n	80057ae <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800577a:	4a16      	ldr	r2, [pc, #88]	; (80057d4 <HAL_RCC_OscConfig+0x280>)
 800577c:	4b15      	ldr	r3, [pc, #84]	; (80057d4 <HAL_RCC_OscConfig+0x280>)
 800577e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005780:	f043 0301 	orr.w	r3, r3, #1
 8005784:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005786:	f7fd fc29 	bl	8002fdc <HAL_GetTick>
 800578a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800578c:	e008      	b.n	80057a0 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800578e:	f7fd fc25 	bl	8002fdc <HAL_GetTick>
 8005792:	4602      	mov	r2, r0
 8005794:	693b      	ldr	r3, [r7, #16]
 8005796:	1ad3      	subs	r3, r2, r3
 8005798:	2b02      	cmp	r3, #2
 800579a:	d901      	bls.n	80057a0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800579c:	2303      	movs	r3, #3
 800579e:	e141      	b.n	8005a24 <HAL_RCC_OscConfig+0x4d0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80057a0:	4b0c      	ldr	r3, [pc, #48]	; (80057d4 <HAL_RCC_OscConfig+0x280>)
 80057a2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80057a4:	f003 0302 	and.w	r3, r3, #2
 80057a8:	2b00      	cmp	r3, #0
 80057aa:	d0f0      	beq.n	800578e <HAL_RCC_OscConfig+0x23a>
 80057ac:	e01a      	b.n	80057e4 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80057ae:	4a09      	ldr	r2, [pc, #36]	; (80057d4 <HAL_RCC_OscConfig+0x280>)
 80057b0:	4b08      	ldr	r3, [pc, #32]	; (80057d4 <HAL_RCC_OscConfig+0x280>)
 80057b2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80057b4:	f023 0301 	bic.w	r3, r3, #1
 80057b8:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80057ba:	f7fd fc0f 	bl	8002fdc <HAL_GetTick>
 80057be:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80057c0:	e00a      	b.n	80057d8 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80057c2:	f7fd fc0b 	bl	8002fdc <HAL_GetTick>
 80057c6:	4602      	mov	r2, r0
 80057c8:	693b      	ldr	r3, [r7, #16]
 80057ca:	1ad3      	subs	r3, r2, r3
 80057cc:	2b02      	cmp	r3, #2
 80057ce:	d903      	bls.n	80057d8 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80057d0:	2303      	movs	r3, #3
 80057d2:	e127      	b.n	8005a24 <HAL_RCC_OscConfig+0x4d0>
 80057d4:	40023800 	.word	0x40023800
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80057d8:	4b94      	ldr	r3, [pc, #592]	; (8005a2c <HAL_RCC_OscConfig+0x4d8>)
 80057da:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80057dc:	f003 0302 	and.w	r3, r3, #2
 80057e0:	2b00      	cmp	r3, #0
 80057e2:	d1ee      	bne.n	80057c2 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	f003 0304 	and.w	r3, r3, #4
 80057ec:	2b00      	cmp	r3, #0
 80057ee:	f000 80a4 	beq.w	800593a <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80057f2:	4b8e      	ldr	r3, [pc, #568]	; (8005a2c <HAL_RCC_OscConfig+0x4d8>)
 80057f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80057fa:	2b00      	cmp	r3, #0
 80057fc:	d10d      	bne.n	800581a <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 80057fe:	4a8b      	ldr	r2, [pc, #556]	; (8005a2c <HAL_RCC_OscConfig+0x4d8>)
 8005800:	4b8a      	ldr	r3, [pc, #552]	; (8005a2c <HAL_RCC_OscConfig+0x4d8>)
 8005802:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005804:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005808:	6413      	str	r3, [r2, #64]	; 0x40
 800580a:	4b88      	ldr	r3, [pc, #544]	; (8005a2c <HAL_RCC_OscConfig+0x4d8>)
 800580c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800580e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005812:	60fb      	str	r3, [r7, #12]
 8005814:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8005816:	2301      	movs	r3, #1
 8005818:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800581a:	4b85      	ldr	r3, [pc, #532]	; (8005a30 <HAL_RCC_OscConfig+0x4dc>)
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005822:	2b00      	cmp	r3, #0
 8005824:	d118      	bne.n	8005858 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8005826:	4a82      	ldr	r2, [pc, #520]	; (8005a30 <HAL_RCC_OscConfig+0x4dc>)
 8005828:	4b81      	ldr	r3, [pc, #516]	; (8005a30 <HAL_RCC_OscConfig+0x4dc>)
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005830:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005832:	f7fd fbd3 	bl	8002fdc <HAL_GetTick>
 8005836:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005838:	e008      	b.n	800584c <HAL_RCC_OscConfig+0x2f8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800583a:	f7fd fbcf 	bl	8002fdc <HAL_GetTick>
 800583e:	4602      	mov	r2, r0
 8005840:	693b      	ldr	r3, [r7, #16]
 8005842:	1ad3      	subs	r3, r2, r3
 8005844:	2b64      	cmp	r3, #100	; 0x64
 8005846:	d901      	bls.n	800584c <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8005848:	2303      	movs	r3, #3
 800584a:	e0eb      	b.n	8005a24 <HAL_RCC_OscConfig+0x4d0>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800584c:	4b78      	ldr	r3, [pc, #480]	; (8005a30 <HAL_RCC_OscConfig+0x4dc>)
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005854:	2b00      	cmp	r3, #0
 8005856:	d0f0      	beq.n	800583a <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	689b      	ldr	r3, [r3, #8]
 800585c:	2b01      	cmp	r3, #1
 800585e:	d106      	bne.n	800586e <HAL_RCC_OscConfig+0x31a>
 8005860:	4a72      	ldr	r2, [pc, #456]	; (8005a2c <HAL_RCC_OscConfig+0x4d8>)
 8005862:	4b72      	ldr	r3, [pc, #456]	; (8005a2c <HAL_RCC_OscConfig+0x4d8>)
 8005864:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005866:	f043 0301 	orr.w	r3, r3, #1
 800586a:	6713      	str	r3, [r2, #112]	; 0x70
 800586c:	e02d      	b.n	80058ca <HAL_RCC_OscConfig+0x376>
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	689b      	ldr	r3, [r3, #8]
 8005872:	2b00      	cmp	r3, #0
 8005874:	d10c      	bne.n	8005890 <HAL_RCC_OscConfig+0x33c>
 8005876:	4a6d      	ldr	r2, [pc, #436]	; (8005a2c <HAL_RCC_OscConfig+0x4d8>)
 8005878:	4b6c      	ldr	r3, [pc, #432]	; (8005a2c <HAL_RCC_OscConfig+0x4d8>)
 800587a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800587c:	f023 0301 	bic.w	r3, r3, #1
 8005880:	6713      	str	r3, [r2, #112]	; 0x70
 8005882:	4a6a      	ldr	r2, [pc, #424]	; (8005a2c <HAL_RCC_OscConfig+0x4d8>)
 8005884:	4b69      	ldr	r3, [pc, #420]	; (8005a2c <HAL_RCC_OscConfig+0x4d8>)
 8005886:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005888:	f023 0304 	bic.w	r3, r3, #4
 800588c:	6713      	str	r3, [r2, #112]	; 0x70
 800588e:	e01c      	b.n	80058ca <HAL_RCC_OscConfig+0x376>
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	689b      	ldr	r3, [r3, #8]
 8005894:	2b05      	cmp	r3, #5
 8005896:	d10c      	bne.n	80058b2 <HAL_RCC_OscConfig+0x35e>
 8005898:	4a64      	ldr	r2, [pc, #400]	; (8005a2c <HAL_RCC_OscConfig+0x4d8>)
 800589a:	4b64      	ldr	r3, [pc, #400]	; (8005a2c <HAL_RCC_OscConfig+0x4d8>)
 800589c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800589e:	f043 0304 	orr.w	r3, r3, #4
 80058a2:	6713      	str	r3, [r2, #112]	; 0x70
 80058a4:	4a61      	ldr	r2, [pc, #388]	; (8005a2c <HAL_RCC_OscConfig+0x4d8>)
 80058a6:	4b61      	ldr	r3, [pc, #388]	; (8005a2c <HAL_RCC_OscConfig+0x4d8>)
 80058a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80058aa:	f043 0301 	orr.w	r3, r3, #1
 80058ae:	6713      	str	r3, [r2, #112]	; 0x70
 80058b0:	e00b      	b.n	80058ca <HAL_RCC_OscConfig+0x376>
 80058b2:	4a5e      	ldr	r2, [pc, #376]	; (8005a2c <HAL_RCC_OscConfig+0x4d8>)
 80058b4:	4b5d      	ldr	r3, [pc, #372]	; (8005a2c <HAL_RCC_OscConfig+0x4d8>)
 80058b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80058b8:	f023 0301 	bic.w	r3, r3, #1
 80058bc:	6713      	str	r3, [r2, #112]	; 0x70
 80058be:	4a5b      	ldr	r2, [pc, #364]	; (8005a2c <HAL_RCC_OscConfig+0x4d8>)
 80058c0:	4b5a      	ldr	r3, [pc, #360]	; (8005a2c <HAL_RCC_OscConfig+0x4d8>)
 80058c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80058c4:	f023 0304 	bic.w	r3, r3, #4
 80058c8:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	689b      	ldr	r3, [r3, #8]
 80058ce:	2b00      	cmp	r3, #0
 80058d0:	d015      	beq.n	80058fe <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80058d2:	f7fd fb83 	bl	8002fdc <HAL_GetTick>
 80058d6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80058d8:	e00a      	b.n	80058f0 <HAL_RCC_OscConfig+0x39c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80058da:	f7fd fb7f 	bl	8002fdc <HAL_GetTick>
 80058de:	4602      	mov	r2, r0
 80058e0:	693b      	ldr	r3, [r7, #16]
 80058e2:	1ad3      	subs	r3, r2, r3
 80058e4:	f241 3288 	movw	r2, #5000	; 0x1388
 80058e8:	4293      	cmp	r3, r2
 80058ea:	d901      	bls.n	80058f0 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 80058ec:	2303      	movs	r3, #3
 80058ee:	e099      	b.n	8005a24 <HAL_RCC_OscConfig+0x4d0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80058f0:	4b4e      	ldr	r3, [pc, #312]	; (8005a2c <HAL_RCC_OscConfig+0x4d8>)
 80058f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80058f4:	f003 0302 	and.w	r3, r3, #2
 80058f8:	2b00      	cmp	r3, #0
 80058fa:	d0ee      	beq.n	80058da <HAL_RCC_OscConfig+0x386>
 80058fc:	e014      	b.n	8005928 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80058fe:	f7fd fb6d 	bl	8002fdc <HAL_GetTick>
 8005902:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005904:	e00a      	b.n	800591c <HAL_RCC_OscConfig+0x3c8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005906:	f7fd fb69 	bl	8002fdc <HAL_GetTick>
 800590a:	4602      	mov	r2, r0
 800590c:	693b      	ldr	r3, [r7, #16]
 800590e:	1ad3      	subs	r3, r2, r3
 8005910:	f241 3288 	movw	r2, #5000	; 0x1388
 8005914:	4293      	cmp	r3, r2
 8005916:	d901      	bls.n	800591c <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8005918:	2303      	movs	r3, #3
 800591a:	e083      	b.n	8005a24 <HAL_RCC_OscConfig+0x4d0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800591c:	4b43      	ldr	r3, [pc, #268]	; (8005a2c <HAL_RCC_OscConfig+0x4d8>)
 800591e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005920:	f003 0302 	and.w	r3, r3, #2
 8005924:	2b00      	cmp	r3, #0
 8005926:	d1ee      	bne.n	8005906 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005928:	7dfb      	ldrb	r3, [r7, #23]
 800592a:	2b01      	cmp	r3, #1
 800592c:	d105      	bne.n	800593a <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800592e:	4a3f      	ldr	r2, [pc, #252]	; (8005a2c <HAL_RCC_OscConfig+0x4d8>)
 8005930:	4b3e      	ldr	r3, [pc, #248]	; (8005a2c <HAL_RCC_OscConfig+0x4d8>)
 8005932:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005934:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005938:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	699b      	ldr	r3, [r3, #24]
 800593e:	2b00      	cmp	r3, #0
 8005940:	d06f      	beq.n	8005a22 <HAL_RCC_OscConfig+0x4ce>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005942:	4b3a      	ldr	r3, [pc, #232]	; (8005a2c <HAL_RCC_OscConfig+0x4d8>)
 8005944:	689b      	ldr	r3, [r3, #8]
 8005946:	f003 030c 	and.w	r3, r3, #12
 800594a:	2b08      	cmp	r3, #8
 800594c:	d067      	beq.n	8005a1e <HAL_RCC_OscConfig+0x4ca>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	699b      	ldr	r3, [r3, #24]
 8005952:	2b02      	cmp	r3, #2
 8005954:	d149      	bne.n	80059ea <HAL_RCC_OscConfig+0x496>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005956:	4a35      	ldr	r2, [pc, #212]	; (8005a2c <HAL_RCC_OscConfig+0x4d8>)
 8005958:	4b34      	ldr	r3, [pc, #208]	; (8005a2c <HAL_RCC_OscConfig+0x4d8>)
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005960:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005962:	f7fd fb3b 	bl	8002fdc <HAL_GetTick>
 8005966:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005968:	e008      	b.n	800597c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800596a:	f7fd fb37 	bl	8002fdc <HAL_GetTick>
 800596e:	4602      	mov	r2, r0
 8005970:	693b      	ldr	r3, [r7, #16]
 8005972:	1ad3      	subs	r3, r2, r3
 8005974:	2b02      	cmp	r3, #2
 8005976:	d901      	bls.n	800597c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8005978:	2303      	movs	r3, #3
 800597a:	e053      	b.n	8005a24 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800597c:	4b2b      	ldr	r3, [pc, #172]	; (8005a2c <HAL_RCC_OscConfig+0x4d8>)
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005984:	2b00      	cmp	r3, #0
 8005986:	d1f0      	bne.n	800596a <HAL_RCC_OscConfig+0x416>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005988:	4928      	ldr	r1, [pc, #160]	; (8005a2c <HAL_RCC_OscConfig+0x4d8>)
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	69da      	ldr	r2, [r3, #28]
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	6a1b      	ldr	r3, [r3, #32]
 8005992:	431a      	orrs	r2, r3
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005998:	019b      	lsls	r3, r3, #6
 800599a:	431a      	orrs	r2, r3
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80059a0:	085b      	lsrs	r3, r3, #1
 80059a2:	3b01      	subs	r3, #1
 80059a4:	041b      	lsls	r3, r3, #16
 80059a6:	431a      	orrs	r2, r3
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80059ac:	061b      	lsls	r3, r3, #24
 80059ae:	4313      	orrs	r3, r2
 80059b0:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80059b4:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80059b6:	4a1d      	ldr	r2, [pc, #116]	; (8005a2c <HAL_RCC_OscConfig+0x4d8>)
 80059b8:	4b1c      	ldr	r3, [pc, #112]	; (8005a2c <HAL_RCC_OscConfig+0x4d8>)
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80059c0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80059c2:	f7fd fb0b 	bl	8002fdc <HAL_GetTick>
 80059c6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80059c8:	e008      	b.n	80059dc <HAL_RCC_OscConfig+0x488>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80059ca:	f7fd fb07 	bl	8002fdc <HAL_GetTick>
 80059ce:	4602      	mov	r2, r0
 80059d0:	693b      	ldr	r3, [r7, #16]
 80059d2:	1ad3      	subs	r3, r2, r3
 80059d4:	2b02      	cmp	r3, #2
 80059d6:	d901      	bls.n	80059dc <HAL_RCC_OscConfig+0x488>
          {
            return HAL_TIMEOUT;
 80059d8:	2303      	movs	r3, #3
 80059da:	e023      	b.n	8005a24 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80059dc:	4b13      	ldr	r3, [pc, #76]	; (8005a2c <HAL_RCC_OscConfig+0x4d8>)
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80059e4:	2b00      	cmp	r3, #0
 80059e6:	d0f0      	beq.n	80059ca <HAL_RCC_OscConfig+0x476>
 80059e8:	e01b      	b.n	8005a22 <HAL_RCC_OscConfig+0x4ce>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80059ea:	4a10      	ldr	r2, [pc, #64]	; (8005a2c <HAL_RCC_OscConfig+0x4d8>)
 80059ec:	4b0f      	ldr	r3, [pc, #60]	; (8005a2c <HAL_RCC_OscConfig+0x4d8>)
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80059f4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80059f6:	f7fd faf1 	bl	8002fdc <HAL_GetTick>
 80059fa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80059fc:	e008      	b.n	8005a10 <HAL_RCC_OscConfig+0x4bc>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80059fe:	f7fd faed 	bl	8002fdc <HAL_GetTick>
 8005a02:	4602      	mov	r2, r0
 8005a04:	693b      	ldr	r3, [r7, #16]
 8005a06:	1ad3      	subs	r3, r2, r3
 8005a08:	2b02      	cmp	r3, #2
 8005a0a:	d901      	bls.n	8005a10 <HAL_RCC_OscConfig+0x4bc>
          {
            return HAL_TIMEOUT;
 8005a0c:	2303      	movs	r3, #3
 8005a0e:	e009      	b.n	8005a24 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005a10:	4b06      	ldr	r3, [pc, #24]	; (8005a2c <HAL_RCC_OscConfig+0x4d8>)
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005a18:	2b00      	cmp	r3, #0
 8005a1a:	d1f0      	bne.n	80059fe <HAL_RCC_OscConfig+0x4aa>
 8005a1c:	e001      	b.n	8005a22 <HAL_RCC_OscConfig+0x4ce>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8005a1e:	2301      	movs	r3, #1
 8005a20:	e000      	b.n	8005a24 <HAL_RCC_OscConfig+0x4d0>
    }
  }
  return HAL_OK;
 8005a22:	2300      	movs	r3, #0
}
 8005a24:	4618      	mov	r0, r3
 8005a26:	3718      	adds	r7, #24
 8005a28:	46bd      	mov	sp, r7
 8005a2a:	bd80      	pop	{r7, pc}
 8005a2c:	40023800 	.word	0x40023800
 8005a30:	40007000 	.word	0x40007000

08005a34 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005a34:	b580      	push	{r7, lr}
 8005a36:	b084      	sub	sp, #16
 8005a38:	af00      	add	r7, sp, #0
 8005a3a:	6078      	str	r0, [r7, #4]
 8005a3c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8005a3e:	2300      	movs	r3, #0
 8005a40:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	2b00      	cmp	r3, #0
 8005a46:	d101      	bne.n	8005a4c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8005a48:	2301      	movs	r3, #1
 8005a4a:	e0ce      	b.n	8005bea <HAL_RCC_ClockConfig+0x1b6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005a4c:	4b69      	ldr	r3, [pc, #420]	; (8005bf4 <HAL_RCC_ClockConfig+0x1c0>)
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	f003 020f 	and.w	r2, r3, #15
 8005a54:	683b      	ldr	r3, [r7, #0]
 8005a56:	429a      	cmp	r2, r3
 8005a58:	d210      	bcs.n	8005a7c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005a5a:	4966      	ldr	r1, [pc, #408]	; (8005bf4 <HAL_RCC_ClockConfig+0x1c0>)
 8005a5c:	4b65      	ldr	r3, [pc, #404]	; (8005bf4 <HAL_RCC_ClockConfig+0x1c0>)
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	f023 020f 	bic.w	r2, r3, #15
 8005a64:	683b      	ldr	r3, [r7, #0]
 8005a66:	4313      	orrs	r3, r2
 8005a68:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005a6a:	4b62      	ldr	r3, [pc, #392]	; (8005bf4 <HAL_RCC_ClockConfig+0x1c0>)
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	f003 020f 	and.w	r2, r3, #15
 8005a72:	683b      	ldr	r3, [r7, #0]
 8005a74:	429a      	cmp	r2, r3
 8005a76:	d001      	beq.n	8005a7c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8005a78:	2301      	movs	r3, #1
 8005a7a:	e0b6      	b.n	8005bea <HAL_RCC_ClockConfig+0x1b6>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	f003 0302 	and.w	r3, r3, #2
 8005a84:	2b00      	cmp	r3, #0
 8005a86:	d020      	beq.n	8005aca <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	f003 0304 	and.w	r3, r3, #4
 8005a90:	2b00      	cmp	r3, #0
 8005a92:	d005      	beq.n	8005aa0 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005a94:	4a58      	ldr	r2, [pc, #352]	; (8005bf8 <HAL_RCC_ClockConfig+0x1c4>)
 8005a96:	4b58      	ldr	r3, [pc, #352]	; (8005bf8 <HAL_RCC_ClockConfig+0x1c4>)
 8005a98:	689b      	ldr	r3, [r3, #8]
 8005a9a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8005a9e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	f003 0308 	and.w	r3, r3, #8
 8005aa8:	2b00      	cmp	r3, #0
 8005aaa:	d005      	beq.n	8005ab8 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005aac:	4a52      	ldr	r2, [pc, #328]	; (8005bf8 <HAL_RCC_ClockConfig+0x1c4>)
 8005aae:	4b52      	ldr	r3, [pc, #328]	; (8005bf8 <HAL_RCC_ClockConfig+0x1c4>)
 8005ab0:	689b      	ldr	r3, [r3, #8]
 8005ab2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8005ab6:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005ab8:	494f      	ldr	r1, [pc, #316]	; (8005bf8 <HAL_RCC_ClockConfig+0x1c4>)
 8005aba:	4b4f      	ldr	r3, [pc, #316]	; (8005bf8 <HAL_RCC_ClockConfig+0x1c4>)
 8005abc:	689b      	ldr	r3, [r3, #8]
 8005abe:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	689b      	ldr	r3, [r3, #8]
 8005ac6:	4313      	orrs	r3, r2
 8005ac8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	f003 0301 	and.w	r3, r3, #1
 8005ad2:	2b00      	cmp	r3, #0
 8005ad4:	d040      	beq.n	8005b58 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	685b      	ldr	r3, [r3, #4]
 8005ada:	2b01      	cmp	r3, #1
 8005adc:	d107      	bne.n	8005aee <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005ade:	4b46      	ldr	r3, [pc, #280]	; (8005bf8 <HAL_RCC_ClockConfig+0x1c4>)
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005ae6:	2b00      	cmp	r3, #0
 8005ae8:	d115      	bne.n	8005b16 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8005aea:	2301      	movs	r3, #1
 8005aec:	e07d      	b.n	8005bea <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	685b      	ldr	r3, [r3, #4]
 8005af2:	2b02      	cmp	r3, #2
 8005af4:	d107      	bne.n	8005b06 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005af6:	4b40      	ldr	r3, [pc, #256]	; (8005bf8 <HAL_RCC_ClockConfig+0x1c4>)
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005afe:	2b00      	cmp	r3, #0
 8005b00:	d109      	bne.n	8005b16 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8005b02:	2301      	movs	r3, #1
 8005b04:	e071      	b.n	8005bea <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005b06:	4b3c      	ldr	r3, [pc, #240]	; (8005bf8 <HAL_RCC_ClockConfig+0x1c4>)
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	f003 0302 	and.w	r3, r3, #2
 8005b0e:	2b00      	cmp	r3, #0
 8005b10:	d101      	bne.n	8005b16 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8005b12:	2301      	movs	r3, #1
 8005b14:	e069      	b.n	8005bea <HAL_RCC_ClockConfig+0x1b6>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005b16:	4938      	ldr	r1, [pc, #224]	; (8005bf8 <HAL_RCC_ClockConfig+0x1c4>)
 8005b18:	4b37      	ldr	r3, [pc, #220]	; (8005bf8 <HAL_RCC_ClockConfig+0x1c4>)
 8005b1a:	689b      	ldr	r3, [r3, #8]
 8005b1c:	f023 0203 	bic.w	r2, r3, #3
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	685b      	ldr	r3, [r3, #4]
 8005b24:	4313      	orrs	r3, r2
 8005b26:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005b28:	f7fd fa58 	bl	8002fdc <HAL_GetTick>
 8005b2c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005b2e:	e00a      	b.n	8005b46 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005b30:	f7fd fa54 	bl	8002fdc <HAL_GetTick>
 8005b34:	4602      	mov	r2, r0
 8005b36:	68fb      	ldr	r3, [r7, #12]
 8005b38:	1ad3      	subs	r3, r2, r3
 8005b3a:	f241 3288 	movw	r2, #5000	; 0x1388
 8005b3e:	4293      	cmp	r3, r2
 8005b40:	d901      	bls.n	8005b46 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8005b42:	2303      	movs	r3, #3
 8005b44:	e051      	b.n	8005bea <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005b46:	4b2c      	ldr	r3, [pc, #176]	; (8005bf8 <HAL_RCC_ClockConfig+0x1c4>)
 8005b48:	689b      	ldr	r3, [r3, #8]
 8005b4a:	f003 020c 	and.w	r2, r3, #12
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	685b      	ldr	r3, [r3, #4]
 8005b52:	009b      	lsls	r3, r3, #2
 8005b54:	429a      	cmp	r2, r3
 8005b56:	d1eb      	bne.n	8005b30 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005b58:	4b26      	ldr	r3, [pc, #152]	; (8005bf4 <HAL_RCC_ClockConfig+0x1c0>)
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	f003 020f 	and.w	r2, r3, #15
 8005b60:	683b      	ldr	r3, [r7, #0]
 8005b62:	429a      	cmp	r2, r3
 8005b64:	d910      	bls.n	8005b88 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005b66:	4923      	ldr	r1, [pc, #140]	; (8005bf4 <HAL_RCC_ClockConfig+0x1c0>)
 8005b68:	4b22      	ldr	r3, [pc, #136]	; (8005bf4 <HAL_RCC_ClockConfig+0x1c0>)
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	f023 020f 	bic.w	r2, r3, #15
 8005b70:	683b      	ldr	r3, [r7, #0]
 8005b72:	4313      	orrs	r3, r2
 8005b74:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005b76:	4b1f      	ldr	r3, [pc, #124]	; (8005bf4 <HAL_RCC_ClockConfig+0x1c0>)
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	f003 020f 	and.w	r2, r3, #15
 8005b7e:	683b      	ldr	r3, [r7, #0]
 8005b80:	429a      	cmp	r2, r3
 8005b82:	d001      	beq.n	8005b88 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8005b84:	2301      	movs	r3, #1
 8005b86:	e030      	b.n	8005bea <HAL_RCC_ClockConfig+0x1b6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	f003 0304 	and.w	r3, r3, #4
 8005b90:	2b00      	cmp	r3, #0
 8005b92:	d008      	beq.n	8005ba6 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005b94:	4918      	ldr	r1, [pc, #96]	; (8005bf8 <HAL_RCC_ClockConfig+0x1c4>)
 8005b96:	4b18      	ldr	r3, [pc, #96]	; (8005bf8 <HAL_RCC_ClockConfig+0x1c4>)
 8005b98:	689b      	ldr	r3, [r3, #8]
 8005b9a:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	68db      	ldr	r3, [r3, #12]
 8005ba2:	4313      	orrs	r3, r2
 8005ba4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	f003 0308 	and.w	r3, r3, #8
 8005bae:	2b00      	cmp	r3, #0
 8005bb0:	d009      	beq.n	8005bc6 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8005bb2:	4911      	ldr	r1, [pc, #68]	; (8005bf8 <HAL_RCC_ClockConfig+0x1c4>)
 8005bb4:	4b10      	ldr	r3, [pc, #64]	; (8005bf8 <HAL_RCC_ClockConfig+0x1c4>)
 8005bb6:	689b      	ldr	r3, [r3, #8]
 8005bb8:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	691b      	ldr	r3, [r3, #16]
 8005bc0:	00db      	lsls	r3, r3, #3
 8005bc2:	4313      	orrs	r3, r2
 8005bc4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8005bc6:	f000 f81d 	bl	8005c04 <HAL_RCC_GetSysClockFreq>
 8005bca:	4601      	mov	r1, r0
 8005bcc:	4b0a      	ldr	r3, [pc, #40]	; (8005bf8 <HAL_RCC_ClockConfig+0x1c4>)
 8005bce:	689b      	ldr	r3, [r3, #8]
 8005bd0:	091b      	lsrs	r3, r3, #4
 8005bd2:	f003 030f 	and.w	r3, r3, #15
 8005bd6:	4a09      	ldr	r2, [pc, #36]	; (8005bfc <HAL_RCC_ClockConfig+0x1c8>)
 8005bd8:	5cd3      	ldrb	r3, [r2, r3]
 8005bda:	fa21 f303 	lsr.w	r3, r1, r3
 8005bde:	4a08      	ldr	r2, [pc, #32]	; (8005c00 <HAL_RCC_ClockConfig+0x1cc>)
 8005be0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8005be2:	2000      	movs	r0, #0
 8005be4:	f004 f936 	bl	8009e54 <HAL_InitTick>

  return HAL_OK;
 8005be8:	2300      	movs	r3, #0
}
 8005bea:	4618      	mov	r0, r3
 8005bec:	3710      	adds	r7, #16
 8005bee:	46bd      	mov	sp, r7
 8005bf0:	bd80      	pop	{r7, pc}
 8005bf2:	bf00      	nop
 8005bf4:	40023c00 	.word	0x40023c00
 8005bf8:	40023800 	.word	0x40023800
 8005bfc:	0800c090 	.word	0x0800c090
 8005c00:	2002c984 	.word	0x2002c984

08005c04 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005c04:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005c08:	b087      	sub	sp, #28
 8005c0a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8005c0c:	2200      	movs	r2, #0
 8005c0e:	60fa      	str	r2, [r7, #12]
 8005c10:	2200      	movs	r2, #0
 8005c12:	617a      	str	r2, [r7, #20]
 8005c14:	2200      	movs	r2, #0
 8005c16:	60ba      	str	r2, [r7, #8]
  uint32_t sysclockfreq = 0;
 8005c18:	2200      	movs	r2, #0
 8005c1a:	613a      	str	r2, [r7, #16]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005c1c:	4a51      	ldr	r2, [pc, #324]	; (8005d64 <HAL_RCC_GetSysClockFreq+0x160>)
 8005c1e:	6892      	ldr	r2, [r2, #8]
 8005c20:	f002 020c 	and.w	r2, r2, #12
 8005c24:	2a04      	cmp	r2, #4
 8005c26:	d007      	beq.n	8005c38 <HAL_RCC_GetSysClockFreq+0x34>
 8005c28:	2a08      	cmp	r2, #8
 8005c2a:	d008      	beq.n	8005c3e <HAL_RCC_GetSysClockFreq+0x3a>
 8005c2c:	2a00      	cmp	r2, #0
 8005c2e:	f040 8090 	bne.w	8005d52 <HAL_RCC_GetSysClockFreq+0x14e>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005c32:	4b4d      	ldr	r3, [pc, #308]	; (8005d68 <HAL_RCC_GetSysClockFreq+0x164>)
 8005c34:	613b      	str	r3, [r7, #16]
       break;
 8005c36:	e08f      	b.n	8005d58 <HAL_RCC_GetSysClockFreq+0x154>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005c38:	4b4c      	ldr	r3, [pc, #304]	; (8005d6c <HAL_RCC_GetSysClockFreq+0x168>)
 8005c3a:	613b      	str	r3, [r7, #16]
      break;
 8005c3c:	e08c      	b.n	8005d58 <HAL_RCC_GetSysClockFreq+0x154>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005c3e:	4a49      	ldr	r2, [pc, #292]	; (8005d64 <HAL_RCC_GetSysClockFreq+0x160>)
 8005c40:	6852      	ldr	r2, [r2, #4]
 8005c42:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 8005c46:	60fa      	str	r2, [r7, #12]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8005c48:	4a46      	ldr	r2, [pc, #280]	; (8005d64 <HAL_RCC_GetSysClockFreq+0x160>)
 8005c4a:	6852      	ldr	r2, [r2, #4]
 8005c4c:	f402 0280 	and.w	r2, r2, #4194304	; 0x400000
 8005c50:	2a00      	cmp	r2, #0
 8005c52:	d023      	beq.n	8005c9c <HAL_RCC_GetSysClockFreq+0x98>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005c54:	4b43      	ldr	r3, [pc, #268]	; (8005d64 <HAL_RCC_GetSysClockFreq+0x160>)
 8005c56:	685b      	ldr	r3, [r3, #4]
 8005c58:	099b      	lsrs	r3, r3, #6
 8005c5a:	f04f 0400 	mov.w	r4, #0
 8005c5e:	f240 11ff 	movw	r1, #511	; 0x1ff
 8005c62:	f04f 0200 	mov.w	r2, #0
 8005c66:	ea03 0301 	and.w	r3, r3, r1
 8005c6a:	ea04 0402 	and.w	r4, r4, r2
 8005c6e:	4a3f      	ldr	r2, [pc, #252]	; (8005d6c <HAL_RCC_GetSysClockFreq+0x168>)
 8005c70:	fb02 f104 	mul.w	r1, r2, r4
 8005c74:	2200      	movs	r2, #0
 8005c76:	fb02 f203 	mul.w	r2, r2, r3
 8005c7a:	440a      	add	r2, r1
 8005c7c:	493b      	ldr	r1, [pc, #236]	; (8005d6c <HAL_RCC_GetSysClockFreq+0x168>)
 8005c7e:	fba3 0101 	umull	r0, r1, r3, r1
 8005c82:	1853      	adds	r3, r2, r1
 8005c84:	4619      	mov	r1, r3
 8005c86:	68fb      	ldr	r3, [r7, #12]
 8005c88:	f04f 0400 	mov.w	r4, #0
 8005c8c:	461a      	mov	r2, r3
 8005c8e:	4623      	mov	r3, r4
 8005c90:	f7fa feac 	bl	80009ec <__aeabi_uldivmod>
 8005c94:	4603      	mov	r3, r0
 8005c96:	460c      	mov	r4, r1
 8005c98:	617b      	str	r3, [r7, #20]
 8005c9a:	e04c      	b.n	8005d36 <HAL_RCC_GetSysClockFreq+0x132>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005c9c:	4a31      	ldr	r2, [pc, #196]	; (8005d64 <HAL_RCC_GetSysClockFreq+0x160>)
 8005c9e:	6852      	ldr	r2, [r2, #4]
 8005ca0:	0992      	lsrs	r2, r2, #6
 8005ca2:	4611      	mov	r1, r2
 8005ca4:	f04f 0200 	mov.w	r2, #0
 8005ca8:	f240 15ff 	movw	r5, #511	; 0x1ff
 8005cac:	f04f 0600 	mov.w	r6, #0
 8005cb0:	ea05 0501 	and.w	r5, r5, r1
 8005cb4:	ea06 0602 	and.w	r6, r6, r2
 8005cb8:	4629      	mov	r1, r5
 8005cba:	4632      	mov	r2, r6
 8005cbc:	ea4f 1b42 	mov.w	fp, r2, lsl #5
 8005cc0:	ea4b 6bd1 	orr.w	fp, fp, r1, lsr #27
 8005cc4:	ea4f 1a41 	mov.w	sl, r1, lsl #5
 8005cc8:	4651      	mov	r1, sl
 8005cca:	465a      	mov	r2, fp
 8005ccc:	46aa      	mov	sl, r5
 8005cce:	46b3      	mov	fp, r6
 8005cd0:	4655      	mov	r5, sl
 8005cd2:	465e      	mov	r6, fp
 8005cd4:	1b4d      	subs	r5, r1, r5
 8005cd6:	eb62 0606 	sbc.w	r6, r2, r6
 8005cda:	4629      	mov	r1, r5
 8005cdc:	4632      	mov	r2, r6
 8005cde:	0194      	lsls	r4, r2, #6
 8005ce0:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8005ce4:	018b      	lsls	r3, r1, #6
 8005ce6:	1a5b      	subs	r3, r3, r1
 8005ce8:	eb64 0402 	sbc.w	r4, r4, r2
 8005cec:	ea4f 09c4 	mov.w	r9, r4, lsl #3
 8005cf0:	ea49 7953 	orr.w	r9, r9, r3, lsr #29
 8005cf4:	ea4f 08c3 	mov.w	r8, r3, lsl #3
 8005cf8:	4643      	mov	r3, r8
 8005cfa:	464c      	mov	r4, r9
 8005cfc:	4655      	mov	r5, sl
 8005cfe:	465e      	mov	r6, fp
 8005d00:	18ed      	adds	r5, r5, r3
 8005d02:	eb46 0604 	adc.w	r6, r6, r4
 8005d06:	462b      	mov	r3, r5
 8005d08:	4634      	mov	r4, r6
 8005d0a:	02a2      	lsls	r2, r4, #10
 8005d0c:	607a      	str	r2, [r7, #4]
 8005d0e:	687a      	ldr	r2, [r7, #4]
 8005d10:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8005d14:	607a      	str	r2, [r7, #4]
 8005d16:	029b      	lsls	r3, r3, #10
 8005d18:	603b      	str	r3, [r7, #0]
 8005d1a:	e897 0018 	ldmia.w	r7, {r3, r4}
 8005d1e:	4618      	mov	r0, r3
 8005d20:	4621      	mov	r1, r4
 8005d22:	68fb      	ldr	r3, [r7, #12]
 8005d24:	f04f 0400 	mov.w	r4, #0
 8005d28:	461a      	mov	r2, r3
 8005d2a:	4623      	mov	r3, r4
 8005d2c:	f7fa fe5e 	bl	80009ec <__aeabi_uldivmod>
 8005d30:	4603      	mov	r3, r0
 8005d32:	460c      	mov	r4, r1
 8005d34:	617b      	str	r3, [r7, #20]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1 ) *2);
 8005d36:	4b0b      	ldr	r3, [pc, #44]	; (8005d64 <HAL_RCC_GetSysClockFreq+0x160>)
 8005d38:	685b      	ldr	r3, [r3, #4]
 8005d3a:	0c1b      	lsrs	r3, r3, #16
 8005d3c:	f003 0303 	and.w	r3, r3, #3
 8005d40:	3301      	adds	r3, #1
 8005d42:	005b      	lsls	r3, r3, #1
 8005d44:	60bb      	str	r3, [r7, #8]

      sysclockfreq = pllvco/pllp;
 8005d46:	697a      	ldr	r2, [r7, #20]
 8005d48:	68bb      	ldr	r3, [r7, #8]
 8005d4a:	fbb2 f3f3 	udiv	r3, r2, r3
 8005d4e:	613b      	str	r3, [r7, #16]
      break;
 8005d50:	e002      	b.n	8005d58 <HAL_RCC_GetSysClockFreq+0x154>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005d52:	4b05      	ldr	r3, [pc, #20]	; (8005d68 <HAL_RCC_GetSysClockFreq+0x164>)
 8005d54:	613b      	str	r3, [r7, #16]
      break;
 8005d56:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005d58:	693b      	ldr	r3, [r7, #16]
}
 8005d5a:	4618      	mov	r0, r3
 8005d5c:	371c      	adds	r7, #28
 8005d5e:	46bd      	mov	sp, r7
 8005d60:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005d64:	40023800 	.word	0x40023800
 8005d68:	00f42400 	.word	0x00f42400
 8005d6c:	017d7840 	.word	0x017d7840

08005d70 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005d70:	b480      	push	{r7}
 8005d72:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005d74:	4b03      	ldr	r3, [pc, #12]	; (8005d84 <HAL_RCC_GetHCLKFreq+0x14>)
 8005d76:	681b      	ldr	r3, [r3, #0]
}
 8005d78:	4618      	mov	r0, r3
 8005d7a:	46bd      	mov	sp, r7
 8005d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d80:	4770      	bx	lr
 8005d82:	bf00      	nop
 8005d84:	2002c984 	.word	0x2002c984

08005d88 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005d88:	b580      	push	{r7, lr}
 8005d8a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8005d8c:	f7ff fff0 	bl	8005d70 <HAL_RCC_GetHCLKFreq>
 8005d90:	4601      	mov	r1, r0
 8005d92:	4b05      	ldr	r3, [pc, #20]	; (8005da8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005d94:	689b      	ldr	r3, [r3, #8]
 8005d96:	0a9b      	lsrs	r3, r3, #10
 8005d98:	f003 0307 	and.w	r3, r3, #7
 8005d9c:	4a03      	ldr	r2, [pc, #12]	; (8005dac <HAL_RCC_GetPCLK1Freq+0x24>)
 8005d9e:	5cd3      	ldrb	r3, [r2, r3]
 8005da0:	fa21 f303 	lsr.w	r3, r1, r3
}
 8005da4:	4618      	mov	r0, r3
 8005da6:	bd80      	pop	{r7, pc}
 8005da8:	40023800 	.word	0x40023800
 8005dac:	0800c0a0 	.word	0x0800c0a0

08005db0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005db0:	b580      	push	{r7, lr}
 8005db2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8005db4:	f7ff ffdc 	bl	8005d70 <HAL_RCC_GetHCLKFreq>
 8005db8:	4601      	mov	r1, r0
 8005dba:	4b05      	ldr	r3, [pc, #20]	; (8005dd0 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005dbc:	689b      	ldr	r3, [r3, #8]
 8005dbe:	0b5b      	lsrs	r3, r3, #13
 8005dc0:	f003 0307 	and.w	r3, r3, #7
 8005dc4:	4a03      	ldr	r2, [pc, #12]	; (8005dd4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005dc6:	5cd3      	ldrb	r3, [r2, r3]
 8005dc8:	fa21 f303 	lsr.w	r3, r1, r3
}
 8005dcc:	4618      	mov	r0, r3
 8005dce:	bd80      	pop	{r7, pc}
 8005dd0:	40023800 	.word	0x40023800
 8005dd4:	0800c0a0 	.word	0x0800c0a0

08005dd8 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8005dd8:	b480      	push	{r7}
 8005dda:	b083      	sub	sp, #12
 8005ddc:	af00      	add	r7, sp, #0
 8005dde:	6078      	str	r0, [r7, #4]
 8005de0:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	220f      	movs	r2, #15
 8005de6:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8005de8:	4b12      	ldr	r3, [pc, #72]	; (8005e34 <HAL_RCC_GetClockConfig+0x5c>)
 8005dea:	689b      	ldr	r3, [r3, #8]
 8005dec:	f003 0203 	and.w	r2, r3, #3
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8005df4:	4b0f      	ldr	r3, [pc, #60]	; (8005e34 <HAL_RCC_GetClockConfig+0x5c>)
 8005df6:	689b      	ldr	r3, [r3, #8]
 8005df8:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8005e00:	4b0c      	ldr	r3, [pc, #48]	; (8005e34 <HAL_RCC_GetClockConfig+0x5c>)
 8005e02:	689b      	ldr	r3, [r3, #8]
 8005e04:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8005e0c:	4b09      	ldr	r3, [pc, #36]	; (8005e34 <HAL_RCC_GetClockConfig+0x5c>)
 8005e0e:	689b      	ldr	r3, [r3, #8]
 8005e10:	08db      	lsrs	r3, r3, #3
 8005e12:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8005e1a:	4b07      	ldr	r3, [pc, #28]	; (8005e38 <HAL_RCC_GetClockConfig+0x60>)
 8005e1c:	681b      	ldr	r3, [r3, #0]
 8005e1e:	f003 020f 	and.w	r2, r3, #15
 8005e22:	683b      	ldr	r3, [r7, #0]
 8005e24:	601a      	str	r2, [r3, #0]
}
 8005e26:	bf00      	nop
 8005e28:	370c      	adds	r7, #12
 8005e2a:	46bd      	mov	sp, r7
 8005e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e30:	4770      	bx	lr
 8005e32:	bf00      	nop
 8005e34:	40023800 	.word	0x40023800
 8005e38:	40023c00 	.word	0x40023c00

08005e3c <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005e3c:	b580      	push	{r7, lr}
 8005e3e:	b088      	sub	sp, #32
 8005e40:	af00      	add	r7, sp, #0
 8005e42:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8005e44:	2300      	movs	r3, #0
 8005e46:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8005e48:	2300      	movs	r3, #0
 8005e4a:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8005e4c:	2300      	movs	r3, #0
 8005e4e:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8005e50:	2300      	movs	r3, #0
 8005e52:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8005e54:	2300      	movs	r3, #0
 8005e56:	61bb      	str	r3, [r7, #24]
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	681b      	ldr	r3, [r3, #0]
 8005e5c:	f003 0301 	and.w	r3, r3, #1
 8005e60:	2b00      	cmp	r3, #0
 8005e62:	d012      	beq.n	8005e8a <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8005e64:	4a69      	ldr	r2, [pc, #420]	; (800600c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005e66:	4b69      	ldr	r3, [pc, #420]	; (800600c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005e68:	689b      	ldr	r3, [r3, #8]
 8005e6a:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8005e6e:	6093      	str	r3, [r2, #8]
 8005e70:	4966      	ldr	r1, [pc, #408]	; (800600c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005e72:	4b66      	ldr	r3, [pc, #408]	; (800600c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005e74:	689a      	ldr	r2, [r3, #8]
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005e7a:	4313      	orrs	r3, r2
 8005e7c:	608b      	str	r3, [r1, #8]
    
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005e82:	2b00      	cmp	r3, #0
 8005e84:	d101      	bne.n	8005e8a <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1; 
 8005e86:	2301      	movs	r3, #1
 8005e88:	61fb      	str	r3, [r7, #28]
    }
  }
  
  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	681b      	ldr	r3, [r3, #0]
 8005e8e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005e92:	2b00      	cmp	r3, #0
 8005e94:	d017      	beq.n	8005ec6 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));
    
    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005e96:	495d      	ldr	r1, [pc, #372]	; (800600c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005e98:	4b5c      	ldr	r3, [pc, #368]	; (800600c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005e9a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005e9e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005ea6:	4313      	orrs	r3, r2
 8005ea8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005eb0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005eb4:	d101      	bne.n	8005eba <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1; 
 8005eb6:	2301      	movs	r3, #1
 8005eb8:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005ebe:	2b00      	cmp	r3, #0
 8005ec0:	d101      	bne.n	8005ec6 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1; 
 8005ec2:	2301      	movs	r3, #1
 8005ec4:	61bb      	str	r3, [r7, #24]
    }
  }
  
  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	681b      	ldr	r3, [r3, #0]
 8005eca:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005ece:	2b00      	cmp	r3, #0
 8005ed0:	d017      	beq.n	8005f02 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));
    
    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8005ed2:	494e      	ldr	r1, [pc, #312]	; (800600c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005ed4:	4b4d      	ldr	r3, [pc, #308]	; (800600c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005ed6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005eda:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ee2:	4313      	orrs	r3, r2
 8005ee4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005eec:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005ef0:	d101      	bne.n	8005ef6 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1; 
 8005ef2:	2301      	movs	r3, #1
 8005ef4:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005efa:	2b00      	cmp	r3, #0
 8005efc:	d101      	bne.n	8005f02 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1; 
 8005efe:	2301      	movs	r3, #1
 8005f00:	61bb      	str	r3, [r7, #24]
    }
  }
  
  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	681b      	ldr	r3, [r3, #0]
 8005f06:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005f0a:	2b00      	cmp	r3, #0
 8005f0c:	d001      	beq.n	8005f12 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {    
      plli2sused = 1; 
 8005f0e:	2301      	movs	r3, #1
 8005f10:	61fb      	str	r3, [r7, #28]
  }  
  
  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	681b      	ldr	r3, [r3, #0]
 8005f16:	f003 0320 	and.w	r3, r3, #32
 8005f1a:	2b00      	cmp	r3, #0
 8005f1c:	f000 808b 	beq.w	8006036 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8005f20:	4a3a      	ldr	r2, [pc, #232]	; (800600c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005f22:	4b3a      	ldr	r3, [pc, #232]	; (800600c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005f24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f26:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005f2a:	6413      	str	r3, [r2, #64]	; 0x40
 8005f2c:	4b37      	ldr	r3, [pc, #220]	; (800600c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005f2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f30:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005f34:	60bb      	str	r3, [r7, #8]
 8005f36:	68bb      	ldr	r3, [r7, #8]
    
    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8005f38:	4a35      	ldr	r2, [pc, #212]	; (8006010 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8005f3a:	4b35      	ldr	r3, [pc, #212]	; (8006010 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8005f3c:	681b      	ldr	r3, [r3, #0]
 8005f3e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005f42:	6013      	str	r3, [r2, #0]
    
    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005f44:	f7fd f84a 	bl	8002fdc <HAL_GetTick>
 8005f48:	6178      	str	r0, [r7, #20]
    
    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8005f4a:	e008      	b.n	8005f5e <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005f4c:	f7fd f846 	bl	8002fdc <HAL_GetTick>
 8005f50:	4602      	mov	r2, r0
 8005f52:	697b      	ldr	r3, [r7, #20]
 8005f54:	1ad3      	subs	r3, r2, r3
 8005f56:	2b64      	cmp	r3, #100	; 0x64
 8005f58:	d901      	bls.n	8005f5e <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8005f5a:	2303      	movs	r3, #3
 8005f5c:	e355      	b.n	800660a <HAL_RCCEx_PeriphCLKConfig+0x7ce>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8005f5e:	4b2c      	ldr	r3, [pc, #176]	; (8006010 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005f66:	2b00      	cmp	r3, #0
 8005f68:	d0f0      	beq.n	8005f4c <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8005f6a:	4b28      	ldr	r3, [pc, #160]	; (800600c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005f6c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005f6e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005f72:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005f74:	693b      	ldr	r3, [r7, #16]
 8005f76:	2b00      	cmp	r3, #0
 8005f78:	d035      	beq.n	8005fe6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f7e:	f403 7240 	and.w	r2, r3, #768	; 0x300
 8005f82:	693b      	ldr	r3, [r7, #16]
 8005f84:	429a      	cmp	r2, r3
 8005f86:	d02e      	beq.n	8005fe6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005f88:	4b20      	ldr	r3, [pc, #128]	; (800600c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005f8a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005f8c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005f90:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005f92:	4a1e      	ldr	r2, [pc, #120]	; (800600c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005f94:	4b1d      	ldr	r3, [pc, #116]	; (800600c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005f96:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005f98:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005f9c:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005f9e:	4a1b      	ldr	r2, [pc, #108]	; (800600c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005fa0:	4b1a      	ldr	r3, [pc, #104]	; (800600c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005fa2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005fa4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005fa8:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8005faa:	4a18      	ldr	r2, [pc, #96]	; (800600c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005fac:	693b      	ldr	r3, [r7, #16]
 8005fae:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8005fb0:	4b16      	ldr	r3, [pc, #88]	; (800600c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005fb2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005fb4:	f003 0301 	and.w	r3, r3, #1
 8005fb8:	2b00      	cmp	r3, #0
 8005fba:	d014      	beq.n	8005fe6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005fbc:	f7fd f80e 	bl	8002fdc <HAL_GetTick>
 8005fc0:	6178      	str	r0, [r7, #20]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005fc2:	e00a      	b.n	8005fda <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005fc4:	f7fd f80a 	bl	8002fdc <HAL_GetTick>
 8005fc8:	4602      	mov	r2, r0
 8005fca:	697b      	ldr	r3, [r7, #20]
 8005fcc:	1ad3      	subs	r3, r2, r3
 8005fce:	f241 3288 	movw	r2, #5000	; 0x1388
 8005fd2:	4293      	cmp	r3, r2
 8005fd4:	d901      	bls.n	8005fda <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8005fd6:	2303      	movs	r3, #3
 8005fd8:	e317      	b.n	800660a <HAL_RCCEx_PeriphCLKConfig+0x7ce>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005fda:	4b0c      	ldr	r3, [pc, #48]	; (800600c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005fdc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005fde:	f003 0302 	and.w	r3, r3, #2
 8005fe2:	2b00      	cmp	r3, #0
 8005fe4:	d0ee      	beq.n	8005fc4 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005fea:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005fee:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005ff2:	d111      	bne.n	8006018 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8005ff4:	4805      	ldr	r0, [pc, #20]	; (800600c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005ff6:	4b05      	ldr	r3, [pc, #20]	; (800600c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005ff8:	689b      	ldr	r3, [r3, #8]
 8005ffa:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8006002:	4b04      	ldr	r3, [pc, #16]	; (8006014 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8006004:	400b      	ands	r3, r1
 8006006:	4313      	orrs	r3, r2
 8006008:	6083      	str	r3, [r0, #8]
 800600a:	e00b      	b.n	8006024 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 800600c:	40023800 	.word	0x40023800
 8006010:	40007000 	.word	0x40007000
 8006014:	0ffffcff 	.word	0x0ffffcff
 8006018:	4ab0      	ldr	r2, [pc, #704]	; (80062dc <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800601a:	4bb0      	ldr	r3, [pc, #704]	; (80062dc <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800601c:	689b      	ldr	r3, [r3, #8]
 800601e:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8006022:	6093      	str	r3, [r2, #8]
 8006024:	49ad      	ldr	r1, [pc, #692]	; (80062dc <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8006026:	4bad      	ldr	r3, [pc, #692]	; (80062dc <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8006028:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800602e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006032:	4313      	orrs	r3, r2
 8006034:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	681b      	ldr	r3, [r3, #0]
 800603a:	f003 0310 	and.w	r3, r3, #16
 800603e:	2b00      	cmp	r3, #0
 8006040:	d010      	beq.n	8006064 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));
    
    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8006042:	4aa6      	ldr	r2, [pc, #664]	; (80062dc <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8006044:	4ba5      	ldr	r3, [pc, #660]	; (80062dc <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8006046:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800604a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800604e:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8006052:	49a2      	ldr	r1, [pc, #648]	; (80062dc <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8006054:	4ba1      	ldr	r3, [pc, #644]	; (80062dc <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8006056:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800605e:	4313      	orrs	r3, r2
 8006060:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
  
  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800606c:	2b00      	cmp	r3, #0
 800606e:	d00a      	beq.n	8006086 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8006070:	499a      	ldr	r1, [pc, #616]	; (80062dc <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8006072:	4b9a      	ldr	r3, [pc, #616]	; (80062dc <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8006074:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006078:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006080:	4313      	orrs	r3, r2
 8006082:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
  
  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	681b      	ldr	r3, [r3, #0]
 800608a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800608e:	2b00      	cmp	r3, #0
 8006090:	d00a      	beq.n	80060a8 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8006092:	4992      	ldr	r1, [pc, #584]	; (80062dc <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8006094:	4b91      	ldr	r3, [pc, #580]	; (80062dc <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8006096:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800609a:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80060a2:	4313      	orrs	r3, r2
 80060a4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
  
  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	681b      	ldr	r3, [r3, #0]
 80060ac:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80060b0:	2b00      	cmp	r3, #0
 80060b2:	d00a      	beq.n	80060ca <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80060b4:	4989      	ldr	r1, [pc, #548]	; (80062dc <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80060b6:	4b89      	ldr	r3, [pc, #548]	; (80062dc <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80060b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80060bc:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80060c4:	4313      	orrs	r3, r2
 80060c6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
    
  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80060d2:	2b00      	cmp	r3, #0
 80060d4:	d00a      	beq.n	80060ec <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));
    
    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80060d6:	4981      	ldr	r1, [pc, #516]	; (80062dc <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80060d8:	4b80      	ldr	r3, [pc, #512]	; (80062dc <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80060da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80060de:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80060e6:	4313      	orrs	r3, r2
 80060e8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80060f4:	2b00      	cmp	r3, #0
 80060f6:	d00a      	beq.n	800610e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80060f8:	4978      	ldr	r1, [pc, #480]	; (80062dc <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80060fa:	4b78      	ldr	r3, [pc, #480]	; (80062dc <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80060fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006100:	f023 0203 	bic.w	r2, r3, #3
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006108:	4313      	orrs	r3, r2
 800610a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006116:	2b00      	cmp	r3, #0
 8006118:	d00a      	beq.n	8006130 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800611a:	4970      	ldr	r1, [pc, #448]	; (80062dc <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800611c:	4b6f      	ldr	r3, [pc, #444]	; (80062dc <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800611e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006122:	f023 020c 	bic.w	r2, r3, #12
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800612a:	4313      	orrs	r3, r2
 800612c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	681b      	ldr	r3, [r3, #0]
 8006134:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006138:	2b00      	cmp	r3, #0
 800613a:	d00a      	beq.n	8006152 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800613c:	4967      	ldr	r1, [pc, #412]	; (80062dc <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800613e:	4b67      	ldr	r3, [pc, #412]	; (80062dc <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8006140:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006144:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800614c:	4313      	orrs	r3, r2
 800614e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	681b      	ldr	r3, [r3, #0]
 8006156:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800615a:	2b00      	cmp	r3, #0
 800615c:	d00a      	beq.n	8006174 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800615e:	495f      	ldr	r1, [pc, #380]	; (80062dc <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8006160:	4b5e      	ldr	r3, [pc, #376]	; (80062dc <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8006162:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006166:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800616e:	4313      	orrs	r3, r2
 8006170:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	681b      	ldr	r3, [r3, #0]
 8006178:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800617c:	2b00      	cmp	r3, #0
 800617e:	d00a      	beq.n	8006196 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8006180:	4956      	ldr	r1, [pc, #344]	; (80062dc <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8006182:	4b56      	ldr	r3, [pc, #344]	; (80062dc <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8006184:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006188:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006190:	4313      	orrs	r3, r2
 8006192:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	681b      	ldr	r3, [r3, #0]
 800619a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800619e:	2b00      	cmp	r3, #0
 80061a0:	d00a      	beq.n	80061b8 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));
    
    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 80061a2:	494e      	ldr	r1, [pc, #312]	; (80062dc <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80061a4:	4b4d      	ldr	r3, [pc, #308]	; (80062dc <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80061a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80061aa:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80061b2:	4313      	orrs	r3, r2
 80061b4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	681b      	ldr	r3, [r3, #0]
 80061bc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80061c0:	2b00      	cmp	r3, #0
 80061c2:	d00a      	beq.n	80061da <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));
    
    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 80061c4:	4945      	ldr	r1, [pc, #276]	; (80062dc <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80061c6:	4b45      	ldr	r3, [pc, #276]	; (80062dc <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80061c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80061cc:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80061d4:	4313      	orrs	r3, r2
 80061d6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	681b      	ldr	r3, [r3, #0]
 80061de:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80061e2:	2b00      	cmp	r3, #0
 80061e4:	d00a      	beq.n	80061fc <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));
    
    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 80061e6:	493d      	ldr	r1, [pc, #244]	; (80062dc <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80061e8:	4b3c      	ldr	r3, [pc, #240]	; (80062dc <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80061ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80061ee:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80061f6:	4313      	orrs	r3, r2
 80061f8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
  
  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006204:	2b00      	cmp	r3, #0
 8006206:	d00a      	beq.n	800621e <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8006208:	4934      	ldr	r1, [pc, #208]	; (80062dc <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800620a:	4b34      	ldr	r3, [pc, #208]	; (80062dc <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800620c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006210:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006218:	4313      	orrs	r3, r2
 800621a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
  
  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	681b      	ldr	r3, [r3, #0]
 8006222:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006226:	2b00      	cmp	r3, #0
 8006228:	d011      	beq.n	800624e <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));
    
    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800622a:	492c      	ldr	r1, [pc, #176]	; (80062dc <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800622c:	4b2b      	ldr	r3, [pc, #172]	; (80062dc <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800622e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006232:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800623a:	4313      	orrs	r3, r2
 800623c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006244:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006248:	d101      	bne.n	800624e <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1; 
 800624a:	2301      	movs	r3, #1
 800624c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	681b      	ldr	r3, [r3, #0]
 8006252:	f003 0308 	and.w	r3, r3, #8
 8006256:	2b00      	cmp	r3, #0
 8006258:	d001      	beq.n	800625e <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1; 
 800625a:	2301      	movs	r3, #1
 800625c:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */
  
  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	681b      	ldr	r3, [r3, #0]
 8006262:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006266:	2b00      	cmp	r3, #0
 8006268:	d00a      	beq.n	8006280 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    
    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800626a:	491c      	ldr	r1, [pc, #112]	; (80062dc <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800626c:	4b1b      	ldr	r3, [pc, #108]	; (80062dc <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800626e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006272:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800627a:	4313      	orrs	r3, r2
 800627c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }
  
  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	681b      	ldr	r3, [r3, #0]
 8006284:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006288:	2b00      	cmp	r3, #0
 800628a:	d00b      	beq.n	80062a4 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    
    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800628c:	4913      	ldr	r1, [pc, #76]	; (80062dc <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800628e:	4b13      	ldr	r3, [pc, #76]	; (80062dc <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8006290:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006294:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800629e:	4313      	orrs	r3, r2
 80062a0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }  
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */
  
  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 80062a4:	69fb      	ldr	r3, [r7, #28]
 80062a6:	2b01      	cmp	r3, #1
 80062a8:	d005      	beq.n	80062b6 <HAL_RCCEx_PeriphCLKConfig+0x47a>
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	681b      	ldr	r3, [r3, #0]
 80062ae:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80062b2:	f040 80d8 	bne.w	8006466 <HAL_RCCEx_PeriphCLKConfig+0x62a>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();  
 80062b6:	4a09      	ldr	r2, [pc, #36]	; (80062dc <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80062b8:	4b08      	ldr	r3, [pc, #32]	; (80062dc <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80062ba:	681b      	ldr	r3, [r3, #0]
 80062bc:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80062c0:	6013      	str	r3, [r2, #0]
    
    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80062c2:	f7fc fe8b 	bl	8002fdc <HAL_GetTick>
 80062c6:	6178      	str	r0, [r7, #20]
    
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80062c8:	e00a      	b.n	80062e0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80062ca:	f7fc fe87 	bl	8002fdc <HAL_GetTick>
 80062ce:	4602      	mov	r2, r0
 80062d0:	697b      	ldr	r3, [r7, #20]
 80062d2:	1ad3      	subs	r3, r2, r3
 80062d4:	2b64      	cmp	r3, #100	; 0x64
 80062d6:	d903      	bls.n	80062e0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
      {
        /* return in case of Timeout detected */         
        return HAL_TIMEOUT;
 80062d8:	2303      	movs	r3, #3
 80062da:	e196      	b.n	800660a <HAL_RCCEx_PeriphCLKConfig+0x7ce>
 80062dc:	40023800 	.word	0x40023800
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80062e0:	4b6c      	ldr	r3, [pc, #432]	; (8006494 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80062e2:	681b      	ldr	r3, [r3, #0]
 80062e4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80062e8:	2b00      	cmp	r3, #0
 80062ea:	d1ee      	bne.n	80062ca <HAL_RCCEx_PeriphCLKConfig+0x48e>
    
    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
      
    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/ 
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	681b      	ldr	r3, [r3, #0]
 80062f0:	f003 0301 	and.w	r3, r3, #1
 80062f4:	2b00      	cmp	r3, #0
 80062f6:	d021      	beq.n	800633c <HAL_RCCEx_PeriphCLKConfig+0x500>
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80062fc:	2b00      	cmp	r3, #0
 80062fe:	d11d      	bne.n	800633c <HAL_RCCEx_PeriphCLKConfig+0x500>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
    
      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8006300:	4b64      	ldr	r3, [pc, #400]	; (8006494 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8006302:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006306:	0c1b      	lsrs	r3, r3, #16
 8006308:	f003 0303 	and.w	r3, r3, #3
 800630c:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800630e:	4b61      	ldr	r3, [pc, #388]	; (8006494 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8006310:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006314:	0e1b      	lsrs	r3, r3, #24
 8006316:	f003 030f 	and.w	r3, r3, #15
 800631a:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 800631c:	495d      	ldr	r1, [pc, #372]	; (8006494 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	685b      	ldr	r3, [r3, #4]
 8006322:	019a      	lsls	r2, r3, #6
 8006324:	693b      	ldr	r3, [r7, #16]
 8006326:	041b      	lsls	r3, r3, #16
 8006328:	431a      	orrs	r2, r3
 800632a:	68fb      	ldr	r3, [r7, #12]
 800632c:	061b      	lsls	r3, r3, #24
 800632e:	431a      	orrs	r2, r3
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	689b      	ldr	r3, [r3, #8]
 8006334:	071b      	lsls	r3, r3, #28
 8006336:	4313      	orrs	r3, r2
 8006338:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }
        
    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/  
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	681b      	ldr	r3, [r3, #0]
 8006340:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006344:	2b00      	cmp	r3, #0
 8006346:	d004      	beq.n	8006352 <HAL_RCCEx_PeriphCLKConfig+0x516>
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800634c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006350:	d00a      	beq.n	8006368 <HAL_RCCEx_PeriphCLKConfig+0x52c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S))) 
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	681b      	ldr	r3, [r3, #0]
 8006356:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800635a:	2b00      	cmp	r3, #0
 800635c:	d02e      	beq.n	80063bc <HAL_RCCEx_PeriphCLKConfig+0x580>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S))) 
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006362:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006366:	d129      	bne.n	80063bc <HAL_RCCEx_PeriphCLKConfig+0x580>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));
            
      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8006368:	4b4a      	ldr	r3, [pc, #296]	; (8006494 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 800636a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800636e:	0c1b      	lsrs	r3, r3, #16
 8006370:	f003 0303 	and.w	r3, r3, #3
 8006374:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8006376:	4b47      	ldr	r3, [pc, #284]	; (8006494 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8006378:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800637c:	0f1b      	lsrs	r3, r3, #28
 800637e:	f003 0307 	and.w	r3, r3, #7
 8006382:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */      
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8006384:	4943      	ldr	r1, [pc, #268]	; (8006494 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	685b      	ldr	r3, [r3, #4]
 800638a:	019a      	lsls	r2, r3, #6
 800638c:	693b      	ldr	r3, [r7, #16]
 800638e:	041b      	lsls	r3, r3, #16
 8006390:	431a      	orrs	r2, r3
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	68db      	ldr	r3, [r3, #12]
 8006396:	061b      	lsls	r3, r3, #24
 8006398:	431a      	orrs	r2, r3
 800639a:	68fb      	ldr	r3, [r7, #12]
 800639c:	071b      	lsls	r3, r3, #28
 800639e:	4313      	orrs	r3, r2
 80063a0:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
   
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */ 
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);   
 80063a4:	493b      	ldr	r1, [pc, #236]	; (8006494 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80063a6:	4b3b      	ldr	r3, [pc, #236]	; (8006494 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80063a8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80063ac:	f023 021f 	bic.w	r2, r3, #31
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063b4:	3b01      	subs	r3, #1
 80063b6:	4313      	orrs	r3, r2
 80063b8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }          

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/  
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	681b      	ldr	r3, [r3, #0]
 80063c0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80063c4:	2b00      	cmp	r3, #0
 80063c6:	d01d      	beq.n	8006404 <HAL_RCCEx_PeriphCLKConfig+0x5c8>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));
     
     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80063c8:	4b32      	ldr	r3, [pc, #200]	; (8006494 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80063ca:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80063ce:	0e1b      	lsrs	r3, r3, #24
 80063d0:	f003 030f 	and.w	r3, r3, #15
 80063d4:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80063d6:	4b2f      	ldr	r3, [pc, #188]	; (8006494 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80063d8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80063dc:	0f1b      	lsrs	r3, r3, #28
 80063de:	f003 0307 	and.w	r3, r3, #7
 80063e2:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 80063e4:	492b      	ldr	r1, [pc, #172]	; (8006494 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	685b      	ldr	r3, [r3, #4]
 80063ea:	019a      	lsls	r2, r3, #6
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	691b      	ldr	r3, [r3, #16]
 80063f0:	041b      	lsls	r3, r3, #16
 80063f2:	431a      	orrs	r2, r3
 80063f4:	693b      	ldr	r3, [r7, #16]
 80063f6:	061b      	lsls	r3, r3, #24
 80063f8:	431a      	orrs	r2, r3
 80063fa:	68fb      	ldr	r3, [r7, #12]
 80063fc:	071b      	lsls	r3, r3, #28
 80063fe:	4313      	orrs	r3, r2
 8006400:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }  
         
    /*----------------- In Case of PLLI2S is just selected  -----------------*/  
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800640c:	2b00      	cmp	r3, #0
 800640e:	d011      	beq.n	8006434 <HAL_RCCEx_PeriphCLKConfig+0x5f8>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8006410:	4920      	ldr	r1, [pc, #128]	; (8006494 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	685b      	ldr	r3, [r3, #4]
 8006416:	019a      	lsls	r2, r3, #6
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	691b      	ldr	r3, [r3, #16]
 800641c:	041b      	lsls	r3, r3, #16
 800641e:	431a      	orrs	r2, r3
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	68db      	ldr	r3, [r3, #12]
 8006424:	061b      	lsls	r3, r3, #24
 8006426:	431a      	orrs	r2, r3
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	689b      	ldr	r3, [r3, #8]
 800642c:	071b      	lsls	r3, r3, #28
 800642e:	4313      	orrs	r3, r2
 8006430:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    } 
    
    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8006434:	4a17      	ldr	r2, [pc, #92]	; (8006494 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8006436:	4b17      	ldr	r3, [pc, #92]	; (8006494 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8006438:	681b      	ldr	r3, [r3, #0]
 800643a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800643e:	6013      	str	r3, [r2, #0]
    
    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006440:	f7fc fdcc 	bl	8002fdc <HAL_GetTick>
 8006444:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8006446:	e008      	b.n	800645a <HAL_RCCEx_PeriphCLKConfig+0x61e>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8006448:	f7fc fdc8 	bl	8002fdc <HAL_GetTick>
 800644c:	4602      	mov	r2, r0
 800644e:	697b      	ldr	r3, [r7, #20]
 8006450:	1ad3      	subs	r3, r2, r3
 8006452:	2b64      	cmp	r3, #100	; 0x64
 8006454:	d901      	bls.n	800645a <HAL_RCCEx_PeriphCLKConfig+0x61e>
      {
        /* return in case of Timeout detected */                
        return HAL_TIMEOUT;
 8006456:	2303      	movs	r3, #3
 8006458:	e0d7      	b.n	800660a <HAL_RCCEx_PeriphCLKConfig+0x7ce>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800645a:	4b0e      	ldr	r3, [pc, #56]	; (8006494 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 800645c:	681b      	ldr	r3, [r3, #0]
 800645e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006462:	2b00      	cmp	r3, #0
 8006464:	d0f0      	beq.n	8006448 <HAL_RCCEx_PeriphCLKConfig+0x60c>
    }
  } 
  
  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8006466:	69bb      	ldr	r3, [r7, #24]
 8006468:	2b01      	cmp	r3, #1
 800646a:	f040 80cd 	bne.w	8006608 <HAL_RCCEx_PeriphCLKConfig+0x7cc>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE(); 
 800646e:	4a09      	ldr	r2, [pc, #36]	; (8006494 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8006470:	4b08      	ldr	r3, [pc, #32]	; (8006494 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8006472:	681b      	ldr	r3, [r3, #0]
 8006474:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006478:	6013      	str	r3, [r2, #0]
    
    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800647a:	f7fc fdaf 	bl	8002fdc <HAL_GetTick>
 800647e:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8006480:	e00a      	b.n	8006498 <HAL_RCCEx_PeriphCLKConfig+0x65c>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8006482:	f7fc fdab 	bl	8002fdc <HAL_GetTick>
 8006486:	4602      	mov	r2, r0
 8006488:	697b      	ldr	r3, [r7, #20]
 800648a:	1ad3      	subs	r3, r2, r3
 800648c:	2b64      	cmp	r3, #100	; 0x64
 800648e:	d903      	bls.n	8006498 <HAL_RCCEx_PeriphCLKConfig+0x65c>
      { 
        /* return in case of Timeout detected */        
        return HAL_TIMEOUT;
 8006490:	2303      	movs	r3, #3
 8006492:	e0ba      	b.n	800660a <HAL_RCCEx_PeriphCLKConfig+0x7ce>
 8006494:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8006498:	4b5e      	ldr	r3, [pc, #376]	; (8006614 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 800649a:	681b      	ldr	r3, [r3, #0]
 800649c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80064a0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80064a4:	d0ed      	beq.n	8006482 <HAL_RCCEx_PeriphCLKConfig+0x646>
    
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));
    
    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/  
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	681b      	ldr	r3, [r3, #0]
 80064aa:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80064ae:	2b00      	cmp	r3, #0
 80064b0:	d003      	beq.n	80064ba <HAL_RCCEx_PeriphCLKConfig+0x67e>
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80064b6:	2b00      	cmp	r3, #0
 80064b8:	d009      	beq.n	80064ce <HAL_RCCEx_PeriphCLKConfig+0x692>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	681b      	ldr	r3, [r3, #0]
 80064be:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80064c2:	2b00      	cmp	r3, #0
 80064c4:	d02e      	beq.n	8006524 <HAL_RCCEx_PeriphCLKConfig+0x6e8>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80064ca:	2b00      	cmp	r3, #0
 80064cc:	d12a      	bne.n	8006524 <HAL_RCCEx_PeriphCLKConfig+0x6e8>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));
    
      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80064ce:	4b51      	ldr	r3, [pc, #324]	; (8006614 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 80064d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80064d4:	0c1b      	lsrs	r3, r3, #16
 80064d6:	f003 0303 	and.w	r3, r3, #3
 80064da:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80064dc:	4b4d      	ldr	r3, [pc, #308]	; (8006614 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 80064de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80064e2:	0f1b      	lsrs	r3, r3, #28
 80064e4:	f003 0307 	and.w	r3, r3, #7
 80064e8:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 80064ea:	494a      	ldr	r1, [pc, #296]	; (8006614 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	695b      	ldr	r3, [r3, #20]
 80064f0:	019a      	lsls	r2, r3, #6
 80064f2:	693b      	ldr	r3, [r7, #16]
 80064f4:	041b      	lsls	r3, r3, #16
 80064f6:	431a      	orrs	r2, r3
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	699b      	ldr	r3, [r3, #24]
 80064fc:	061b      	lsls	r3, r3, #24
 80064fe:	431a      	orrs	r2, r3
 8006500:	68fb      	ldr	r3, [r7, #12]
 8006502:	071b      	lsls	r3, r3, #28
 8006504:	4313      	orrs	r3, r2
 8006506:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */ 
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800650a:	4942      	ldr	r1, [pc, #264]	; (8006614 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 800650c:	4b41      	ldr	r3, [pc, #260]	; (8006614 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 800650e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006512:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800651a:	3b01      	subs	r3, #1
 800651c:	021b      	lsls	r3, r3, #8
 800651e:	4313      	orrs	r3, r2
 8006520:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }           

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/   
    /* In Case of PLLI2S is selected as source clock for CK48 */ 
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	681b      	ldr	r3, [r3, #0]
 8006528:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800652c:	2b00      	cmp	r3, #0
 800652e:	d022      	beq.n	8006576 <HAL_RCCEx_PeriphCLKConfig+0x73a>
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006534:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006538:	d11d      	bne.n	8006576 <HAL_RCCEx_PeriphCLKConfig+0x73a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800653a:	4b36      	ldr	r3, [pc, #216]	; (8006614 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 800653c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006540:	0e1b      	lsrs	r3, r3, #24
 8006542:	f003 030f 	and.w	r3, r3, #15
 8006546:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8006548:	4b32      	ldr	r3, [pc, #200]	; (8006614 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 800654a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800654e:	0f1b      	lsrs	r3, r3, #28
 8006550:	f003 0307 	and.w	r3, r3, #7
 8006554:	60fb      	str	r3, [r7, #12]
      
      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8006556:	492f      	ldr	r1, [pc, #188]	; (8006614 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	695b      	ldr	r3, [r3, #20]
 800655c:	019a      	lsls	r2, r3, #6
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	6a1b      	ldr	r3, [r3, #32]
 8006562:	041b      	lsls	r3, r3, #16
 8006564:	431a      	orrs	r2, r3
 8006566:	693b      	ldr	r3, [r7, #16]
 8006568:	061b      	lsls	r3, r3, #24
 800656a:	431a      	orrs	r2, r3
 800656c:	68fb      	ldr	r3, [r7, #12]
 800656e:	071b      	lsls	r3, r3, #28
 8006570:	4313      	orrs	r3, r2
 8006572:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }        

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) 
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	681b      	ldr	r3, [r3, #0]
 800657a:	f003 0308 	and.w	r3, r3, #8
 800657e:	2b00      	cmp	r3, #0
 8006580:	d028      	beq.n	80065d4 <HAL_RCCEx_PeriphCLKConfig+0x798>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));
      
      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8006582:	4b24      	ldr	r3, [pc, #144]	; (8006614 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8006584:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006588:	0e1b      	lsrs	r3, r3, #24
 800658a:	f003 030f 	and.w	r3, r3, #15
 800658e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8006590:	4b20      	ldr	r3, [pc, #128]	; (8006614 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8006592:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006596:	0c1b      	lsrs	r3, r3, #16
 8006598:	f003 0303 	and.w	r3, r3, #3
 800659c:	60fb      	str	r3, [r7, #12]
      
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 800659e:	491d      	ldr	r1, [pc, #116]	; (8006614 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	695b      	ldr	r3, [r3, #20]
 80065a4:	019a      	lsls	r2, r3, #6
 80065a6:	68fb      	ldr	r3, [r7, #12]
 80065a8:	041b      	lsls	r3, r3, #16
 80065aa:	431a      	orrs	r2, r3
 80065ac:	693b      	ldr	r3, [r7, #16]
 80065ae:	061b      	lsls	r3, r3, #24
 80065b0:	431a      	orrs	r2, r3
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	69db      	ldr	r3, [r3, #28]
 80065b6:	071b      	lsls	r3, r3, #28
 80065b8:	4313      	orrs	r3, r2
 80065ba:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */ 
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 80065be:	4915      	ldr	r1, [pc, #84]	; (8006614 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 80065c0:	4b14      	ldr	r3, [pc, #80]	; (8006614 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 80065c2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80065c6:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80065ce:	4313      	orrs	r3, r2
 80065d0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }    
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */  

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80065d4:	4a0f      	ldr	r2, [pc, #60]	; (8006614 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 80065d6:	4b0f      	ldr	r3, [pc, #60]	; (8006614 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 80065d8:	681b      	ldr	r3, [r3, #0]
 80065da:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80065de:	6013      	str	r3, [r2, #0]
    
    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80065e0:	f7fc fcfc 	bl	8002fdc <HAL_GetTick>
 80065e4:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80065e6:	e008      	b.n	80065fa <HAL_RCCEx_PeriphCLKConfig+0x7be>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80065e8:	f7fc fcf8 	bl	8002fdc <HAL_GetTick>
 80065ec:	4602      	mov	r2, r0
 80065ee:	697b      	ldr	r3, [r7, #20]
 80065f0:	1ad3      	subs	r3, r2, r3
 80065f2:	2b64      	cmp	r3, #100	; 0x64
 80065f4:	d901      	bls.n	80065fa <HAL_RCCEx_PeriphCLKConfig+0x7be>
      { 
        /* return in case of Timeout detected */        
        return HAL_TIMEOUT;
 80065f6:	2303      	movs	r3, #3
 80065f8:	e007      	b.n	800660a <HAL_RCCEx_PeriphCLKConfig+0x7ce>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80065fa:	4b06      	ldr	r3, [pc, #24]	; (8006614 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 80065fc:	681b      	ldr	r3, [r3, #0]
 80065fe:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006602:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006606:	d1ef      	bne.n	80065e8 <HAL_RCCEx_PeriphCLKConfig+0x7ac>
      }
    }
  }
  return HAL_OK;
 8006608:	2300      	movs	r3, #0
}
 800660a:	4618      	mov	r0, r3
 800660c:	3720      	adds	r7, #32
 800660e:	46bd      	mov	sp, r7
 8006610:	bd80      	pop	{r7, pc}
 8006612:	bf00      	nop
 8006614:	40023800 	.word	0x40023800

08006618 <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{   
 8006618:	b580      	push	{r7, lr}
 800661a:	b082      	sub	sp, #8
 800661c:	af00      	add	r7, sp, #0
 800661e:	6078      	str	r0, [r7, #4]
 8006620:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if(hsdram == NULL)
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	2b00      	cmp	r3, #0
 8006626:	d101      	bne.n	800662c <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 8006628:	2301      	movs	r3, #1
 800662a:	e025      	b.n	8006678 <HAL_SDRAM_Init+0x60>
  }
  
  if(hsdram->State == HAL_SDRAM_STATE_RESET)
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8006632:	b2db      	uxtb	r3, r3
 8006634:	2b00      	cmp	r3, #0
 8006636:	d106      	bne.n	8006646 <HAL_SDRAM_Init+0x2e>
  {  
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	2200      	movs	r2, #0
 800663c:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 8006640:	6878      	ldr	r0, [r7, #4]
 8006642:	f003 fbfd 	bl	8009e40 <HAL_SDRAM_MspInit>
  }
  
  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	2202      	movs	r2, #2
 800664a:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Initialize SDRAM control Interface */
  FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	681a      	ldr	r2, [r3, #0]
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	3304      	adds	r3, #4
 8006656:	4619      	mov	r1, r3
 8006658:	4610      	mov	r0, r2
 800665a:	f001 fd2f 	bl	80080bc <FMC_SDRAM_Init>
  
  /* Initialize SDRAM timing Interface */
  FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank); 
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	6818      	ldr	r0, [r3, #0]
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	685b      	ldr	r3, [r3, #4]
 8006666:	461a      	mov	r2, r3
 8006668:	6839      	ldr	r1, [r7, #0]
 800666a:	f001 fd99 	bl	80081a0 <FMC_SDRAM_Timing_Init>
  
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	2201      	movs	r2, #1
 8006672:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  return HAL_OK;
 8006676:	2300      	movs	r3, #0
}
 8006678:	4618      	mov	r0, r3
 800667a:	3708      	adds	r7, #8
 800667c:	46bd      	mov	sp, r7
 800667e:	bd80      	pop	{r7, pc}

08006680 <HAL_SDRAM_SendCommand>:
  * @param  Command SDRAM command structure
  * @param  Timeout Timeout duration
  * @retval HAL status
  */  
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 8006680:	b580      	push	{r7, lr}
 8006682:	b084      	sub	sp, #16
 8006684:	af00      	add	r7, sp, #0
 8006686:	60f8      	str	r0, [r7, #12]
 8006688:	60b9      	str	r1, [r7, #8]
 800668a:	607a      	str	r2, [r7, #4]
  /* Check the SDRAM controller state */
  if(hsdram->State == HAL_SDRAM_STATE_BUSY)
 800668c:	68fb      	ldr	r3, [r7, #12]
 800668e:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8006692:	b2db      	uxtb	r3, r3
 8006694:	2b02      	cmp	r3, #2
 8006696:	d101      	bne.n	800669c <HAL_SDRAM_SendCommand+0x1c>
  {
    return HAL_BUSY;
 8006698:	2302      	movs	r3, #2
 800669a:	e018      	b.n	80066ce <HAL_SDRAM_SendCommand+0x4e>
  }
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 800669c:	68fb      	ldr	r3, [r7, #12]
 800669e:	2202      	movs	r2, #2
 80066a0:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Send SDRAM command */
  FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 80066a4:	68fb      	ldr	r3, [r7, #12]
 80066a6:	681b      	ldr	r3, [r3, #0]
 80066a8:	687a      	ldr	r2, [r7, #4]
 80066aa:	68b9      	ldr	r1, [r7, #8]
 80066ac:	4618      	mov	r0, r3
 80066ae:	f001 fdf7 	bl	80082a0 <FMC_SDRAM_SendCommand>
  
  /* Update the SDRAM controller state state */
  if(Command->CommandMode == FMC_SDRAM_CMD_PALL)
 80066b2:	68bb      	ldr	r3, [r7, #8]
 80066b4:	681b      	ldr	r3, [r3, #0]
 80066b6:	2b02      	cmp	r3, #2
 80066b8:	d104      	bne.n	80066c4 <HAL_SDRAM_SendCommand+0x44>
  {
    hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 80066ba:	68fb      	ldr	r3, [r7, #12]
 80066bc:	2205      	movs	r2, #5
 80066be:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
 80066c2:	e003      	b.n	80066cc <HAL_SDRAM_SendCommand+0x4c>
  }
  else
  {
    hsdram->State = HAL_SDRAM_STATE_READY;
 80066c4:	68fb      	ldr	r3, [r7, #12]
 80066c6:	2201      	movs	r2, #1
 80066c8:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  }
  
  return HAL_OK;  
 80066cc:	2300      	movs	r3, #0
}
 80066ce:	4618      	mov	r0, r3
 80066d0:	3710      	adds	r7, #16
 80066d2:	46bd      	mov	sp, r7
 80066d4:	bd80      	pop	{r7, pc}

080066d6 <HAL_SDRAM_ProgramRefreshRate>:
  *                the configuration information for SDRAM module.  
  * @param  RefreshRate The SDRAM refresh rate value       
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
 80066d6:	b580      	push	{r7, lr}
 80066d8:	b082      	sub	sp, #8
 80066da:	af00      	add	r7, sp, #0
 80066dc:	6078      	str	r0, [r7, #4]
 80066de:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM controller state */
  if(hsdram->State == HAL_SDRAM_STATE_BUSY)
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80066e6:	b2db      	uxtb	r3, r3
 80066e8:	2b02      	cmp	r3, #2
 80066ea:	d101      	bne.n	80066f0 <HAL_SDRAM_ProgramRefreshRate+0x1a>
  {
    return HAL_BUSY;
 80066ec:	2302      	movs	r3, #2
 80066ee:	e00e      	b.n	800670e <HAL_SDRAM_ProgramRefreshRate+0x38>
  } 
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	2202      	movs	r2, #2
 80066f4:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Program the refresh rate */
  FMC_SDRAM_ProgramRefreshRate(hsdram->Instance ,RefreshRate);
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	681b      	ldr	r3, [r3, #0]
 80066fc:	6839      	ldr	r1, [r7, #0]
 80066fe:	4618      	mov	r0, r3
 8006700:	f001 fdef 	bl	80082e2 <FMC_SDRAM_ProgramRefreshRate>
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	2201      	movs	r2, #1
 8006708:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  return HAL_OK;   
 800670c:	2300      	movs	r3, #0
}
 800670e:	4618      	mov	r0, r3
 8006710:	3708      	adds	r7, #8
 8006712:	46bd      	mov	sp, r7
 8006714:	bd80      	pop	{r7, pc}

08006716 <HAL_TIM_Base_Init>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{ 
 8006716:	b580      	push	{r7, lr}
 8006718:	b082      	sub	sp, #8
 800671a:	af00      	add	r7, sp, #0
 800671c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if(htim == NULL)
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	2b00      	cmp	r3, #0
 8006722:	d101      	bne.n	8006728 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006724:	2301      	movs	r3, #1
 8006726:	e01d      	b.n	8006764 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance)); 
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if(htim->State == HAL_TIM_STATE_RESET)
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800672e:	b2db      	uxtb	r3, r3
 8006730:	2b00      	cmp	r3, #0
 8006732:	d106      	bne.n	8006742 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	2200      	movs	r2, #0
 8006738:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800673c:	6878      	ldr	r0, [r7, #4]
 800673e:	f003 fa45 	bl	8009bcc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }
  /* Set the TIM state */
  htim->State= HAL_TIM_STATE_BUSY;
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	2202      	movs	r2, #2
 8006746:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  
  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init); 
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	681a      	ldr	r2, [r3, #0]
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	3304      	adds	r3, #4
 8006752:	4619      	mov	r1, r3
 8006754:	4610      	mov	r0, r2
 8006756:	f000 fad1 	bl	8006cfc <TIM_Base_SetConfig>
  
  /* Initialize the TIM state*/
  htim->State= HAL_TIM_STATE_READY;
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	2201      	movs	r2, #1
 800675e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  
  return HAL_OK;
 8006762:	2300      	movs	r3, #0
}
 8006764:	4618      	mov	r0, r3
 8006766:	3708      	adds	r7, #8
 8006768:	46bd      	mov	sp, r7
 800676a:	bd80      	pop	{r7, pc}

0800676c <HAL_TIM_Base_Start>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800676c:	b480      	push	{r7}
 800676e:	b083      	sub	sp, #12
 8006770:	af00      	add	r7, sp, #0
 8006772:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  
  /* Set the TIM state */
  htim->State= HAL_TIM_STATE_BUSY;
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	2202      	movs	r2, #2
 8006778:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	681b      	ldr	r3, [r3, #0]
 8006780:	687a      	ldr	r2, [r7, #4]
 8006782:	6812      	ldr	r2, [r2, #0]
 8006784:	6812      	ldr	r2, [r2, #0]
 8006786:	f042 0201 	orr.w	r2, r2, #1
 800678a:	601a      	str	r2, [r3, #0]
  
  /* Change the TIM state*/
  htim->State= HAL_TIM_STATE_READY;
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	2201      	movs	r2, #1
 8006790:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  
  /* Return function status */
  return HAL_OK;
 8006794:	2300      	movs	r3, #0
}
 8006796:	4618      	mov	r0, r3
 8006798:	370c      	adds	r7, #12
 800679a:	46bd      	mov	sp, r7
 800679c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067a0:	4770      	bx	lr

080067a2 <HAL_TIM_Base_Start_IT>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80067a2:	b480      	push	{r7}
 80067a4:	b083      	sub	sp, #12
 80067a6:	af00      	add	r7, sp, #0
 80067a8:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  
  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	681b      	ldr	r3, [r3, #0]
 80067ae:	687a      	ldr	r2, [r7, #4]
 80067b0:	6812      	ldr	r2, [r2, #0]
 80067b2:	68d2      	ldr	r2, [r2, #12]
 80067b4:	f042 0201 	orr.w	r2, r2, #1
 80067b8:	60da      	str	r2, [r3, #12]
      
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	681b      	ldr	r3, [r3, #0]
 80067be:	687a      	ldr	r2, [r7, #4]
 80067c0:	6812      	ldr	r2, [r2, #0]
 80067c2:	6812      	ldr	r2, [r2, #0]
 80067c4:	f042 0201 	orr.w	r2, r2, #1
 80067c8:	601a      	str	r2, [r3, #0]
      
  /* Return function status */
  return HAL_OK;
 80067ca:	2300      	movs	r3, #0
}
 80067cc:	4618      	mov	r0, r3
 80067ce:	370c      	adds	r7, #12
 80067d0:	46bd      	mov	sp, r7
 80067d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067d6:	4770      	bx	lr

080067d8 <HAL_TIM_PWM_Init>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80067d8:	b580      	push	{r7, lr}
 80067da:	b082      	sub	sp, #8
 80067dc:	af00      	add	r7, sp, #0
 80067de:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if(htim == NULL)
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	2b00      	cmp	r3, #0
 80067e4:	d101      	bne.n	80067ea <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80067e6:	2301      	movs	r3, #1
 80067e8:	e01d      	b.n	8006826 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if(htim->State == HAL_TIM_STATE_RESET)
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80067f0:	b2db      	uxtb	r3, r3
 80067f2:	2b00      	cmp	r3, #0
 80067f4:	d106      	bne.n	8006804 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	2200      	movs	r2, #0
 80067fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80067fe:	6878      	ldr	r0, [r7, #4]
 8006800:	f000 f815 	bl	800682e <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }
  /* Set the TIM state */
  htim->State= HAL_TIM_STATE_BUSY;  
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	2202      	movs	r2, #2
 8006808:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  
  /* Init the base time for the PWM */  
  TIM_Base_SetConfig(htim->Instance, &htim->Init); 
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	681a      	ldr	r2, [r3, #0]
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	3304      	adds	r3, #4
 8006814:	4619      	mov	r1, r3
 8006816:	4610      	mov	r0, r2
 8006818:	f000 fa70 	bl	8006cfc <TIM_Base_SetConfig>
   
  /* Initialize the TIM state*/
  htim->State= HAL_TIM_STATE_READY;
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	2201      	movs	r2, #1
 8006820:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  
  return HAL_OK;
 8006824:	2300      	movs	r3, #0
}  
 8006826:	4618      	mov	r0, r3
 8006828:	3708      	adds	r7, #8
 800682a:	46bd      	mov	sp, r7
 800682c:	bd80      	pop	{r7, pc}

0800682e <HAL_TIM_PWM_MspInit>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800682e:	b480      	push	{r7}
 8006830:	b083      	sub	sp, #12
 8006832:	af00      	add	r7, sp, #0
 8006834:	6078      	str	r0, [r7, #4]
  UNUSED(htim);
 
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8006836:	bf00      	nop
 8006838:	370c      	adds	r7, #12
 800683a:	46bd      	mov	sp, r7
 800683c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006840:	4770      	bx	lr
	...

08006844 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006844:	b580      	push	{r7, lr}
 8006846:	b082      	sub	sp, #8
 8006848:	af00      	add	r7, sp, #0
 800684a:	6078      	str	r0, [r7, #4]
 800684c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	681b      	ldr	r3, [r3, #0]
 8006852:	2201      	movs	r2, #1
 8006854:	6839      	ldr	r1, [r7, #0]
 8006856:	4618      	mov	r0, r3
 8006858:	f000 fd75 	bl	8007346 <TIM_CCxChannelCmd>
  
  if(IS_TIM_ADVANCED_INSTANCE(htim->Instance) != RESET)  
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	681b      	ldr	r3, [r3, #0]
 8006860:	4a10      	ldr	r2, [pc, #64]	; (80068a4 <HAL_TIM_PWM_Start+0x60>)
 8006862:	4293      	cmp	r3, r2
 8006864:	d004      	beq.n	8006870 <HAL_TIM_PWM_Start+0x2c>
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	681b      	ldr	r3, [r3, #0]
 800686a:	4a0f      	ldr	r2, [pc, #60]	; (80068a8 <HAL_TIM_PWM_Start+0x64>)
 800686c:	4293      	cmp	r3, r2
 800686e:	d101      	bne.n	8006874 <HAL_TIM_PWM_Start+0x30>
 8006870:	2301      	movs	r3, #1
 8006872:	e000      	b.n	8006876 <HAL_TIM_PWM_Start+0x32>
 8006874:	2300      	movs	r3, #0
 8006876:	2b00      	cmp	r3, #0
 8006878:	d007      	beq.n	800688a <HAL_TIM_PWM_Start+0x46>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	681b      	ldr	r3, [r3, #0]
 800687e:	687a      	ldr	r2, [r7, #4]
 8006880:	6812      	ldr	r2, [r2, #0]
 8006882:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8006884:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006888:	645a      	str	r2, [r3, #68]	; 0x44
  }
    
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	681b      	ldr	r3, [r3, #0]
 800688e:	687a      	ldr	r2, [r7, #4]
 8006890:	6812      	ldr	r2, [r2, #0]
 8006892:	6812      	ldr	r2, [r2, #0]
 8006894:	f042 0201 	orr.w	r2, r2, #1
 8006898:	601a      	str	r2, [r3, #0]
  
  /* Return function status */
  return HAL_OK;
 800689a:	2300      	movs	r3, #0
} 
 800689c:	4618      	mov	r0, r3
 800689e:	3708      	adds	r7, #8
 80068a0:	46bd      	mov	sp, r7
 80068a2:	bd80      	pop	{r7, pc}
 80068a4:	40010000 	.word	0x40010000
 80068a8:	40010400 	.word	0x40010400

080068ac <HAL_TIM_IRQHandler>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80068ac:	b580      	push	{r7, lr}
 80068ae:	b082      	sub	sp, #8
 80068b0:	af00      	add	r7, sp, #0
 80068b2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	681b      	ldr	r3, [r3, #0]
 80068b8:	691b      	ldr	r3, [r3, #16]
 80068ba:	f003 0302 	and.w	r3, r3, #2
 80068be:	2b02      	cmp	r3, #2
 80068c0:	d122      	bne.n	8006908 <HAL_TIM_IRQHandler+0x5c>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) !=RESET)
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	681b      	ldr	r3, [r3, #0]
 80068c6:	68db      	ldr	r3, [r3, #12]
 80068c8:	f003 0302 	and.w	r3, r3, #2
 80068cc:	2b02      	cmp	r3, #2
 80068ce:	d11b      	bne.n	8006908 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	681b      	ldr	r3, [r3, #0]
 80068d4:	f06f 0202 	mvn.w	r2, #2
 80068d8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	2201      	movs	r2, #1
 80068de:	771a      	strb	r2, [r3, #28]
        
        /* Input capture event */
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00)
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	681b      	ldr	r3, [r3, #0]
 80068e4:	699b      	ldr	r3, [r3, #24]
 80068e6:	f003 0303 	and.w	r3, r3, #3
 80068ea:	2b00      	cmp	r3, #0
 80068ec:	d003      	beq.n	80068f6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80068ee:	6878      	ldr	r0, [r7, #4]
 80068f0:	f000 f9e6 	bl	8006cc0 <HAL_TIM_IC_CaptureCallback>
 80068f4:	e005      	b.n	8006902 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80068f6:	6878      	ldr	r0, [r7, #4]
 80068f8:	f000 f9d8 	bl	8006cac <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80068fc:	6878      	ldr	r0, [r7, #4]
 80068fe:	f000 f9e9 	bl	8006cd4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	2200      	movs	r2, #0
 8006906:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	681b      	ldr	r3, [r3, #0]
 800690c:	691b      	ldr	r3, [r3, #16]
 800690e:	f003 0304 	and.w	r3, r3, #4
 8006912:	2b04      	cmp	r3, #4
 8006914:	d122      	bne.n	800695c <HAL_TIM_IRQHandler+0xb0>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) !=RESET)
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	681b      	ldr	r3, [r3, #0]
 800691a:	68db      	ldr	r3, [r3, #12]
 800691c:	f003 0304 	and.w	r3, r3, #4
 8006920:	2b04      	cmp	r3, #4
 8006922:	d11b      	bne.n	800695c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	681b      	ldr	r3, [r3, #0]
 8006928:	f06f 0204 	mvn.w	r2, #4
 800692c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	2202      	movs	r2, #2
 8006932:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00)
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	681b      	ldr	r3, [r3, #0]
 8006938:	699b      	ldr	r3, [r3, #24]
 800693a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800693e:	2b00      	cmp	r3, #0
 8006940:	d003      	beq.n	800694a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006942:	6878      	ldr	r0, [r7, #4]
 8006944:	f000 f9bc 	bl	8006cc0 <HAL_TIM_IC_CaptureCallback>
 8006948:	e005      	b.n	8006956 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800694a:	6878      	ldr	r0, [r7, #4]
 800694c:	f000 f9ae 	bl	8006cac <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006950:	6878      	ldr	r0, [r7, #4]
 8006952:	f000 f9bf 	bl	8006cd4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	2200      	movs	r2, #0
 800695a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	681b      	ldr	r3, [r3, #0]
 8006960:	691b      	ldr	r3, [r3, #16]
 8006962:	f003 0308 	and.w	r3, r3, #8
 8006966:	2b08      	cmp	r3, #8
 8006968:	d122      	bne.n	80069b0 <HAL_TIM_IRQHandler+0x104>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) !=RESET)
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	681b      	ldr	r3, [r3, #0]
 800696e:	68db      	ldr	r3, [r3, #12]
 8006970:	f003 0308 	and.w	r3, r3, #8
 8006974:	2b08      	cmp	r3, #8
 8006976:	d11b      	bne.n	80069b0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	681b      	ldr	r3, [r3, #0]
 800697c:	f06f 0208 	mvn.w	r2, #8
 8006980:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	2204      	movs	r2, #4
 8006986:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00)
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	681b      	ldr	r3, [r3, #0]
 800698c:	69db      	ldr	r3, [r3, #28]
 800698e:	f003 0303 	and.w	r3, r3, #3
 8006992:	2b00      	cmp	r3, #0
 8006994:	d003      	beq.n	800699e <HAL_TIM_IRQHandler+0xf2>
      {          
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006996:	6878      	ldr	r0, [r7, #4]
 8006998:	f000 f992 	bl	8006cc0 <HAL_TIM_IC_CaptureCallback>
 800699c:	e005      	b.n	80069aa <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800699e:	6878      	ldr	r0, [r7, #4]
 80069a0:	f000 f984 	bl	8006cac <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80069a4:	6878      	ldr	r0, [r7, #4]
 80069a6:	f000 f995 	bl	8006cd4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	2200      	movs	r2, #0
 80069ae:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	681b      	ldr	r3, [r3, #0]
 80069b4:	691b      	ldr	r3, [r3, #16]
 80069b6:	f003 0310 	and.w	r3, r3, #16
 80069ba:	2b10      	cmp	r3, #16
 80069bc:	d122      	bne.n	8006a04 <HAL_TIM_IRQHandler+0x158>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) !=RESET)
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	681b      	ldr	r3, [r3, #0]
 80069c2:	68db      	ldr	r3, [r3, #12]
 80069c4:	f003 0310 	and.w	r3, r3, #16
 80069c8:	2b10      	cmp	r3, #16
 80069ca:	d11b      	bne.n	8006a04 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	681b      	ldr	r3, [r3, #0]
 80069d0:	f06f 0210 	mvn.w	r2, #16
 80069d4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	2208      	movs	r2, #8
 80069da:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00)
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	681b      	ldr	r3, [r3, #0]
 80069e0:	69db      	ldr	r3, [r3, #28]
 80069e2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80069e6:	2b00      	cmp	r3, #0
 80069e8:	d003      	beq.n	80069f2 <HAL_TIM_IRQHandler+0x146>
      {          
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80069ea:	6878      	ldr	r0, [r7, #4]
 80069ec:	f000 f968 	bl	8006cc0 <HAL_TIM_IC_CaptureCallback>
 80069f0:	e005      	b.n	80069fe <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80069f2:	6878      	ldr	r0, [r7, #4]
 80069f4:	f000 f95a 	bl	8006cac <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80069f8:	6878      	ldr	r0, [r7, #4]
 80069fa:	f000 f96b 	bl	8006cd4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	2200      	movs	r2, #0
 8006a02:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	681b      	ldr	r3, [r3, #0]
 8006a08:	691b      	ldr	r3, [r3, #16]
 8006a0a:	f003 0301 	and.w	r3, r3, #1
 8006a0e:	2b01      	cmp	r3, #1
 8006a10:	d10e      	bne.n	8006a30 <HAL_TIM_IRQHandler+0x184>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) !=RESET)
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	681b      	ldr	r3, [r3, #0]
 8006a16:	68db      	ldr	r3, [r3, #12]
 8006a18:	f003 0301 	and.w	r3, r3, #1
 8006a1c:	2b01      	cmp	r3, #1
 8006a1e:	d107      	bne.n	8006a30 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	681b      	ldr	r3, [r3, #0]
 8006a24:	f06f 0201 	mvn.w	r2, #1
 8006a28:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006a2a:	6878      	ldr	r0, [r7, #4]
 8006a2c:	f002 ff98 	bl	8009960 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	681b      	ldr	r3, [r3, #0]
 8006a34:	691b      	ldr	r3, [r3, #16]
 8006a36:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006a3a:	2b80      	cmp	r3, #128	; 0x80
 8006a3c:	d10e      	bne.n	8006a5c <HAL_TIM_IRQHandler+0x1b0>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) !=RESET)
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	681b      	ldr	r3, [r3, #0]
 8006a42:	68db      	ldr	r3, [r3, #12]
 8006a44:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006a48:	2b80      	cmp	r3, #128	; 0x80
 8006a4a:	d107      	bne.n	8006a5c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	681b      	ldr	r3, [r3, #0]
 8006a50:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006a54:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006a56:	6878      	ldr	r0, [r7, #4]
 8006a58:	f000 fd7c 	bl	8007554 <HAL_TIMEx_BreakCallback>

    }
  }
  
    /* TIM Break input event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	681b      	ldr	r3, [r3, #0]
 8006a60:	691b      	ldr	r3, [r3, #16]
 8006a62:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006a66:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006a6a:	d10e      	bne.n	8006a8a <HAL_TIM_IRQHandler+0x1de>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) !=RESET)
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	681b      	ldr	r3, [r3, #0]
 8006a70:	68db      	ldr	r3, [r3, #12]
 8006a72:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006a76:	2b80      	cmp	r3, #128	; 0x80
 8006a78:	d107      	bne.n	8006a8a <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	681b      	ldr	r3, [r3, #0]
 8006a7e:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006a82:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006a84:	6878      	ldr	r0, [r7, #4]
 8006a86:	f000 fd65 	bl	8007554 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }

  /* TIM Trigger detection event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	681b      	ldr	r3, [r3, #0]
 8006a8e:	691b      	ldr	r3, [r3, #16]
 8006a90:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006a94:	2b40      	cmp	r3, #64	; 0x40
 8006a96:	d10e      	bne.n	8006ab6 <HAL_TIM_IRQHandler+0x20a>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) !=RESET)
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	681b      	ldr	r3, [r3, #0]
 8006a9c:	68db      	ldr	r3, [r3, #12]
 8006a9e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006aa2:	2b40      	cmp	r3, #64	; 0x40
 8006aa4:	d107      	bne.n	8006ab6 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	681b      	ldr	r3, [r3, #0]
 8006aaa:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006aae:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006ab0:	6878      	ldr	r0, [r7, #4]
 8006ab2:	f000 f919 	bl	8006ce8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	681b      	ldr	r3, [r3, #0]
 8006aba:	691b      	ldr	r3, [r3, #16]
 8006abc:	f003 0320 	and.w	r3, r3, #32
 8006ac0:	2b20      	cmp	r3, #32
 8006ac2:	d10e      	bne.n	8006ae2 <HAL_TIM_IRQHandler+0x236>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) !=RESET)
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	681b      	ldr	r3, [r3, #0]
 8006ac8:	68db      	ldr	r3, [r3, #12]
 8006aca:	f003 0320 	and.w	r3, r3, #32
 8006ace:	2b20      	cmp	r3, #32
 8006ad0:	d107      	bne.n	8006ae2 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	681b      	ldr	r3, [r3, #0]
 8006ad6:	f06f 0220 	mvn.w	r2, #32
 8006ada:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutationCallback(htim);
 8006adc:	6878      	ldr	r0, [r7, #4]
 8006ade:	f000 fd2f 	bl	8007540 <HAL_TIMEx_CommutationCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006ae2:	bf00      	nop
 8006ae4:	3708      	adds	r7, #8
 8006ae6:	46bd      	mov	sp, r7
 8006ae8:	bd80      	pop	{r7, pc}
	...

08006aec <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral. 
  * @retval HAL status
  */ 
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef * sClockSourceConfig)    
{
 8006aec:	b580      	push	{r7, lr}
 8006aee:	b084      	sub	sp, #16
 8006af0:	af00      	add	r7, sp, #0
 8006af2:	6078      	str	r0, [r7, #4]
 8006af4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr = 0;
 8006af6:	2300      	movs	r3, #0
 8006af8:	60fb      	str	r3, [r7, #12]
    
  /* Process Locked */
  __HAL_LOCK(htim);
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006b00:	2b01      	cmp	r3, #1
 8006b02:	d101      	bne.n	8006b08 <HAL_TIM_ConfigClockSource+0x1c>
 8006b04:	2302      	movs	r3, #2
 8006b06:	e0c8      	b.n	8006c9a <HAL_TIM_ConfigClockSource+0x1ae>
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	2201      	movs	r2, #1
 8006b0c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  htim->State = HAL_TIM_STATE_BUSY;
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	2202      	movs	r2, #2
 8006b14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  
  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));
  
  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	681b      	ldr	r3, [r3, #0]
 8006b1c:	689b      	ldr	r3, [r3, #8]
 8006b1e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006b20:	68fa      	ldr	r2, [r7, #12]
 8006b22:	4b60      	ldr	r3, [pc, #384]	; (8006ca4 <HAL_TIM_ConfigClockSource+0x1b8>)
 8006b24:	4013      	ands	r3, r2
 8006b26:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006b28:	68fb      	ldr	r3, [r7, #12]
 8006b2a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006b2e:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	681b      	ldr	r3, [r3, #0]
 8006b34:	68fa      	ldr	r2, [r7, #12]
 8006b36:	609a      	str	r2, [r3, #8]
  
  switch (sClockSourceConfig->ClockSource)
 8006b38:	683b      	ldr	r3, [r7, #0]
 8006b3a:	681b      	ldr	r3, [r3, #0]
 8006b3c:	2b40      	cmp	r3, #64	; 0x40
 8006b3e:	d077      	beq.n	8006c30 <HAL_TIM_ConfigClockSource+0x144>
 8006b40:	2b40      	cmp	r3, #64	; 0x40
 8006b42:	d80e      	bhi.n	8006b62 <HAL_TIM_ConfigClockSource+0x76>
 8006b44:	2b10      	cmp	r3, #16
 8006b46:	f000 808a 	beq.w	8006c5e <HAL_TIM_ConfigClockSource+0x172>
 8006b4a:	2b10      	cmp	r3, #16
 8006b4c:	d802      	bhi.n	8006b54 <HAL_TIM_ConfigClockSource+0x68>
 8006b4e:	2b00      	cmp	r3, #0
 8006b50:	d07e      	beq.n	8006c50 <HAL_TIM_ConfigClockSource+0x164>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_ITR3);
    }
    break;
    
    default:
    break;    
 8006b52:	e099      	b.n	8006c88 <HAL_TIM_ConfigClockSource+0x19c>
  switch (sClockSourceConfig->ClockSource)
 8006b54:	2b20      	cmp	r3, #32
 8006b56:	f000 8089 	beq.w	8006c6c <HAL_TIM_ConfigClockSource+0x180>
 8006b5a:	2b30      	cmp	r3, #48	; 0x30
 8006b5c:	f000 808d 	beq.w	8006c7a <HAL_TIM_ConfigClockSource+0x18e>
    break;    
 8006b60:	e092      	b.n	8006c88 <HAL_TIM_ConfigClockSource+0x19c>
  switch (sClockSourceConfig->ClockSource)
 8006b62:	2b70      	cmp	r3, #112	; 0x70
 8006b64:	d016      	beq.n	8006b94 <HAL_TIM_ConfigClockSource+0xa8>
 8006b66:	2b70      	cmp	r3, #112	; 0x70
 8006b68:	d804      	bhi.n	8006b74 <HAL_TIM_ConfigClockSource+0x88>
 8006b6a:	2b50      	cmp	r3, #80	; 0x50
 8006b6c:	d040      	beq.n	8006bf0 <HAL_TIM_ConfigClockSource+0x104>
 8006b6e:	2b60      	cmp	r3, #96	; 0x60
 8006b70:	d04e      	beq.n	8006c10 <HAL_TIM_ConfigClockSource+0x124>
    break;    
 8006b72:	e089      	b.n	8006c88 <HAL_TIM_ConfigClockSource+0x19c>
  switch (sClockSourceConfig->ClockSource)
 8006b74:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006b78:	d003      	beq.n	8006b82 <HAL_TIM_ConfigClockSource+0x96>
 8006b7a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006b7e:	d024      	beq.n	8006bca <HAL_TIM_ConfigClockSource+0xde>
    break;    
 8006b80:	e082      	b.n	8006c88 <HAL_TIM_ConfigClockSource+0x19c>
      htim->Instance->SMCR &= ~TIM_SMCR_SMS;
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	681a      	ldr	r2, [r3, #0]
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	681b      	ldr	r3, [r3, #0]
 8006b8a:	6899      	ldr	r1, [r3, #8]
 8006b8c:	4b46      	ldr	r3, [pc, #280]	; (8006ca8 <HAL_TIM_ConfigClockSource+0x1bc>)
 8006b8e:	400b      	ands	r3, r1
 8006b90:	6093      	str	r3, [r2, #8]
    break;
 8006b92:	e079      	b.n	8006c88 <HAL_TIM_ConfigClockSource+0x19c>
      TIM_ETR_SetConfig(htim->Instance, 
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	6818      	ldr	r0, [r3, #0]
 8006b98:	683b      	ldr	r3, [r7, #0]
 8006b9a:	6899      	ldr	r1, [r3, #8]
 8006b9c:	683b      	ldr	r3, [r7, #0]
 8006b9e:	685a      	ldr	r2, [r3, #4]
 8006ba0:	683b      	ldr	r3, [r7, #0]
 8006ba2:	68db      	ldr	r3, [r3, #12]
 8006ba4:	f000 fbad 	bl	8007302 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	681b      	ldr	r3, [r3, #0]
 8006bac:	689b      	ldr	r3, [r3, #8]
 8006bae:	60fb      	str	r3, [r7, #12]
      tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006bb0:	68fa      	ldr	r2, [r7, #12]
 8006bb2:	4b3c      	ldr	r3, [pc, #240]	; (8006ca4 <HAL_TIM_ConfigClockSource+0x1b8>)
 8006bb4:	4013      	ands	r3, r2
 8006bb6:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006bb8:	68fb      	ldr	r3, [r7, #12]
 8006bba:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8006bbe:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	681b      	ldr	r3, [r3, #0]
 8006bc4:	68fa      	ldr	r2, [r7, #12]
 8006bc6:	609a      	str	r2, [r3, #8]
    break;
 8006bc8:	e05e      	b.n	8006c88 <HAL_TIM_ConfigClockSource+0x19c>
      TIM_ETR_SetConfig(htim->Instance, 
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	6818      	ldr	r0, [r3, #0]
 8006bce:	683b      	ldr	r3, [r7, #0]
 8006bd0:	6899      	ldr	r1, [r3, #8]
 8006bd2:	683b      	ldr	r3, [r7, #0]
 8006bd4:	685a      	ldr	r2, [r3, #4]
 8006bd6:	683b      	ldr	r3, [r7, #0]
 8006bd8:	68db      	ldr	r3, [r3, #12]
 8006bda:	f000 fb92 	bl	8007302 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	681b      	ldr	r3, [r3, #0]
 8006be2:	687a      	ldr	r2, [r7, #4]
 8006be4:	6812      	ldr	r2, [r2, #0]
 8006be6:	6892      	ldr	r2, [r2, #8]
 8006be8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006bec:	609a      	str	r2, [r3, #8]
    break;
 8006bee:	e04b      	b.n	8006c88 <HAL_TIM_ConfigClockSource+0x19c>
      TIM_TI1_ConfigInputStage(htim->Instance, 
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	6818      	ldr	r0, [r3, #0]
 8006bf4:	683b      	ldr	r3, [r7, #0]
 8006bf6:	6859      	ldr	r1, [r3, #4]
 8006bf8:	683b      	ldr	r3, [r7, #0]
 8006bfa:	68db      	ldr	r3, [r3, #12]
 8006bfc:	461a      	mov	r2, r3
 8006bfe:	f000 faf9 	bl	80071f4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	681b      	ldr	r3, [r3, #0]
 8006c06:	2150      	movs	r1, #80	; 0x50
 8006c08:	4618      	mov	r0, r3
 8006c0a:	f000 fb5a 	bl	80072c2 <TIM_ITRx_SetConfig>
    break;
 8006c0e:	e03b      	b.n	8006c88 <HAL_TIM_ConfigClockSource+0x19c>
      TIM_TI2_ConfigInputStage(htim->Instance, 
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	6818      	ldr	r0, [r3, #0]
 8006c14:	683b      	ldr	r3, [r7, #0]
 8006c16:	6859      	ldr	r1, [r3, #4]
 8006c18:	683b      	ldr	r3, [r7, #0]
 8006c1a:	68db      	ldr	r3, [r3, #12]
 8006c1c:	461a      	mov	r2, r3
 8006c1e:	f000 fb1c 	bl	800725a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	681b      	ldr	r3, [r3, #0]
 8006c26:	2160      	movs	r1, #96	; 0x60
 8006c28:	4618      	mov	r0, r3
 8006c2a:	f000 fb4a 	bl	80072c2 <TIM_ITRx_SetConfig>
    break;
 8006c2e:	e02b      	b.n	8006c88 <HAL_TIM_ConfigClockSource+0x19c>
      TIM_TI1_ConfigInputStage(htim->Instance, 
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	6818      	ldr	r0, [r3, #0]
 8006c34:	683b      	ldr	r3, [r7, #0]
 8006c36:	6859      	ldr	r1, [r3, #4]
 8006c38:	683b      	ldr	r3, [r7, #0]
 8006c3a:	68db      	ldr	r3, [r3, #12]
 8006c3c:	461a      	mov	r2, r3
 8006c3e:	f000 fad9 	bl	80071f4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	681b      	ldr	r3, [r3, #0]
 8006c46:	2140      	movs	r1, #64	; 0x40
 8006c48:	4618      	mov	r0, r3
 8006c4a:	f000 fb3a 	bl	80072c2 <TIM_ITRx_SetConfig>
    break;
 8006c4e:	e01b      	b.n	8006c88 <HAL_TIM_ConfigClockSource+0x19c>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_ITR0);
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	681b      	ldr	r3, [r3, #0]
 8006c54:	2100      	movs	r1, #0
 8006c56:	4618      	mov	r0, r3
 8006c58:	f000 fb33 	bl	80072c2 <TIM_ITRx_SetConfig>
    break;
 8006c5c:	e014      	b.n	8006c88 <HAL_TIM_ConfigClockSource+0x19c>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_ITR1);
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	681b      	ldr	r3, [r3, #0]
 8006c62:	2110      	movs	r1, #16
 8006c64:	4618      	mov	r0, r3
 8006c66:	f000 fb2c 	bl	80072c2 <TIM_ITRx_SetConfig>
    break;
 8006c6a:	e00d      	b.n	8006c88 <HAL_TIM_ConfigClockSource+0x19c>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_ITR2);
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	681b      	ldr	r3, [r3, #0]
 8006c70:	2120      	movs	r1, #32
 8006c72:	4618      	mov	r0, r3
 8006c74:	f000 fb25 	bl	80072c2 <TIM_ITRx_SetConfig>
    break;
 8006c78:	e006      	b.n	8006c88 <HAL_TIM_ConfigClockSource+0x19c>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_ITR3);
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	681b      	ldr	r3, [r3, #0]
 8006c7e:	2130      	movs	r1, #48	; 0x30
 8006c80:	4618      	mov	r0, r3
 8006c82:	f000 fb1e 	bl	80072c2 <TIM_ITRx_SetConfig>
    break;
 8006c86:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	2201      	movs	r2, #1
 8006c8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  
  __HAL_UNLOCK(htim);
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	2200      	movs	r2, #0
 8006c94:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  return HAL_OK;
 8006c98:	2300      	movs	r3, #0
}
 8006c9a:	4618      	mov	r0, r3
 8006c9c:	3710      	adds	r7, #16
 8006c9e:	46bd      	mov	sp, r7
 8006ca0:	bd80      	pop	{r7, pc}
 8006ca2:	bf00      	nop
 8006ca4:	fffeff88 	.word	0xfffeff88
 8006ca8:	fffefff8 	.word	0xfffefff8

08006cac <HAL_TIM_OC_DelayElapsedCallback>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006cac:	b480      	push	{r7}
 8006cae:	b083      	sub	sp, #12
 8006cb0:	af00      	add	r7, sp, #0
 8006cb2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);
 
  /* NOTE : This function Should not be modified, when the callback is needed,
            the __HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006cb4:	bf00      	nop
 8006cb6:	370c      	adds	r7, #12
 8006cb8:	46bd      	mov	sp, r7
 8006cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cbe:	4770      	bx	lr

08006cc0 <HAL_TIM_IC_CaptureCallback>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006cc0:	b480      	push	{r7}
 8006cc2:	b083      	sub	sp, #12
 8006cc4:	af00      	add	r7, sp, #0
 8006cc6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);
 
  /* NOTE : This function Should not be modified, when the callback is needed,
            the __HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006cc8:	bf00      	nop
 8006cca:	370c      	adds	r7, #12
 8006ccc:	46bd      	mov	sp, r7
 8006cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cd2:	4770      	bx	lr

08006cd4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006cd4:	b480      	push	{r7}
 8006cd6:	b083      	sub	sp, #12
 8006cd8:	af00      	add	r7, sp, #0
 8006cda:	6078      	str	r0, [r7, #4]
  UNUSED(htim);
 
  /* NOTE : This function Should not be modified, when the callback is needed,
            the __HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006cdc:	bf00      	nop
 8006cde:	370c      	adds	r7, #12
 8006ce0:	46bd      	mov	sp, r7
 8006ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ce6:	4770      	bx	lr

08006ce8 <HAL_TIM_TriggerCallback>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006ce8:	b480      	push	{r7}
 8006cea:	b083      	sub	sp, #12
 8006cec:	af00      	add	r7, sp, #0
 8006cee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);
 
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006cf0:	bf00      	nop
 8006cf2:	370c      	adds	r7, #12
 8006cf4:	46bd      	mov	sp, r7
 8006cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cfa:	4770      	bx	lr

08006cfc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure pointer on TIM Time Base required parameters  
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006cfc:	b480      	push	{r7}
 8006cfe:	b085      	sub	sp, #20
 8006d00:	af00      	add	r7, sp, #0
 8006d02:	6078      	str	r0, [r7, #4]
 8006d04:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1 = 0;
 8006d06:	2300      	movs	r3, #0
 8006d08:	60fb      	str	r3, [r7, #12]
  tmpcr1 = TIMx->CR1;
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	681b      	ldr	r3, [r3, #0]
 8006d0e:	60fb      	str	r3, [r7, #12]
  
  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if(IS_TIM_CC3_INSTANCE(TIMx) != RESET)   
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	4a47      	ldr	r2, [pc, #284]	; (8006e30 <TIM_Base_SetConfig+0x134>)
 8006d14:	4293      	cmp	r3, r2
 8006d16:	d013      	beq.n	8006d40 <TIM_Base_SetConfig+0x44>
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006d1e:	d00f      	beq.n	8006d40 <TIM_Base_SetConfig+0x44>
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	4a44      	ldr	r2, [pc, #272]	; (8006e34 <TIM_Base_SetConfig+0x138>)
 8006d24:	4293      	cmp	r3, r2
 8006d26:	d00b      	beq.n	8006d40 <TIM_Base_SetConfig+0x44>
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	4a43      	ldr	r2, [pc, #268]	; (8006e38 <TIM_Base_SetConfig+0x13c>)
 8006d2c:	4293      	cmp	r3, r2
 8006d2e:	d007      	beq.n	8006d40 <TIM_Base_SetConfig+0x44>
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	4a42      	ldr	r2, [pc, #264]	; (8006e3c <TIM_Base_SetConfig+0x140>)
 8006d34:	4293      	cmp	r3, r2
 8006d36:	d003      	beq.n	8006d40 <TIM_Base_SetConfig+0x44>
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	4a41      	ldr	r2, [pc, #260]	; (8006e40 <TIM_Base_SetConfig+0x144>)
 8006d3c:	4293      	cmp	r3, r2
 8006d3e:	d101      	bne.n	8006d44 <TIM_Base_SetConfig+0x48>
 8006d40:	2301      	movs	r3, #1
 8006d42:	e000      	b.n	8006d46 <TIM_Base_SetConfig+0x4a>
 8006d44:	2300      	movs	r3, #0
 8006d46:	2b00      	cmp	r3, #0
 8006d48:	d008      	beq.n	8006d5c <TIM_Base_SetConfig+0x60>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006d4a:	68fb      	ldr	r3, [r7, #12]
 8006d4c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006d50:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006d52:	683b      	ldr	r3, [r7, #0]
 8006d54:	685b      	ldr	r3, [r3, #4]
 8006d56:	68fa      	ldr	r2, [r7, #12]
 8006d58:	4313      	orrs	r3, r2
 8006d5a:	60fb      	str	r3, [r7, #12]
  }
 
  if(IS_TIM_CC1_INSTANCE(TIMx) != RESET)  
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	4a34      	ldr	r2, [pc, #208]	; (8006e30 <TIM_Base_SetConfig+0x134>)
 8006d60:	4293      	cmp	r3, r2
 8006d62:	d02b      	beq.n	8006dbc <TIM_Base_SetConfig+0xc0>
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006d6a:	d027      	beq.n	8006dbc <TIM_Base_SetConfig+0xc0>
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	4a31      	ldr	r2, [pc, #196]	; (8006e34 <TIM_Base_SetConfig+0x138>)
 8006d70:	4293      	cmp	r3, r2
 8006d72:	d023      	beq.n	8006dbc <TIM_Base_SetConfig+0xc0>
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	4a30      	ldr	r2, [pc, #192]	; (8006e38 <TIM_Base_SetConfig+0x13c>)
 8006d78:	4293      	cmp	r3, r2
 8006d7a:	d01f      	beq.n	8006dbc <TIM_Base_SetConfig+0xc0>
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	4a2f      	ldr	r2, [pc, #188]	; (8006e3c <TIM_Base_SetConfig+0x140>)
 8006d80:	4293      	cmp	r3, r2
 8006d82:	d01b      	beq.n	8006dbc <TIM_Base_SetConfig+0xc0>
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	4a2e      	ldr	r2, [pc, #184]	; (8006e40 <TIM_Base_SetConfig+0x144>)
 8006d88:	4293      	cmp	r3, r2
 8006d8a:	d017      	beq.n	8006dbc <TIM_Base_SetConfig+0xc0>
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	4a2d      	ldr	r2, [pc, #180]	; (8006e44 <TIM_Base_SetConfig+0x148>)
 8006d90:	4293      	cmp	r3, r2
 8006d92:	d013      	beq.n	8006dbc <TIM_Base_SetConfig+0xc0>
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	4a2c      	ldr	r2, [pc, #176]	; (8006e48 <TIM_Base_SetConfig+0x14c>)
 8006d98:	4293      	cmp	r3, r2
 8006d9a:	d00f      	beq.n	8006dbc <TIM_Base_SetConfig+0xc0>
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	4a2b      	ldr	r2, [pc, #172]	; (8006e4c <TIM_Base_SetConfig+0x150>)
 8006da0:	4293      	cmp	r3, r2
 8006da2:	d00b      	beq.n	8006dbc <TIM_Base_SetConfig+0xc0>
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	4a2a      	ldr	r2, [pc, #168]	; (8006e50 <TIM_Base_SetConfig+0x154>)
 8006da8:	4293      	cmp	r3, r2
 8006daa:	d007      	beq.n	8006dbc <TIM_Base_SetConfig+0xc0>
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	4a29      	ldr	r2, [pc, #164]	; (8006e54 <TIM_Base_SetConfig+0x158>)
 8006db0:	4293      	cmp	r3, r2
 8006db2:	d003      	beq.n	8006dbc <TIM_Base_SetConfig+0xc0>
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	4a28      	ldr	r2, [pc, #160]	; (8006e58 <TIM_Base_SetConfig+0x15c>)
 8006db8:	4293      	cmp	r3, r2
 8006dba:	d101      	bne.n	8006dc0 <TIM_Base_SetConfig+0xc4>
 8006dbc:	2301      	movs	r3, #1
 8006dbe:	e000      	b.n	8006dc2 <TIM_Base_SetConfig+0xc6>
 8006dc0:	2300      	movs	r3, #0
 8006dc2:	2b00      	cmp	r3, #0
 8006dc4:	d008      	beq.n	8006dd8 <TIM_Base_SetConfig+0xdc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006dc6:	68fb      	ldr	r3, [r7, #12]
 8006dc8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006dcc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006dce:	683b      	ldr	r3, [r7, #0]
 8006dd0:	68db      	ldr	r3, [r3, #12]
 8006dd2:	68fa      	ldr	r2, [r7, #12]
 8006dd4:	4313      	orrs	r3, r2
 8006dd6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006dd8:	68fb      	ldr	r3, [r7, #12]
 8006dda:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006dde:	683b      	ldr	r3, [r7, #0]
 8006de0:	695b      	ldr	r3, [r3, #20]
 8006de2:	4313      	orrs	r3, r2
 8006de4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	68fa      	ldr	r2, [r7, #12]
 8006dea:	601a      	str	r2, [r3, #0]

  /* Set the Auto-reload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006dec:	683b      	ldr	r3, [r7, #0]
 8006dee:	689a      	ldr	r2, [r3, #8]
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	62da      	str	r2, [r3, #44]	; 0x2c
 
  /* Set the Prescaler value */
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 8006df4:	683b      	ldr	r3, [r7, #0]
 8006df6:	681a      	ldr	r2, [r3, #0]
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	629a      	str	r2, [r3, #40]	; 0x28
    
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)  
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	4a0c      	ldr	r2, [pc, #48]	; (8006e30 <TIM_Base_SetConfig+0x134>)
 8006e00:	4293      	cmp	r3, r2
 8006e02:	d003      	beq.n	8006e0c <TIM_Base_SetConfig+0x110>
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	4a0e      	ldr	r2, [pc, #56]	; (8006e40 <TIM_Base_SetConfig+0x144>)
 8006e08:	4293      	cmp	r3, r2
 8006e0a:	d101      	bne.n	8006e10 <TIM_Base_SetConfig+0x114>
 8006e0c:	2301      	movs	r3, #1
 8006e0e:	e000      	b.n	8006e12 <TIM_Base_SetConfig+0x116>
 8006e10:	2300      	movs	r3, #0
 8006e12:	2b00      	cmp	r3, #0
 8006e14:	d003      	beq.n	8006e1e <TIM_Base_SetConfig+0x122>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006e16:	683b      	ldr	r3, [r7, #0]
 8006e18:	691a      	ldr	r2, [r3, #16]
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler 
     and the repetition counter(only for TIM1 and TIM8) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	2201      	movs	r2, #1
 8006e22:	615a      	str	r2, [r3, #20]
}
 8006e24:	bf00      	nop
 8006e26:	3714      	adds	r7, #20
 8006e28:	46bd      	mov	sp, r7
 8006e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e2e:	4770      	bx	lr
 8006e30:	40010000 	.word	0x40010000
 8006e34:	40000400 	.word	0x40000400
 8006e38:	40000800 	.word	0x40000800
 8006e3c:	40000c00 	.word	0x40000c00
 8006e40:	40010400 	.word	0x40010400
 8006e44:	40014000 	.word	0x40014000
 8006e48:	40014400 	.word	0x40014400
 8006e4c:	40014800 	.word	0x40014800
 8006e50:	40001800 	.word	0x40001800
 8006e54:	40001c00 	.word	0x40001c00
 8006e58:	40002000 	.word	0x40002000

08006e5c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006e5c:	b480      	push	{r7}
 8006e5e:	b087      	sub	sp, #28
 8006e60:	af00      	add	r7, sp, #0
 8006e62:	6078      	str	r0, [r7, #4]
 8006e64:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx = 0;
 8006e66:	2300      	movs	r3, #0
 8006e68:	60fb      	str	r3, [r7, #12]
  uint32_t tmpccer = 0;
 8006e6a:	2300      	movs	r3, #0
 8006e6c:	617b      	str	r3, [r7, #20]
  uint32_t tmpcr2 = 0;  
 8006e6e:	2300      	movs	r3, #0
 8006e70:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	6a1b      	ldr	r3, [r3, #32]
 8006e76:	f023 0201 	bic.w	r2, r3, #1
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	621a      	str	r2, [r3, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	6a1b      	ldr	r3, [r3, #32]
 8006e82:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 = TIMx->CR2;
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	685b      	ldr	r3, [r3, #4]
 8006e88:	613b      	str	r3, [r7, #16]
  
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	699b      	ldr	r3, [r3, #24]
 8006e8e:	60fb      	str	r3, [r7, #12]
    
  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006e90:	68fa      	ldr	r2, [r7, #12]
 8006e92:	4b2a      	ldr	r3, [pc, #168]	; (8006f3c <TIM_OC1_SetConfig+0xe0>)
 8006e94:	4013      	ands	r3, r2
 8006e96:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006e98:	68fb      	ldr	r3, [r7, #12]
 8006e9a:	f023 0303 	bic.w	r3, r3, #3
 8006e9e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006ea0:	683b      	ldr	r3, [r7, #0]
 8006ea2:	681b      	ldr	r3, [r3, #0]
 8006ea4:	68fa      	ldr	r2, [r7, #12]
 8006ea6:	4313      	orrs	r3, r2
 8006ea8:	60fb      	str	r3, [r7, #12]
  
  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006eaa:	697b      	ldr	r3, [r7, #20]
 8006eac:	f023 0302 	bic.w	r3, r3, #2
 8006eb0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006eb2:	683b      	ldr	r3, [r7, #0]
 8006eb4:	689b      	ldr	r3, [r3, #8]
 8006eb6:	697a      	ldr	r2, [r7, #20]
 8006eb8:	4313      	orrs	r3, r2
 8006eba:	617b      	str	r3, [r7, #20]

    
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	4a20      	ldr	r2, [pc, #128]	; (8006f40 <TIM_OC1_SetConfig+0xe4>)
 8006ec0:	4293      	cmp	r3, r2
 8006ec2:	d003      	beq.n	8006ecc <TIM_OC1_SetConfig+0x70>
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	4a1f      	ldr	r2, [pc, #124]	; (8006f44 <TIM_OC1_SetConfig+0xe8>)
 8006ec8:	4293      	cmp	r3, r2
 8006eca:	d101      	bne.n	8006ed0 <TIM_OC1_SetConfig+0x74>
 8006ecc:	2301      	movs	r3, #1
 8006ece:	e000      	b.n	8006ed2 <TIM_OC1_SetConfig+0x76>
 8006ed0:	2300      	movs	r3, #0
 8006ed2:	2b00      	cmp	r3, #0
 8006ed4:	d01e      	beq.n	8006f14 <TIM_OC1_SetConfig+0xb8>
  {   
    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006ed6:	697b      	ldr	r3, [r7, #20]
 8006ed8:	f023 0308 	bic.w	r3, r3, #8
 8006edc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006ede:	683b      	ldr	r3, [r7, #0]
 8006ee0:	68db      	ldr	r3, [r3, #12]
 8006ee2:	697a      	ldr	r2, [r7, #20]
 8006ee4:	4313      	orrs	r3, r2
 8006ee6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006ee8:	697b      	ldr	r3, [r7, #20]
 8006eea:	f023 0304 	bic.w	r3, r3, #4
 8006eee:	617b      	str	r3, [r7, #20]
    
    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006ef0:	693b      	ldr	r3, [r7, #16]
 8006ef2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006ef6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006ef8:	693b      	ldr	r3, [r7, #16]
 8006efa:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006efe:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006f00:	683b      	ldr	r3, [r7, #0]
 8006f02:	695b      	ldr	r3, [r3, #20]
 8006f04:	693a      	ldr	r2, [r7, #16]
 8006f06:	4313      	orrs	r3, r2
 8006f08:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006f0a:	683b      	ldr	r3, [r7, #0]
 8006f0c:	699b      	ldr	r3, [r3, #24]
 8006f0e:	693a      	ldr	r2, [r7, #16]
 8006f10:	4313      	orrs	r3, r2
 8006f12:	613b      	str	r3, [r7, #16]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	693a      	ldr	r2, [r7, #16]
 8006f18:	605a      	str	r2, [r3, #4]
  
  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	68fa      	ldr	r2, [r7, #12]
 8006f1e:	619a      	str	r2, [r3, #24]
  
  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006f20:	683b      	ldr	r3, [r7, #0]
 8006f22:	685a      	ldr	r2, [r3, #4]
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	635a      	str	r2, [r3, #52]	; 0x34
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;  
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	697a      	ldr	r2, [r7, #20]
 8006f2c:	621a      	str	r2, [r3, #32]
} 
 8006f2e:	bf00      	nop
 8006f30:	371c      	adds	r7, #28
 8006f32:	46bd      	mov	sp, r7
 8006f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f38:	4770      	bx	lr
 8006f3a:	bf00      	nop
 8006f3c:	fffeff8f 	.word	0xfffeff8f
 8006f40:	40010000 	.word	0x40010000
 8006f44:	40010400 	.word	0x40010400

08006f48 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006f48:	b480      	push	{r7}
 8006f4a:	b087      	sub	sp, #28
 8006f4c:	af00      	add	r7, sp, #0
 8006f4e:	6078      	str	r0, [r7, #4]
 8006f50:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx = 0;
 8006f52:	2300      	movs	r3, #0
 8006f54:	60fb      	str	r3, [r7, #12]
  uint32_t tmpccer = 0;
 8006f56:	2300      	movs	r3, #0
 8006f58:	617b      	str	r3, [r7, #20]
  uint32_t tmpcr2 = 0;
 8006f5a:	2300      	movs	r3, #0
 8006f5c:	613b      	str	r3, [r7, #16]
   
  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	6a1b      	ldr	r3, [r3, #32]
 8006f62:	f023 0210 	bic.w	r2, r3, #16
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	621a      	str	r2, [r3, #32]
  
  /* Get the TIMx CCER register value */  
  tmpccer = TIMx->CCER;
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	6a1b      	ldr	r3, [r3, #32]
 8006f6e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 = TIMx->CR2;
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	685b      	ldr	r3, [r3, #4]
 8006f74:	613b      	str	r3, [r7, #16]
  
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	699b      	ldr	r3, [r3, #24]
 8006f7a:	60fb      	str	r3, [r7, #12]
    
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006f7c:	68fa      	ldr	r2, [r7, #12]
 8006f7e:	4b2c      	ldr	r3, [pc, #176]	; (8007030 <TIM_OC2_SetConfig+0xe8>)
 8006f80:	4013      	ands	r3, r2
 8006f82:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006f84:	68fb      	ldr	r3, [r7, #12]
 8006f86:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006f8a:	60fb      	str	r3, [r7, #12]
  
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8);
 8006f8c:	683b      	ldr	r3, [r7, #0]
 8006f8e:	681b      	ldr	r3, [r3, #0]
 8006f90:	021b      	lsls	r3, r3, #8
 8006f92:	68fa      	ldr	r2, [r7, #12]
 8006f94:	4313      	orrs	r3, r2
 8006f96:	60fb      	str	r3, [r7, #12]
  
  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006f98:	697b      	ldr	r3, [r7, #20]
 8006f9a:	f023 0320 	bic.w	r3, r3, #32
 8006f9e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4);
 8006fa0:	683b      	ldr	r3, [r7, #0]
 8006fa2:	689b      	ldr	r3, [r3, #8]
 8006fa4:	011b      	lsls	r3, r3, #4
 8006fa6:	697a      	ldr	r2, [r7, #20]
 8006fa8:	4313      	orrs	r3, r2
 8006faa:	617b      	str	r3, [r7, #20]
    
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	4a21      	ldr	r2, [pc, #132]	; (8007034 <TIM_OC2_SetConfig+0xec>)
 8006fb0:	4293      	cmp	r3, r2
 8006fb2:	d003      	beq.n	8006fbc <TIM_OC2_SetConfig+0x74>
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	4a20      	ldr	r2, [pc, #128]	; (8007038 <TIM_OC2_SetConfig+0xf0>)
 8006fb8:	4293      	cmp	r3, r2
 8006fba:	d101      	bne.n	8006fc0 <TIM_OC2_SetConfig+0x78>
 8006fbc:	2301      	movs	r3, #1
 8006fbe:	e000      	b.n	8006fc2 <TIM_OC2_SetConfig+0x7a>
 8006fc0:	2300      	movs	r3, #0
 8006fc2:	2b00      	cmp	r3, #0
 8006fc4:	d021      	beq.n	800700a <TIM_OC2_SetConfig+0xc2>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));
    
    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006fc6:	697b      	ldr	r3, [r7, #20]
 8006fc8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006fcc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4);
 8006fce:	683b      	ldr	r3, [r7, #0]
 8006fd0:	68db      	ldr	r3, [r3, #12]
 8006fd2:	011b      	lsls	r3, r3, #4
 8006fd4:	697a      	ldr	r2, [r7, #20]
 8006fd6:	4313      	orrs	r3, r2
 8006fd8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006fda:	697b      	ldr	r3, [r7, #20]
 8006fdc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006fe0:	617b      	str	r3, [r7, #20]
    
    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006fe2:	693b      	ldr	r3, [r7, #16]
 8006fe4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006fe8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006fea:	693b      	ldr	r3, [r7, #16]
 8006fec:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006ff0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2);
 8006ff2:	683b      	ldr	r3, [r7, #0]
 8006ff4:	695b      	ldr	r3, [r3, #20]
 8006ff6:	009b      	lsls	r3, r3, #2
 8006ff8:	693a      	ldr	r2, [r7, #16]
 8006ffa:	4313      	orrs	r3, r2
 8006ffc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2);
 8006ffe:	683b      	ldr	r3, [r7, #0]
 8007000:	699b      	ldr	r3, [r3, #24]
 8007002:	009b      	lsls	r3, r3, #2
 8007004:	693a      	ldr	r2, [r7, #16]
 8007006:	4313      	orrs	r3, r2
 8007008:	613b      	str	r3, [r7, #16]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	693a      	ldr	r2, [r7, #16]
 800700e:	605a      	str	r2, [r3, #4]
  
  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	68fa      	ldr	r2, [r7, #12]
 8007014:	619a      	str	r2, [r3, #24]
  
  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8007016:	683b      	ldr	r3, [r7, #0]
 8007018:	685a      	ldr	r2, [r3, #4]
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	697a      	ldr	r2, [r7, #20]
 8007022:	621a      	str	r2, [r3, #32]
}
 8007024:	bf00      	nop
 8007026:	371c      	adds	r7, #28
 8007028:	46bd      	mov	sp, r7
 800702a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800702e:	4770      	bx	lr
 8007030:	feff8fff 	.word	0xfeff8fff
 8007034:	40010000 	.word	0x40010000
 8007038:	40010400 	.word	0x40010400

0800703c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800703c:	b480      	push	{r7}
 800703e:	b087      	sub	sp, #28
 8007040:	af00      	add	r7, sp, #0
 8007042:	6078      	str	r0, [r7, #4]
 8007044:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx = 0;
 8007046:	2300      	movs	r3, #0
 8007048:	60fb      	str	r3, [r7, #12]
  uint32_t tmpccer = 0;
 800704a:	2300      	movs	r3, #0
 800704c:	617b      	str	r3, [r7, #20]
  uint32_t tmpcr2 = 0;   
 800704e:	2300      	movs	r3, #0
 8007050:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	6a1b      	ldr	r3, [r3, #32]
 8007056:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	621a      	str	r2, [r3, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	6a1b      	ldr	r3, [r3, #32]
 8007062:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 = TIMx->CR2;
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	685b      	ldr	r3, [r3, #4]
 8007068:	613b      	str	r3, [r7, #16]
  
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	69db      	ldr	r3, [r3, #28]
 800706e:	60fb      	str	r3, [r7, #12]
    
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8007070:	68fa      	ldr	r2, [r7, #12]
 8007072:	4b2c      	ldr	r3, [pc, #176]	; (8007124 <TIM_OC3_SetConfig+0xe8>)
 8007074:	4013      	ands	r3, r2
 8007076:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;  
 8007078:	68fb      	ldr	r3, [r7, #12]
 800707a:	f023 0303 	bic.w	r3, r3, #3
 800707e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007080:	683b      	ldr	r3, [r7, #0]
 8007082:	681b      	ldr	r3, [r3, #0]
 8007084:	68fa      	ldr	r2, [r7, #12]
 8007086:	4313      	orrs	r3, r2
 8007088:	60fb      	str	r3, [r7, #12]
  
  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800708a:	697b      	ldr	r3, [r7, #20]
 800708c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007090:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8);
 8007092:	683b      	ldr	r3, [r7, #0]
 8007094:	689b      	ldr	r3, [r3, #8]
 8007096:	021b      	lsls	r3, r3, #8
 8007098:	697a      	ldr	r2, [r7, #20]
 800709a:	4313      	orrs	r3, r2
 800709c:	617b      	str	r3, [r7, #20]
    
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	4a21      	ldr	r2, [pc, #132]	; (8007128 <TIM_OC3_SetConfig+0xec>)
 80070a2:	4293      	cmp	r3, r2
 80070a4:	d003      	beq.n	80070ae <TIM_OC3_SetConfig+0x72>
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	4a20      	ldr	r2, [pc, #128]	; (800712c <TIM_OC3_SetConfig+0xf0>)
 80070aa:	4293      	cmp	r3, r2
 80070ac:	d101      	bne.n	80070b2 <TIM_OC3_SetConfig+0x76>
 80070ae:	2301      	movs	r3, #1
 80070b0:	e000      	b.n	80070b4 <TIM_OC3_SetConfig+0x78>
 80070b2:	2300      	movs	r3, #0
 80070b4:	2b00      	cmp	r3, #0
 80070b6:	d021      	beq.n	80070fc <TIM_OC3_SetConfig+0xc0>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));
    
    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80070b8:	697b      	ldr	r3, [r7, #20]
 80070ba:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80070be:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8);
 80070c0:	683b      	ldr	r3, [r7, #0]
 80070c2:	68db      	ldr	r3, [r3, #12]
 80070c4:	021b      	lsls	r3, r3, #8
 80070c6:	697a      	ldr	r2, [r7, #20]
 80070c8:	4313      	orrs	r3, r2
 80070ca:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80070cc:	697b      	ldr	r3, [r7, #20]
 80070ce:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80070d2:	617b      	str	r3, [r7, #20]
    
    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80070d4:	693b      	ldr	r3, [r7, #16]
 80070d6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80070da:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80070dc:	693b      	ldr	r3, [r7, #16]
 80070de:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80070e2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4);
 80070e4:	683b      	ldr	r3, [r7, #0]
 80070e6:	695b      	ldr	r3, [r3, #20]
 80070e8:	011b      	lsls	r3, r3, #4
 80070ea:	693a      	ldr	r2, [r7, #16]
 80070ec:	4313      	orrs	r3, r2
 80070ee:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4);
 80070f0:	683b      	ldr	r3, [r7, #0]
 80070f2:	699b      	ldr	r3, [r3, #24]
 80070f4:	011b      	lsls	r3, r3, #4
 80070f6:	693a      	ldr	r2, [r7, #16]
 80070f8:	4313      	orrs	r3, r2
 80070fa:	613b      	str	r3, [r7, #16]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	693a      	ldr	r2, [r7, #16]
 8007100:	605a      	str	r2, [r3, #4]
  
  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	68fa      	ldr	r2, [r7, #12]
 8007106:	61da      	str	r2, [r3, #28]
  
  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8007108:	683b      	ldr	r3, [r7, #0]
 800710a:	685a      	ldr	r2, [r3, #4]
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	63da      	str	r2, [r3, #60]	; 0x3c
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	697a      	ldr	r2, [r7, #20]
 8007114:	621a      	str	r2, [r3, #32]
}
 8007116:	bf00      	nop
 8007118:	371c      	adds	r7, #28
 800711a:	46bd      	mov	sp, r7
 800711c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007120:	4770      	bx	lr
 8007122:	bf00      	nop
 8007124:	fffeff8f 	.word	0xfffeff8f
 8007128:	40010000 	.word	0x40010000
 800712c:	40010400 	.word	0x40010400

08007130 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007130:	b480      	push	{r7}
 8007132:	b087      	sub	sp, #28
 8007134:	af00      	add	r7, sp, #0
 8007136:	6078      	str	r0, [r7, #4]
 8007138:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx = 0;
 800713a:	2300      	movs	r3, #0
 800713c:	613b      	str	r3, [r7, #16]
  uint32_t tmpccer = 0;
 800713e:	2300      	movs	r3, #0
 8007140:	60fb      	str	r3, [r7, #12]
  uint32_t tmpcr2 = 0;
 8007142:	2300      	movs	r3, #0
 8007144:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	6a1b      	ldr	r3, [r3, #32]
 800714a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	621a      	str	r2, [r3, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	6a1b      	ldr	r3, [r3, #32]
 8007156:	60fb      	str	r3, [r7, #12]
  /* Get the TIMx CR2 register value */
  tmpcr2 = TIMx->CR2;
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	685b      	ldr	r3, [r3, #4]
 800715c:	617b      	str	r3, [r7, #20]
  
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	69db      	ldr	r3, [r3, #28]
 8007162:	613b      	str	r3, [r7, #16]
    
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8007164:	693a      	ldr	r2, [r7, #16]
 8007166:	4b20      	ldr	r3, [pc, #128]	; (80071e8 <TIM_OC4_SetConfig+0xb8>)
 8007168:	4013      	ands	r3, r2
 800716a:	613b      	str	r3, [r7, #16]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800716c:	693b      	ldr	r3, [r7, #16]
 800716e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007172:	613b      	str	r3, [r7, #16]
  
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8);
 8007174:	683b      	ldr	r3, [r7, #0]
 8007176:	681b      	ldr	r3, [r3, #0]
 8007178:	021b      	lsls	r3, r3, #8
 800717a:	693a      	ldr	r2, [r7, #16]
 800717c:	4313      	orrs	r3, r2
 800717e:	613b      	str	r3, [r7, #16]
  
  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8007180:	68fb      	ldr	r3, [r7, #12]
 8007182:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007186:	60fb      	str	r3, [r7, #12]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12);
 8007188:	683b      	ldr	r3, [r7, #0]
 800718a:	689b      	ldr	r3, [r3, #8]
 800718c:	031b      	lsls	r3, r3, #12
 800718e:	68fa      	ldr	r2, [r7, #12]
 8007190:	4313      	orrs	r3, r2
 8007192:	60fb      	str	r3, [r7, #12]
   
  /*if((TIMx == TIM1) || (TIMx == TIM8))*/
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	4a15      	ldr	r2, [pc, #84]	; (80071ec <TIM_OC4_SetConfig+0xbc>)
 8007198:	4293      	cmp	r3, r2
 800719a:	d003      	beq.n	80071a4 <TIM_OC4_SetConfig+0x74>
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	4a14      	ldr	r2, [pc, #80]	; (80071f0 <TIM_OC4_SetConfig+0xc0>)
 80071a0:	4293      	cmp	r3, r2
 80071a2:	d101      	bne.n	80071a8 <TIM_OC4_SetConfig+0x78>
 80071a4:	2301      	movs	r3, #1
 80071a6:	e000      	b.n	80071aa <TIM_OC4_SetConfig+0x7a>
 80071a8:	2300      	movs	r3, #0
 80071aa:	2b00      	cmp	r3, #0
 80071ac:	d009      	beq.n	80071c2 <TIM_OC4_SetConfig+0x92>
  {
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80071ae:	697b      	ldr	r3, [r7, #20]
 80071b0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80071b4:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6);
 80071b6:	683b      	ldr	r3, [r7, #0]
 80071b8:	695b      	ldr	r3, [r3, #20]
 80071ba:	019b      	lsls	r3, r3, #6
 80071bc:	697a      	ldr	r2, [r7, #20]
 80071be:	4313      	orrs	r3, r2
 80071c0:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	697a      	ldr	r2, [r7, #20]
 80071c6:	605a      	str	r2, [r3, #4]
  
  /* Write to TIMx CCMR2 */  
  TIMx->CCMR2 = tmpccmrx;
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	693a      	ldr	r2, [r7, #16]
 80071cc:	61da      	str	r2, [r3, #28]
    
  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80071ce:	683b      	ldr	r3, [r7, #0]
 80071d0:	685a      	ldr	r2, [r3, #4]
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	641a      	str	r2, [r3, #64]	; 0x40
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	68fa      	ldr	r2, [r7, #12]
 80071da:	621a      	str	r2, [r3, #32]
}
 80071dc:	bf00      	nop
 80071de:	371c      	adds	r7, #28
 80071e0:	46bd      	mov	sp, r7
 80071e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071e6:	4770      	bx	lr
 80071e8:	feff8fff 	.word	0xfeff8fff
 80071ec:	40010000 	.word	0x40010000
 80071f0:	40010400 	.word	0x40010400

080071f4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80071f4:	b480      	push	{r7}
 80071f6:	b087      	sub	sp, #28
 80071f8:	af00      	add	r7, sp, #0
 80071fa:	60f8      	str	r0, [r7, #12]
 80071fc:	60b9      	str	r1, [r7, #8]
 80071fe:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1 = 0;
 8007200:	2300      	movs	r3, #0
 8007202:	617b      	str	r3, [r7, #20]
  uint32_t tmpccer = 0;
 8007204:	2300      	movs	r3, #0
 8007206:	613b      	str	r3, [r7, #16]
  
  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007208:	68fb      	ldr	r3, [r7, #12]
 800720a:	6a1b      	ldr	r3, [r3, #32]
 800720c:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800720e:	68fb      	ldr	r3, [r7, #12]
 8007210:	6a1b      	ldr	r3, [r3, #32]
 8007212:	f023 0201 	bic.w	r2, r3, #1
 8007216:	68fb      	ldr	r3, [r7, #12]
 8007218:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;    
 800721a:	68fb      	ldr	r3, [r7, #12]
 800721c:	699b      	ldr	r3, [r3, #24]
 800721e:	617b      	str	r3, [r7, #20]
  
  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007220:	697b      	ldr	r3, [r7, #20]
 8007222:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007226:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 4);
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	011b      	lsls	r3, r3, #4
 800722c:	697a      	ldr	r2, [r7, #20]
 800722e:	4313      	orrs	r3, r2
 8007230:	617b      	str	r3, [r7, #20]
  
  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007232:	693b      	ldr	r3, [r7, #16]
 8007234:	f023 030a 	bic.w	r3, r3, #10
 8007238:	613b      	str	r3, [r7, #16]
  tmpccer |= TIM_ICPolarity;
 800723a:	693a      	ldr	r2, [r7, #16]
 800723c:	68bb      	ldr	r3, [r7, #8]
 800723e:	4313      	orrs	r3, r2
 8007240:	613b      	str	r3, [r7, #16]
  
  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007242:	68fb      	ldr	r3, [r7, #12]
 8007244:	697a      	ldr	r2, [r7, #20]
 8007246:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007248:	68fb      	ldr	r3, [r7, #12]
 800724a:	693a      	ldr	r2, [r7, #16]
 800724c:	621a      	str	r2, [r3, #32]
}
 800724e:	bf00      	nop
 8007250:	371c      	adds	r7, #28
 8007252:	46bd      	mov	sp, r7
 8007254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007258:	4770      	bx	lr

0800725a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800725a:	b480      	push	{r7}
 800725c:	b087      	sub	sp, #28
 800725e:	af00      	add	r7, sp, #0
 8007260:	60f8      	str	r0, [r7, #12]
 8007262:	60b9      	str	r1, [r7, #8]
 8007264:	607a      	str	r2, [r7, #4]
uint32_t tmpccmr1 = 0;
 8007266:	2300      	movs	r3, #0
 8007268:	617b      	str	r3, [r7, #20]
  uint32_t tmpccer = 0;
 800726a:	2300      	movs	r3, #0
 800726c:	613b      	str	r3, [r7, #16]
  
  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800726e:	68fb      	ldr	r3, [r7, #12]
 8007270:	6a1b      	ldr	r3, [r3, #32]
 8007272:	f023 0210 	bic.w	r2, r3, #16
 8007276:	68fb      	ldr	r3, [r7, #12]
 8007278:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800727a:	68fb      	ldr	r3, [r7, #12]
 800727c:	699b      	ldr	r3, [r3, #24]
 800727e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007280:	68fb      	ldr	r3, [r7, #12]
 8007282:	6a1b      	ldr	r3, [r3, #32]
 8007284:	613b      	str	r3, [r7, #16]
  
  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007286:	697b      	ldr	r3, [r7, #20]
 8007288:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800728c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12);
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	031b      	lsls	r3, r3, #12
 8007292:	697a      	ldr	r2, [r7, #20]
 8007294:	4313      	orrs	r3, r2
 8007296:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007298:	693b      	ldr	r3, [r7, #16]
 800729a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800729e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4);
 80072a0:	68bb      	ldr	r3, [r7, #8]
 80072a2:	011b      	lsls	r3, r3, #4
 80072a4:	693a      	ldr	r2, [r7, #16]
 80072a6:	4313      	orrs	r3, r2
 80072a8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80072aa:	68fb      	ldr	r3, [r7, #12]
 80072ac:	697a      	ldr	r2, [r7, #20]
 80072ae:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80072b0:	68fb      	ldr	r3, [r7, #12]
 80072b2:	693a      	ldr	r2, [r7, #16]
 80072b4:	621a      	str	r2, [r3, #32]
}
 80072b6:	bf00      	nop
 80072b8:	371c      	adds	r7, #28
 80072ba:	46bd      	mov	sp, r7
 80072bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072c0:	4770      	bx	lr

080072c2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint16_t TIM_ITRx)
{
 80072c2:	b480      	push	{r7}
 80072c4:	b085      	sub	sp, #20
 80072c6:	af00      	add	r7, sp, #0
 80072c8:	6078      	str	r0, [r7, #4]
 80072ca:	460b      	mov	r3, r1
 80072cc:	807b      	strh	r3, [r7, #2]
  uint32_t tmpsmcr = 0;
 80072ce:	2300      	movs	r3, #0
 80072d0:	60fb      	str	r3, [r7, #12]
  
   /* Get the TIMx SMCR register value */
   tmpsmcr = TIMx->SMCR;
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	689b      	ldr	r3, [r3, #8]
 80072d6:	60fb      	str	r3, [r7, #12]
   /* Reset the TS Bits */
   tmpsmcr &= ~TIM_SMCR_TS;
 80072d8:	68fb      	ldr	r3, [r7, #12]
 80072da:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80072de:	60fb      	str	r3, [r7, #12]
   /* Set the Input Trigger source and the slave mode*/
   tmpsmcr |= TIM_ITRx | TIM_SLAVEMODE_EXTERNAL1;
 80072e0:	887b      	ldrh	r3, [r7, #2]
 80072e2:	f043 0307 	orr.w	r3, r3, #7
 80072e6:	b29b      	uxth	r3, r3
 80072e8:	461a      	mov	r2, r3
 80072ea:	68fb      	ldr	r3, [r7, #12]
 80072ec:	4313      	orrs	r3, r2
 80072ee:	60fb      	str	r3, [r7, #12]
   /* Write to TIMx SMCR */
   TIMx->SMCR = tmpsmcr;
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	68fa      	ldr	r2, [r7, #12]
 80072f4:	609a      	str	r2, [r3, #8]
}
 80072f6:	bf00      	nop
 80072f8:	3714      	adds	r7, #20
 80072fa:	46bd      	mov	sp, r7
 80072fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007300:	4770      	bx	lr

08007302 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef* TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007302:	b480      	push	{r7}
 8007304:	b087      	sub	sp, #28
 8007306:	af00      	add	r7, sp, #0
 8007308:	60f8      	str	r0, [r7, #12]
 800730a:	60b9      	str	r1, [r7, #8]
 800730c:	607a      	str	r2, [r7, #4]
 800730e:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr = 0;
 8007310:	2300      	movs	r3, #0
 8007312:	617b      	str	r3, [r7, #20]

  tmpsmcr = TIMx->SMCR;
 8007314:	68fb      	ldr	r3, [r7, #12]
 8007316:	689b      	ldr	r3, [r3, #8]
 8007318:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800731a:	697b      	ldr	r3, [r7, #20]
 800731c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007320:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8)));
 8007322:	683b      	ldr	r3, [r7, #0]
 8007324:	021a      	lsls	r2, r3, #8
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	431a      	orrs	r2, r3
 800732a:	68bb      	ldr	r3, [r7, #8]
 800732c:	4313      	orrs	r3, r2
 800732e:	697a      	ldr	r2, [r7, #20]
 8007330:	4313      	orrs	r3, r2
 8007332:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007334:	68fb      	ldr	r3, [r7, #12]
 8007336:	697a      	ldr	r2, [r7, #20]
 8007338:	609a      	str	r2, [r3, #8]
} 
 800733a:	bf00      	nop
 800733c:	371c      	adds	r7, #28
 800733e:	46bd      	mov	sp, r7
 8007340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007344:	4770      	bx	lr

08007346 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_Disable. 
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef* TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8007346:	b480      	push	{r7}
 8007348:	b087      	sub	sp, #28
 800734a:	af00      	add	r7, sp, #0
 800734c:	60f8      	str	r0, [r7, #12]
 800734e:	60b9      	str	r1, [r7, #8]
 8007350:	607a      	str	r2, [r7, #4]
  uint32_t tmp = 0;
 8007352:	2300      	movs	r3, #0
 8007354:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx)); 
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << Channel;
 8007356:	2201      	movs	r2, #1
 8007358:	68bb      	ldr	r3, [r7, #8]
 800735a:	fa02 f303 	lsl.w	r3, r2, r3
 800735e:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8007360:	68fb      	ldr	r3, [r7, #12]
 8007362:	6a1a      	ldr	r2, [r3, #32]
 8007364:	697b      	ldr	r3, [r7, #20]
 8007366:	43db      	mvns	r3, r3
 8007368:	401a      	ands	r2, r3
 800736a:	68fb      	ldr	r3, [r7, #12]
 800736c:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */ 
  TIMx->CCER |= (uint32_t)(ChannelState << Channel);
 800736e:	68fb      	ldr	r3, [r7, #12]
 8007370:	6a1a      	ldr	r2, [r3, #32]
 8007372:	6879      	ldr	r1, [r7, #4]
 8007374:	68bb      	ldr	r3, [r7, #8]
 8007376:	fa01 f303 	lsl.w	r3, r1, r3
 800737a:	431a      	orrs	r2, r3
 800737c:	68fb      	ldr	r3, [r7, #12]
 800737e:	621a      	str	r2, [r3, #32]
}
 8007380:	bf00      	nop
 8007382:	371c      	adds	r7, #28
 8007384:	46bd      	mov	sp, r7
 8007386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800738a:	4770      	bx	lr

0800738c <HAL_TIMEx_MasterConfigSynchronization>:
  *         contains the selected trigger output (TRGO) and the Master/Slave 
  *         mode. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim, TIM_MasterConfigTypeDef * sMasterConfig)
{
 800738c:	b480      	push	{r7}
 800738e:	b085      	sub	sp, #20
 8007390:	af00      	add	r7, sp, #0
 8007392:	6078      	str	r0, [r7, #4]
 8007394:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));
  
  /* Check input state */
  __HAL_LOCK(htim);
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800739c:	2b01      	cmp	r3, #1
 800739e:	d101      	bne.n	80073a4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80073a0:	2302      	movs	r3, #2
 80073a2:	e03d      	b.n	8007420 <HAL_TIMEx_MasterConfigSynchronization+0x94>
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	2201      	movs	r2, #1
 80073a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

 /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	681b      	ldr	r3, [r3, #0]
 80073b0:	685b      	ldr	r3, [r3, #4]
 80073b2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	681b      	ldr	r3, [r3, #0]
 80073b8:	689b      	ldr	r3, [r3, #8]
 80073ba:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	681b      	ldr	r3, [r3, #0]
 80073c0:	4a1a      	ldr	r2, [pc, #104]	; (800742c <HAL_TIMEx_MasterConfigSynchronization+0xa0>)
 80073c2:	4293      	cmp	r3, r2
 80073c4:	d004      	beq.n	80073d0 <HAL_TIMEx_MasterConfigSynchronization+0x44>
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	681b      	ldr	r3, [r3, #0]
 80073ca:	4a19      	ldr	r2, [pc, #100]	; (8007430 <HAL_TIMEx_MasterConfigSynchronization+0xa4>)
 80073cc:	4293      	cmp	r3, r2
 80073ce:	d108      	bne.n	80073e2 <HAL_TIMEx_MasterConfigSynchronization+0x56>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));
    
    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80073d0:	68fb      	ldr	r3, [r7, #12]
 80073d2:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80073d6:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80073d8:	683b      	ldr	r3, [r7, #0]
 80073da:	685b      	ldr	r3, [r3, #4]
 80073dc:	68fa      	ldr	r2, [r7, #12]
 80073de:	4313      	orrs	r3, r2
 80073e0:	60fb      	str	r3, [r7, #12]
  }
  
  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80073e2:	68fb      	ldr	r3, [r7, #12]
 80073e4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80073e8:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80073ea:	683b      	ldr	r3, [r7, #0]
 80073ec:	681b      	ldr	r3, [r3, #0]
 80073ee:	68fa      	ldr	r2, [r7, #12]
 80073f0:	4313      	orrs	r3, r2
 80073f2:	60fb      	str	r3, [r7, #12]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 80073f4:	68bb      	ldr	r3, [r7, #8]
 80073f6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80073fa:	60bb      	str	r3, [r7, #8]
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80073fc:	683b      	ldr	r3, [r7, #0]
 80073fe:	689b      	ldr	r3, [r3, #8]
 8007400:	68ba      	ldr	r2, [r7, #8]
 8007402:	4313      	orrs	r3, r2
 8007404:	60bb      	str	r3, [r7, #8]
  
  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	681b      	ldr	r3, [r3, #0]
 800740a:	68fa      	ldr	r2, [r7, #12]
 800740c:	605a      	str	r2, [r3, #4]
  
  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	681b      	ldr	r3, [r3, #0]
 8007412:	68ba      	ldr	r2, [r7, #8]
 8007414:	609a      	str	r2, [r3, #8]

  __HAL_UNLOCK(htim);
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	2200      	movs	r2, #0
 800741a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  return HAL_OK;
 800741e:	2300      	movs	r3, #0
} 
 8007420:	4618      	mov	r0, r3
 8007422:	3714      	adds	r7, #20
 8007424:	46bd      	mov	sp, r7
 8007426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800742a:	4770      	bx	lr
 800742c:	40010000 	.word	0x40010000
 8007430:	40010400 	.word	0x40010400

08007434 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         contains the BDTR Register configuration  information for the TIM peripheral. 
  * @retval HAL status
  */ 
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim, 
                                              TIM_BreakDeadTimeConfigTypeDef * sBreakDeadTimeConfig)
{
 8007434:	b480      	push	{r7}
 8007436:	b085      	sub	sp, #20
 8007438:	af00      	add	r7, sp, #0
 800743a:	6078      	str	r0, [r7, #4]
 800743c:	6039      	str	r1, [r7, #0]
  uint32_t tmpbdtr = 0;
 800743e:	2300      	movs	r3, #0
 8007440:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
  assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
  
  /* Check input state */
  __HAL_LOCK(htim);
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007448:	2b01      	cmp	r3, #1
 800744a:	d101      	bne.n	8007450 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800744c:	2302      	movs	r3, #2
 800744e:	e06c      	b.n	800752a <HAL_TIMEx_ConfigBreakDeadTime+0xf6>
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	2201      	movs	r2, #1
 8007454:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */
  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8007458:	68fb      	ldr	r3, [r7, #12]
 800745a:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800745e:	683b      	ldr	r3, [r7, #0]
 8007460:	68db      	ldr	r3, [r3, #12]
 8007462:	4313      	orrs	r3, r2
 8007464:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8007466:	68fb      	ldr	r3, [r7, #12]
 8007468:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800746c:	683b      	ldr	r3, [r7, #0]
 800746e:	689b      	ldr	r3, [r3, #8]
 8007470:	4313      	orrs	r3, r2
 8007472:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8007474:	68fb      	ldr	r3, [r7, #12]
 8007476:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800747a:	683b      	ldr	r3, [r7, #0]
 800747c:	685b      	ldr	r3, [r3, #4]
 800747e:	4313      	orrs	r3, r2
 8007480:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8007482:	68fb      	ldr	r3, [r7, #12]
 8007484:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8007488:	683b      	ldr	r3, [r7, #0]
 800748a:	681b      	ldr	r3, [r3, #0]
 800748c:	4313      	orrs	r3, r2
 800748e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8007490:	68fb      	ldr	r3, [r7, #12]
 8007492:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007496:	683b      	ldr	r3, [r7, #0]
 8007498:	691b      	ldr	r3, [r3, #16]
 800749a:	4313      	orrs	r3, r2
 800749c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800749e:	68fb      	ldr	r3, [r7, #12]
 80074a0:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80074a4:	683b      	ldr	r3, [r7, #0]
 80074a6:	695b      	ldr	r3, [r3, #20]
 80074a8:	4313      	orrs	r3, r2
 80074aa:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80074ac:	68fb      	ldr	r3, [r7, #12]
 80074ae:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80074b2:	683b      	ldr	r3, [r7, #0]
 80074b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80074b6:	4313      	orrs	r3, r2
 80074b8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_MOE, sBreakDeadTimeConfig->AutomaticOutput);
 80074ba:	68fb      	ldr	r3, [r7, #12]
 80074bc:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 80074c0:	683b      	ldr	r3, [r7, #0]
 80074c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80074c4:	4313      	orrs	r3, r2
 80074c6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << BDTR_BKF_SHIFT));
 80074c8:	68fb      	ldr	r3, [r7, #12]
 80074ca:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 80074ce:	683b      	ldr	r3, [r7, #0]
 80074d0:	699b      	ldr	r3, [r3, #24]
 80074d2:	041b      	lsls	r3, r3, #16
 80074d4:	4313      	orrs	r3, r2
 80074d6:	60fb      	str	r3, [r7, #12]
  
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	681b      	ldr	r3, [r3, #0]
 80074dc:	4a16      	ldr	r2, [pc, #88]	; (8007538 <HAL_TIMEx_ConfigBreakDeadTime+0x104>)
 80074de:	4293      	cmp	r3, r2
 80074e0:	d004      	beq.n	80074ec <HAL_TIMEx_ConfigBreakDeadTime+0xb8>
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	681b      	ldr	r3, [r3, #0]
 80074e6:	4a15      	ldr	r2, [pc, #84]	; (800753c <HAL_TIMEx_ConfigBreakDeadTime+0x108>)
 80074e8:	4293      	cmp	r3, r2
 80074ea:	d115      	bne.n	8007518 <HAL_TIMEx_ConfigBreakDeadTime+0xe4>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
    
    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << BDTR_BK2F_SHIFT));
 80074ec:	68fb      	ldr	r3, [r7, #12]
 80074ee:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 80074f2:	683b      	ldr	r3, [r7, #0]
 80074f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074f6:	051b      	lsls	r3, r3, #20
 80074f8:	4313      	orrs	r3, r2
 80074fa:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 80074fc:	68fb      	ldr	r3, [r7, #12]
 80074fe:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8007502:	683b      	ldr	r3, [r7, #0]
 8007504:	69db      	ldr	r3, [r3, #28]
 8007506:	4313      	orrs	r3, r2
 8007508:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800750a:	68fb      	ldr	r3, [r7, #12]
 800750c:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8007510:	683b      	ldr	r3, [r7, #0]
 8007512:	6a1b      	ldr	r3, [r3, #32]
 8007514:	4313      	orrs	r3, r2
 8007516:	60fb      	str	r3, [r7, #12]
  }
  

  
  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	681b      	ldr	r3, [r3, #0]
 800751c:	68fa      	ldr	r2, [r7, #12]
 800751e:	645a      	str	r2, [r3, #68]	; 0x44
  
  __HAL_UNLOCK(htim);
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	2200      	movs	r2, #0
 8007524:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  return HAL_OK;
 8007528:	2300      	movs	r3, #0
}
 800752a:	4618      	mov	r0, r3
 800752c:	3714      	adds	r7, #20
 800752e:	46bd      	mov	sp, r7
 8007530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007534:	4770      	bx	lr
 8007536:	bf00      	nop
 8007538:	40010000 	.word	0x40010000
 800753c:	40010400 	.word	0x40010400

08007540 <HAL_TIMEx_CommutationCallback>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
__weak void HAL_TIMEx_CommutationCallback(TIM_HandleTypeDef *htim)
{
 8007540:	b480      	push	{r7}
 8007542:	b083      	sub	sp, #12
 8007544:	af00      	add	r7, sp, #0
 8007546:	6078      	str	r0, [r7, #4]
  UNUSED(htim);
 
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutationCallback could be implemented in the user file
   */
}
 8007548:	bf00      	nop
 800754a:	370c      	adds	r7, #12
 800754c:	46bd      	mov	sp, r7
 800754e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007552:	4770      	bx	lr

08007554 <HAL_TIMEx_BreakCallback>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007554:	b480      	push	{r7}
 8007556:	b083      	sub	sp, #12
 8007558:	af00      	add	r7, sp, #0
 800755a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);
 
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800755c:	bf00      	nop
 800755e:	370c      	adds	r7, #12
 8007560:	46bd      	mov	sp, r7
 8007562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007566:	4770      	bx	lr

08007568 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim, 
                                            TIM_OC_InitTypeDef* sConfig, 
                                            uint32_t Channel)
{
 8007568:	b580      	push	{r7, lr}
 800756a:	b084      	sub	sp, #16
 800756c:	af00      	add	r7, sp, #0
 800756e:	60f8      	str	r0, [r7, #12]
 8007570:	60b9      	str	r1, [r7, #8]
 8007572:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));
  
  /* Check input state */
  __HAL_LOCK(htim);
 8007574:	68fb      	ldr	r3, [r7, #12]
 8007576:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800757a:	2b01      	cmp	r3, #1
 800757c:	d101      	bne.n	8007582 <HAL_TIM_PWM_ConfigChannel+0x1a>
 800757e:	2302      	movs	r3, #2
 8007580:	e105      	b.n	800778e <HAL_TIM_PWM_ConfigChannel+0x226>
 8007582:	68fb      	ldr	r3, [r7, #12]
 8007584:	2201      	movs	r2, #1
 8007586:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  htim->State = HAL_TIM_STATE_BUSY;
 800758a:	68fb      	ldr	r3, [r7, #12]
 800758c:	2202      	movs	r2, #2
 800758e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    
  switch (Channel)
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	2b14      	cmp	r3, #20
 8007596:	f200 80f0 	bhi.w	800777a <HAL_TIM_PWM_ConfigChannel+0x212>
 800759a:	a201      	add	r2, pc, #4	; (adr r2, 80075a0 <HAL_TIM_PWM_ConfigChannel+0x38>)
 800759c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80075a0:	080075f5 	.word	0x080075f5
 80075a4:	0800777b 	.word	0x0800777b
 80075a8:	0800777b 	.word	0x0800777b
 80075ac:	0800777b 	.word	0x0800777b
 80075b0:	08007635 	.word	0x08007635
 80075b4:	0800777b 	.word	0x0800777b
 80075b8:	0800777b 	.word	0x0800777b
 80075bc:	0800777b 	.word	0x0800777b
 80075c0:	08007677 	.word	0x08007677
 80075c4:	0800777b 	.word	0x0800777b
 80075c8:	0800777b 	.word	0x0800777b
 80075cc:	0800777b 	.word	0x0800777b
 80075d0:	080076b7 	.word	0x080076b7
 80075d4:	0800777b 	.word	0x0800777b
 80075d8:	0800777b 	.word	0x0800777b
 80075dc:	0800777b 	.word	0x0800777b
 80075e0:	080076f9 	.word	0x080076f9
 80075e4:	0800777b 	.word	0x0800777b
 80075e8:	0800777b 	.word	0x0800777b
 80075ec:	0800777b 	.word	0x0800777b
 80075f0:	08007739 	.word	0x08007739
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance)); 
      
      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80075f4:	68fb      	ldr	r3, [r7, #12]
 80075f6:	681b      	ldr	r3, [r3, #0]
 80075f8:	68b9      	ldr	r1, [r7, #8]
 80075fa:	4618      	mov	r0, r3
 80075fc:	f7ff fc2e 	bl	8006e5c <TIM_OC1_SetConfig>
      
      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8007600:	68fb      	ldr	r3, [r7, #12]
 8007602:	681b      	ldr	r3, [r3, #0]
 8007604:	68fa      	ldr	r2, [r7, #12]
 8007606:	6812      	ldr	r2, [r2, #0]
 8007608:	6992      	ldr	r2, [r2, #24]
 800760a:	f042 0208 	orr.w	r2, r2, #8
 800760e:	619a      	str	r2, [r3, #24]
      
      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8007610:	68fb      	ldr	r3, [r7, #12]
 8007612:	681b      	ldr	r3, [r3, #0]
 8007614:	68fa      	ldr	r2, [r7, #12]
 8007616:	6812      	ldr	r2, [r2, #0]
 8007618:	6992      	ldr	r2, [r2, #24]
 800761a:	f022 0204 	bic.w	r2, r2, #4
 800761e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8007620:	68fb      	ldr	r3, [r7, #12]
 8007622:	681b      	ldr	r3, [r3, #0]
 8007624:	68fa      	ldr	r2, [r7, #12]
 8007626:	6812      	ldr	r2, [r2, #0]
 8007628:	6991      	ldr	r1, [r2, #24]
 800762a:	68ba      	ldr	r2, [r7, #8]
 800762c:	6912      	ldr	r2, [r2, #16]
 800762e:	430a      	orrs	r2, r1
 8007630:	619a      	str	r2, [r3, #24]
    }
    break;
 8007632:	e0a3      	b.n	800777c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance)); 
      
      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8007634:	68fb      	ldr	r3, [r7, #12]
 8007636:	681b      	ldr	r3, [r3, #0]
 8007638:	68b9      	ldr	r1, [r7, #8]
 800763a:	4618      	mov	r0, r3
 800763c:	f7ff fc84 	bl	8006f48 <TIM_OC2_SetConfig>
      
      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8007640:	68fb      	ldr	r3, [r7, #12]
 8007642:	681b      	ldr	r3, [r3, #0]
 8007644:	68fa      	ldr	r2, [r7, #12]
 8007646:	6812      	ldr	r2, [r2, #0]
 8007648:	6992      	ldr	r2, [r2, #24]
 800764a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800764e:	619a      	str	r2, [r3, #24]
      
      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8007650:	68fb      	ldr	r3, [r7, #12]
 8007652:	681b      	ldr	r3, [r3, #0]
 8007654:	68fa      	ldr	r2, [r7, #12]
 8007656:	6812      	ldr	r2, [r2, #0]
 8007658:	6992      	ldr	r2, [r2, #24]
 800765a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800765e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8;
 8007660:	68fb      	ldr	r3, [r7, #12]
 8007662:	681b      	ldr	r3, [r3, #0]
 8007664:	68fa      	ldr	r2, [r7, #12]
 8007666:	6812      	ldr	r2, [r2, #0]
 8007668:	6991      	ldr	r1, [r2, #24]
 800766a:	68ba      	ldr	r2, [r7, #8]
 800766c:	6912      	ldr	r2, [r2, #16]
 800766e:	0212      	lsls	r2, r2, #8
 8007670:	430a      	orrs	r2, r1
 8007672:	619a      	str	r2, [r3, #24]
    }
    break;
 8007674:	e082      	b.n	800777c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance)); 
      
      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8007676:	68fb      	ldr	r3, [r7, #12]
 8007678:	681b      	ldr	r3, [r3, #0]
 800767a:	68b9      	ldr	r1, [r7, #8]
 800767c:	4618      	mov	r0, r3
 800767e:	f7ff fcdd 	bl	800703c <TIM_OC3_SetConfig>
      
      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8007682:	68fb      	ldr	r3, [r7, #12]
 8007684:	681b      	ldr	r3, [r3, #0]
 8007686:	68fa      	ldr	r2, [r7, #12]
 8007688:	6812      	ldr	r2, [r2, #0]
 800768a:	69d2      	ldr	r2, [r2, #28]
 800768c:	f042 0208 	orr.w	r2, r2, #8
 8007690:	61da      	str	r2, [r3, #28]
      
     /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8007692:	68fb      	ldr	r3, [r7, #12]
 8007694:	681b      	ldr	r3, [r3, #0]
 8007696:	68fa      	ldr	r2, [r7, #12]
 8007698:	6812      	ldr	r2, [r2, #0]
 800769a:	69d2      	ldr	r2, [r2, #28]
 800769c:	f022 0204 	bic.w	r2, r2, #4
 80076a0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;  
 80076a2:	68fb      	ldr	r3, [r7, #12]
 80076a4:	681b      	ldr	r3, [r3, #0]
 80076a6:	68fa      	ldr	r2, [r7, #12]
 80076a8:	6812      	ldr	r2, [r2, #0]
 80076aa:	69d1      	ldr	r1, [r2, #28]
 80076ac:	68ba      	ldr	r2, [r7, #8]
 80076ae:	6912      	ldr	r2, [r2, #16]
 80076b0:	430a      	orrs	r2, r1
 80076b2:	61da      	str	r2, [r3, #28]
    }
    break;
 80076b4:	e062      	b.n	800777c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance)); 
      
      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80076b6:	68fb      	ldr	r3, [r7, #12]
 80076b8:	681b      	ldr	r3, [r3, #0]
 80076ba:	68b9      	ldr	r1, [r7, #8]
 80076bc:	4618      	mov	r0, r3
 80076be:	f7ff fd37 	bl	8007130 <TIM_OC4_SetConfig>
      
      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80076c2:	68fb      	ldr	r3, [r7, #12]
 80076c4:	681b      	ldr	r3, [r3, #0]
 80076c6:	68fa      	ldr	r2, [r7, #12]
 80076c8:	6812      	ldr	r2, [r2, #0]
 80076ca:	69d2      	ldr	r2, [r2, #28]
 80076cc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80076d0:	61da      	str	r2, [r3, #28]
      
     /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80076d2:	68fb      	ldr	r3, [r7, #12]
 80076d4:	681b      	ldr	r3, [r3, #0]
 80076d6:	68fa      	ldr	r2, [r7, #12]
 80076d8:	6812      	ldr	r2, [r2, #0]
 80076da:	69d2      	ldr	r2, [r2, #28]
 80076dc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80076e0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8;  
 80076e2:	68fb      	ldr	r3, [r7, #12]
 80076e4:	681b      	ldr	r3, [r3, #0]
 80076e6:	68fa      	ldr	r2, [r7, #12]
 80076e8:	6812      	ldr	r2, [r2, #0]
 80076ea:	69d1      	ldr	r1, [r2, #28]
 80076ec:	68ba      	ldr	r2, [r7, #8]
 80076ee:	6912      	ldr	r2, [r2, #16]
 80076f0:	0212      	lsls	r2, r2, #8
 80076f2:	430a      	orrs	r2, r1
 80076f4:	61da      	str	r2, [r3, #28]
    }
    break;
 80076f6:	e041      	b.n	800777c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
       /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance)); 
      
     /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80076f8:	68fb      	ldr	r3, [r7, #12]
 80076fa:	681b      	ldr	r3, [r3, #0]
 80076fc:	68b9      	ldr	r1, [r7, #8]
 80076fe:	4618      	mov	r0, r3
 8007700:	f000 f84a 	bl	8007798 <TIM_OC5_SetConfig>
      
      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8007704:	68fb      	ldr	r3, [r7, #12]
 8007706:	681b      	ldr	r3, [r3, #0]
 8007708:	68fa      	ldr	r2, [r7, #12]
 800770a:	6812      	ldr	r2, [r2, #0]
 800770c:	6d52      	ldr	r2, [r2, #84]	; 0x54
 800770e:	f042 0208 	orr.w	r2, r2, #8
 8007712:	655a      	str	r2, [r3, #84]	; 0x54
      
     /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8007714:	68fb      	ldr	r3, [r7, #12]
 8007716:	681b      	ldr	r3, [r3, #0]
 8007718:	68fa      	ldr	r2, [r7, #12]
 800771a:	6812      	ldr	r2, [r2, #0]
 800771c:	6d52      	ldr	r2, [r2, #84]	; 0x54
 800771e:	f022 0204 	bic.w	r2, r2, #4
 8007722:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;  
 8007724:	68fb      	ldr	r3, [r7, #12]
 8007726:	681b      	ldr	r3, [r3, #0]
 8007728:	68fa      	ldr	r2, [r7, #12]
 800772a:	6812      	ldr	r2, [r2, #0]
 800772c:	6d51      	ldr	r1, [r2, #84]	; 0x54
 800772e:	68ba      	ldr	r2, [r7, #8]
 8007730:	6912      	ldr	r2, [r2, #16]
 8007732:	430a      	orrs	r2, r1
 8007734:	655a      	str	r2, [r3, #84]	; 0x54
    }
    break;
 8007736:	e021      	b.n	800777c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
       /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance)); 
      
     /* Configure the Channel 5 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8007738:	68fb      	ldr	r3, [r7, #12]
 800773a:	681b      	ldr	r3, [r3, #0]
 800773c:	68b9      	ldr	r1, [r7, #8]
 800773e:	4618      	mov	r0, r3
 8007740:	f000 f882 	bl	8007848 <TIM_OC6_SetConfig>
      
      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8007744:	68fb      	ldr	r3, [r7, #12]
 8007746:	681b      	ldr	r3, [r3, #0]
 8007748:	68fa      	ldr	r2, [r7, #12]
 800774a:	6812      	ldr	r2, [r2, #0]
 800774c:	6d52      	ldr	r2, [r2, #84]	; 0x54
 800774e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007752:	655a      	str	r2, [r3, #84]	; 0x54
      
     /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8007754:	68fb      	ldr	r3, [r7, #12]
 8007756:	681b      	ldr	r3, [r3, #0]
 8007758:	68fa      	ldr	r2, [r7, #12]
 800775a:	6812      	ldr	r2, [r2, #0]
 800775c:	6d52      	ldr	r2, [r2, #84]	; 0x54
 800775e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007762:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8;  
 8007764:	68fb      	ldr	r3, [r7, #12]
 8007766:	681b      	ldr	r3, [r3, #0]
 8007768:	68fa      	ldr	r2, [r7, #12]
 800776a:	6812      	ldr	r2, [r2, #0]
 800776c:	6d51      	ldr	r1, [r2, #84]	; 0x54
 800776e:	68ba      	ldr	r2, [r7, #8]
 8007770:	6912      	ldr	r2, [r2, #16]
 8007772:	0212      	lsls	r2, r2, #8
 8007774:	430a      	orrs	r2, r1
 8007776:	655a      	str	r2, [r3, #84]	; 0x54
    }
    break;
 8007778:	e000      	b.n	800777c <HAL_TIM_PWM_ConfigChannel+0x214>
    
    default:
    break;    
 800777a:	bf00      	nop
  }
  
  htim->State = HAL_TIM_STATE_READY;
 800777c:	68fb      	ldr	r3, [r7, #12]
 800777e:	2201      	movs	r2, #1
 8007780:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    
  __HAL_UNLOCK(htim);
 8007784:	68fb      	ldr	r3, [r7, #12]
 8007786:	2200      	movs	r2, #0
 8007788:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  return HAL_OK;
 800778c:	2300      	movs	r3, #0
}
 800778e:	4618      	mov	r0, r3
 8007790:	3710      	adds	r7, #16
 8007792:	46bd      	mov	sp, r7
 8007794:	bd80      	pop	{r7, pc}
 8007796:	bf00      	nop

08007798 <TIM_OC5_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007798:	b480      	push	{r7}
 800779a:	b087      	sub	sp, #28
 800779c:	af00      	add	r7, sp, #0
 800779e:	6078      	str	r0, [r7, #4]
 80077a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx = 0;
 80077a2:	2300      	movs	r3, #0
 80077a4:	613b      	str	r3, [r7, #16]
  uint32_t tmpccer = 0;
 80077a6:	2300      	movs	r3, #0
 80077a8:	60fb      	str	r3, [r7, #12]
  uint32_t tmpcr2 = 0; 
 80077aa:	2300      	movs	r3, #0
 80077ac:	617b      	str	r3, [r7, #20]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	6a1b      	ldr	r3, [r3, #32]
 80077b2:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	621a      	str	r2, [r3, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	6a1b      	ldr	r3, [r3, #32]
 80077be:	60fb      	str	r3, [r7, #12]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2; 
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	685b      	ldr	r3, [r3, #4]
 80077c4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80077ca:	613b      	str	r3, [r7, #16]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80077cc:	693a      	ldr	r2, [r7, #16]
 80077ce:	4b1b      	ldr	r3, [pc, #108]	; (800783c <TIM_OC5_SetConfig+0xa4>)
 80077d0:	4013      	ands	r3, r2
 80077d2:	613b      	str	r3, [r7, #16]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80077d4:	683b      	ldr	r3, [r7, #0]
 80077d6:	681b      	ldr	r3, [r3, #0]
 80077d8:	693a      	ldr	r2, [r7, #16]
 80077da:	4313      	orrs	r3, r2
 80077dc:	613b      	str	r3, [r7, #16]
  
  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80077de:	68fb      	ldr	r3, [r7, #12]
 80077e0:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80077e4:	60fb      	str	r3, [r7, #12]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16);
 80077e6:	683b      	ldr	r3, [r7, #0]
 80077e8:	689b      	ldr	r3, [r3, #8]
 80077ea:	041b      	lsls	r3, r3, #16
 80077ec:	68fa      	ldr	r2, [r7, #12]
 80077ee:	4313      	orrs	r3, r2
 80077f0:	60fb      	str	r3, [r7, #12]

  if(IS_TIM_BREAK_INSTANCE(TIMx))
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	4a12      	ldr	r2, [pc, #72]	; (8007840 <TIM_OC5_SetConfig+0xa8>)
 80077f6:	4293      	cmp	r3, r2
 80077f8:	d003      	beq.n	8007802 <TIM_OC5_SetConfig+0x6a>
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	4a11      	ldr	r2, [pc, #68]	; (8007844 <TIM_OC5_SetConfig+0xac>)
 80077fe:	4293      	cmp	r3, r2
 8007800:	d109      	bne.n	8007816 <TIM_OC5_SetConfig+0x7e>
  {   
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8007802:	697b      	ldr	r3, [r7, #20]
 8007804:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007808:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8);
 800780a:	683b      	ldr	r3, [r7, #0]
 800780c:	695b      	ldr	r3, [r3, #20]
 800780e:	021b      	lsls	r3, r3, #8
 8007810:	697a      	ldr	r2, [r7, #20]
 8007812:	4313      	orrs	r3, r2
 8007814:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	697a      	ldr	r2, [r7, #20]
 800781a:	605a      	str	r2, [r3, #4]
  
  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	693a      	ldr	r2, [r7, #16]
 8007820:	655a      	str	r2, [r3, #84]	; 0x54
  
  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8007822:	683b      	ldr	r3, [r7, #0]
 8007824:	685a      	ldr	r2, [r3, #4]
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	659a      	str	r2, [r3, #88]	; 0x58
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;  
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	68fa      	ldr	r2, [r7, #12]
 800782e:	621a      	str	r2, [r3, #32]
}
 8007830:	bf00      	nop
 8007832:	371c      	adds	r7, #28
 8007834:	46bd      	mov	sp, r7
 8007836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800783a:	4770      	bx	lr
 800783c:	fffeff8f 	.word	0xfffeff8f
 8007840:	40010000 	.word	0x40010000
 8007844:	40010400 	.word	0x40010400

08007848 <TIM_OC6_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007848:	b480      	push	{r7}
 800784a:	b087      	sub	sp, #28
 800784c:	af00      	add	r7, sp, #0
 800784e:	6078      	str	r0, [r7, #4]
 8007850:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx = 0;
 8007852:	2300      	movs	r3, #0
 8007854:	613b      	str	r3, [r7, #16]
  uint32_t tmpccer = 0;
 8007856:	2300      	movs	r3, #0
 8007858:	60fb      	str	r3, [r7, #12]
  uint32_t tmpcr2 = 0; 
 800785a:	2300      	movs	r3, #0
 800785c:	617b      	str	r3, [r7, #20]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	6a1b      	ldr	r3, [r3, #32]
 8007862:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	621a      	str	r2, [r3, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	6a1b      	ldr	r3, [r3, #32]
 800786e:	60fb      	str	r3, [r7, #12]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2; 
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	685b      	ldr	r3, [r3, #4]
 8007874:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800787a:	613b      	str	r3, [r7, #16]
    
  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800787c:	693a      	ldr	r2, [r7, #16]
 800787e:	4b1c      	ldr	r3, [pc, #112]	; (80078f0 <TIM_OC6_SetConfig+0xa8>)
 8007880:	4013      	ands	r3, r2
 8007882:	613b      	str	r3, [r7, #16]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8);
 8007884:	683b      	ldr	r3, [r7, #0]
 8007886:	681b      	ldr	r3, [r3, #0]
 8007888:	021b      	lsls	r3, r3, #8
 800788a:	693a      	ldr	r2, [r7, #16]
 800788c:	4313      	orrs	r3, r2
 800788e:	613b      	str	r3, [r7, #16]
  
  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8007890:	68fb      	ldr	r3, [r7, #12]
 8007892:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8007896:	60fb      	str	r3, [r7, #12]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20);
 8007898:	683b      	ldr	r3, [r7, #0]
 800789a:	689b      	ldr	r3, [r3, #8]
 800789c:	051b      	lsls	r3, r3, #20
 800789e:	68fa      	ldr	r2, [r7, #12]
 80078a0:	4313      	orrs	r3, r2
 80078a2:	60fb      	str	r3, [r7, #12]

  if(IS_TIM_BREAK_INSTANCE(TIMx))
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	4a13      	ldr	r2, [pc, #76]	; (80078f4 <TIM_OC6_SetConfig+0xac>)
 80078a8:	4293      	cmp	r3, r2
 80078aa:	d003      	beq.n	80078b4 <TIM_OC6_SetConfig+0x6c>
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	4a12      	ldr	r2, [pc, #72]	; (80078f8 <TIM_OC6_SetConfig+0xb0>)
 80078b0:	4293      	cmp	r3, r2
 80078b2:	d109      	bne.n	80078c8 <TIM_OC6_SetConfig+0x80>
  {   
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80078b4:	697b      	ldr	r3, [r7, #20]
 80078b6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80078ba:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10);
 80078bc:	683b      	ldr	r3, [r7, #0]
 80078be:	695b      	ldr	r3, [r3, #20]
 80078c0:	029b      	lsls	r3, r3, #10
 80078c2:	697a      	ldr	r2, [r7, #20]
 80078c4:	4313      	orrs	r3, r2
 80078c6:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	697a      	ldr	r2, [r7, #20]
 80078cc:	605a      	str	r2, [r3, #4]
  
  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	693a      	ldr	r2, [r7, #16]
 80078d2:	655a      	str	r2, [r3, #84]	; 0x54
  
  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80078d4:	683b      	ldr	r3, [r7, #0]
 80078d6:	685a      	ldr	r2, [r3, #4]
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	65da      	str	r2, [r3, #92]	; 0x5c
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;  
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	68fa      	ldr	r2, [r7, #12]
 80078e0:	621a      	str	r2, [r3, #32]
}
 80078e2:	bf00      	nop
 80078e4:	371c      	adds	r7, #28
 80078e6:	46bd      	mov	sp, r7
 80078e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078ec:	4770      	bx	lr
 80078ee:	bf00      	nop
 80078f0:	feff8fff 	.word	0xfeff8fff
 80078f4:	40010000 	.word	0x40010000
 80078f8:	40010400 	.word	0x40010400

080078fc <HAL_UART_Init>:
  *         parameters in the UART_InitTypeDef and creates the associated handle .
  * @param huart uart handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80078fc:	b580      	push	{r7, lr}
 80078fe:	b082      	sub	sp, #8
 8007900:	af00      	add	r7, sp, #0
 8007902:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if(huart == NULL)
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	2b00      	cmp	r3, #0
 8007908:	d101      	bne.n	800790e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800790a:	2301      	movs	r3, #1
 800790c:	e043      	b.n	8007996 <HAL_UART_Init+0x9a>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if(huart->gState == HAL_UART_STATE_RESET)
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	f893 3069 	ldrb.w	r3, [r3, #105]	; 0x69
 8007914:	b2db      	uxtb	r3, r3
 8007916:	2b00      	cmp	r3, #0
 8007918:	d106      	bne.n	8007928 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	2200      	movs	r2, #0
 800791e:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68

    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007922:	6878      	ldr	r0, [r7, #4]
 8007924:	f002 f9d2 	bl	8009ccc <HAL_UART_MspInit>
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	2224      	movs	r2, #36	; 0x24
 800792c:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	681b      	ldr	r3, [r3, #0]
 8007934:	687a      	ldr	r2, [r7, #4]
 8007936:	6812      	ldr	r2, [r2, #0]
 8007938:	6812      	ldr	r2, [r2, #0]
 800793a:	f022 0201 	bic.w	r2, r2, #1
 800793e:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8007940:	6878      	ldr	r0, [r7, #4]
 8007942:	f000 f877 	bl	8007a34 <UART_SetConfig>
 8007946:	4603      	mov	r3, r0
 8007948:	2b01      	cmp	r3, #1
 800794a:	d101      	bne.n	8007950 <HAL_UART_Init+0x54>
  {
    return HAL_ERROR;
 800794c:	2301      	movs	r3, #1
 800794e:	e022      	b.n	8007996 <HAL_UART_Init+0x9a>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007954:	2b00      	cmp	r3, #0
 8007956:	d002      	beq.n	800795e <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 8007958:	6878      	ldr	r0, [r7, #4]
 800795a:	f000 fad9 	bl	8007f10 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	681b      	ldr	r3, [r3, #0]
 8007962:	687a      	ldr	r2, [r7, #4]
 8007964:	6812      	ldr	r2, [r2, #0]
 8007966:	6852      	ldr	r2, [r2, #4]
 8007968:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800796c:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	681b      	ldr	r3, [r3, #0]
 8007972:	687a      	ldr	r2, [r7, #4]
 8007974:	6812      	ldr	r2, [r2, #0]
 8007976:	6892      	ldr	r2, [r2, #8]
 8007978:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800797c:	609a      	str	r2, [r3, #8]

  /* Enable the Peripheral */
  __HAL_UART_ENABLE(huart);
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	681b      	ldr	r3, [r3, #0]
 8007982:	687a      	ldr	r2, [r7, #4]
 8007984:	6812      	ldr	r2, [r2, #0]
 8007986:	6812      	ldr	r2, [r2, #0]
 8007988:	f042 0201 	orr.w	r2, r2, #1
 800798c:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800798e:	6878      	ldr	r0, [r7, #4]
 8007990:	f000 fb60 	bl	8008054 <UART_CheckIdleState>
 8007994:	4603      	mov	r3, r0
}
 8007996:	4618      	mov	r0, r3
 8007998:	3708      	adds	r7, #8
 800799a:	46bd      	mov	sp, r7
 800799c:	bd80      	pop	{r7, pc}

0800799e <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 800799e:	b580      	push	{r7, lr}
 80079a0:	b084      	sub	sp, #16
 80079a2:	af00      	add	r7, sp, #0
 80079a4:	60f8      	str	r0, [r7, #12]
 80079a6:	60b9      	str	r1, [r7, #8]
 80079a8:	603b      	str	r3, [r7, #0]
 80079aa:	4613      	mov	r3, r2
 80079ac:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80079ae:	e02c      	b.n	8007a0a <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
 80079b0:	69bb      	ldr	r3, [r7, #24]
 80079b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80079b6:	d028      	beq.n	8007a0a <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if((Timeout == 0U)||((HAL_GetTick()-Tickstart) >=  Timeout))
 80079b8:	69bb      	ldr	r3, [r7, #24]
 80079ba:	2b00      	cmp	r3, #0
 80079bc:	d007      	beq.n	80079ce <UART_WaitOnFlagUntilTimeout+0x30>
 80079be:	f7fb fb0d 	bl	8002fdc <HAL_GetTick>
 80079c2:	4602      	mov	r2, r0
 80079c4:	683b      	ldr	r3, [r7, #0]
 80079c6:	1ad2      	subs	r2, r2, r3
 80079c8:	69bb      	ldr	r3, [r7, #24]
 80079ca:	429a      	cmp	r2, r3
 80079cc:	d31d      	bcc.n	8007a0a <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80079ce:	68fb      	ldr	r3, [r7, #12]
 80079d0:	681b      	ldr	r3, [r3, #0]
 80079d2:	68fa      	ldr	r2, [r7, #12]
 80079d4:	6812      	ldr	r2, [r2, #0]
 80079d6:	6812      	ldr	r2, [r2, #0]
 80079d8:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80079dc:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80079de:	68fb      	ldr	r3, [r7, #12]
 80079e0:	681b      	ldr	r3, [r3, #0]
 80079e2:	68fa      	ldr	r2, [r7, #12]
 80079e4:	6812      	ldr	r2, [r2, #0]
 80079e6:	6892      	ldr	r2, [r2, #8]
 80079e8:	f022 0201 	bic.w	r2, r2, #1
 80079ec:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 80079ee:	68fb      	ldr	r3, [r7, #12]
 80079f0:	2220      	movs	r2, #32
 80079f2:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
        huart->RxState = HAL_UART_STATE_READY;
 80079f6:	68fb      	ldr	r3, [r7, #12]
 80079f8:	2220      	movs	r2, #32
 80079fa:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80079fe:	68fb      	ldr	r3, [r7, #12]
 8007a00:	2200      	movs	r2, #0
 8007a02:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
        return HAL_TIMEOUT;
 8007a06:	2303      	movs	r3, #3
 8007a08:	e00f      	b.n	8007a2a <UART_WaitOnFlagUntilTimeout+0x8c>
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007a0a:	68fb      	ldr	r3, [r7, #12]
 8007a0c:	681b      	ldr	r3, [r3, #0]
 8007a0e:	69da      	ldr	r2, [r3, #28]
 8007a10:	68bb      	ldr	r3, [r7, #8]
 8007a12:	401a      	ands	r2, r3
 8007a14:	68bb      	ldr	r3, [r7, #8]
 8007a16:	429a      	cmp	r2, r3
 8007a18:	bf0c      	ite	eq
 8007a1a:	2301      	moveq	r3, #1
 8007a1c:	2300      	movne	r3, #0
 8007a1e:	b2db      	uxtb	r3, r3
 8007a20:	461a      	mov	r2, r3
 8007a22:	79fb      	ldrb	r3, [r7, #7]
 8007a24:	429a      	cmp	r2, r3
 8007a26:	d0c3      	beq.n	80079b0 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8007a28:	2300      	movs	r3, #0
}
 8007a2a:	4618      	mov	r0, r3
 8007a2c:	3710      	adds	r7, #16
 8007a2e:	46bd      	mov	sp, r7
 8007a30:	bd80      	pop	{r7, pc}
	...

08007a34 <UART_SetConfig>:
  * @brief Configure the UART peripheral
  * @param huart uart handle
  * @retval None
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007a34:	b590      	push	{r4, r7, lr}
 8007a36:	b087      	sub	sp, #28
 8007a38:	af00      	add	r7, sp, #0
 8007a3a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg                     = 0x00000000U;
 8007a3c:	2300      	movs	r3, #0
 8007a3e:	60fb      	str	r3, [r7, #12]
  UART_ClockSourceTypeDef clocksource = UART_CLOCKSOURCE_UNDEFINED;
 8007a40:	2310      	movs	r3, #16
 8007a42:	75fb      	strb	r3, [r7, #23]
  uint16_t brrtemp                    = 0x0000U;
 8007a44:	2300      	movs	r3, #0
 8007a46:	817b      	strh	r3, [r7, #10]
  uint16_t usartdiv                   = 0x0000U;
 8007a48:	2300      	movs	r3, #0
 8007a4a:	82bb      	strh	r3, [r7, #20]
  HAL_StatusTypeDef ret               = HAL_OK;
 8007a4c:	2300      	movs	r3, #0
 8007a4e:	74fb      	strb	r3, [r7, #19]
   *  the UART Word Length, Parity, Mode and oversampling:
   *  set the M bits according to huart->Init.WordLength value
   *  set PCE and PS bits according to huart->Init.Parity value
   *  set TE and RE bits according to huart->Init.Mode value
   *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	689a      	ldr	r2, [r3, #8]
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	691b      	ldr	r3, [r3, #16]
 8007a58:	431a      	orrs	r2, r3
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	695b      	ldr	r3, [r3, #20]
 8007a5e:	431a      	orrs	r2, r3
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	69db      	ldr	r3, [r3, #28]
 8007a64:	4313      	orrs	r3, r2
 8007a66:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	681a      	ldr	r2, [r3, #0]
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	681b      	ldr	r3, [r3, #0]
 8007a70:	6819      	ldr	r1, [r3, #0]
 8007a72:	4baa      	ldr	r3, [pc, #680]	; (8007d1c <UART_SetConfig+0x2e8>)
 8007a74:	400b      	ands	r3, r1
 8007a76:	68f9      	ldr	r1, [r7, #12]
 8007a78:	430b      	orrs	r3, r1
 8007a7a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
   * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	681b      	ldr	r3, [r3, #0]
 8007a80:	687a      	ldr	r2, [r7, #4]
 8007a82:	6812      	ldr	r2, [r2, #0]
 8007a84:	6852      	ldr	r2, [r2, #4]
 8007a86:	f422 5140 	bic.w	r1, r2, #12288	; 0x3000
 8007a8a:	687a      	ldr	r2, [r7, #4]
 8007a8c:	68d2      	ldr	r2, [r2, #12]
 8007a8e:	430a      	orrs	r2, r1
 8007a90:	605a      	str	r2, [r3, #4]
  /* Configure
   * - UART HardWare Flow Control: set CTSE and RTSE bits according
   *   to huart->Init.HwFlowCtl value
   * - one-bit sampling method versus three samples' majority rule according
   *   to huart->Init.OneBitSampling */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl | huart->Init.OneBitSampling ;
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	699a      	ldr	r2, [r3, #24]
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	6a1b      	ldr	r3, [r3, #32]
 8007a9a:	4313      	orrs	r3, r2
 8007a9c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT), tmpreg);
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	681b      	ldr	r3, [r3, #0]
 8007aa2:	687a      	ldr	r2, [r7, #4]
 8007aa4:	6812      	ldr	r2, [r2, #0]
 8007aa6:	6892      	ldr	r2, [r2, #8]
 8007aa8:	f422 6130 	bic.w	r1, r2, #2816	; 0xb00
 8007aac:	68fa      	ldr	r2, [r7, #12]
 8007aae:	430a      	orrs	r2, r1
 8007ab0:	609a      	str	r2, [r3, #8]

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	681b      	ldr	r3, [r3, #0]
 8007ab6:	4a9a      	ldr	r2, [pc, #616]	; (8007d20 <UART_SetConfig+0x2ec>)
 8007ab8:	4293      	cmp	r3, r2
 8007aba:	d11f      	bne.n	8007afc <UART_SetConfig+0xc8>
 8007abc:	4b99      	ldr	r3, [pc, #612]	; (8007d24 <UART_SetConfig+0x2f0>)
 8007abe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007ac2:	f003 0303 	and.w	r3, r3, #3
 8007ac6:	2b03      	cmp	r3, #3
 8007ac8:	f200 813e 	bhi.w	8007d48 <UART_SetConfig+0x314>
 8007acc:	a201      	add	r2, pc, #4	; (adr r2, 8007ad4 <UART_SetConfig+0xa0>)
 8007ace:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007ad2:	bf00      	nop
 8007ad4:	08007ae5 	.word	0x08007ae5
 8007ad8:	08007af1 	.word	0x08007af1
 8007adc:	08007aeb 	.word	0x08007aeb
 8007ae0:	08007af7 	.word	0x08007af7
 8007ae4:	2301      	movs	r3, #1
 8007ae6:	75fb      	strb	r3, [r7, #23]
 8007ae8:	e12e      	b.n	8007d48 <UART_SetConfig+0x314>
 8007aea:	2302      	movs	r3, #2
 8007aec:	75fb      	strb	r3, [r7, #23]
 8007aee:	e12b      	b.n	8007d48 <UART_SetConfig+0x314>
 8007af0:	2304      	movs	r3, #4
 8007af2:	75fb      	strb	r3, [r7, #23]
 8007af4:	e128      	b.n	8007d48 <UART_SetConfig+0x314>
 8007af6:	2308      	movs	r3, #8
 8007af8:	75fb      	strb	r3, [r7, #23]
 8007afa:	e125      	b.n	8007d48 <UART_SetConfig+0x314>
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	681b      	ldr	r3, [r3, #0]
 8007b00:	4a89      	ldr	r2, [pc, #548]	; (8007d28 <UART_SetConfig+0x2f4>)
 8007b02:	4293      	cmp	r3, r2
 8007b04:	d130      	bne.n	8007b68 <UART_SetConfig+0x134>
 8007b06:	4b87      	ldr	r3, [pc, #540]	; (8007d24 <UART_SetConfig+0x2f0>)
 8007b08:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007b0c:	f003 030c 	and.w	r3, r3, #12
 8007b10:	2b0c      	cmp	r3, #12
 8007b12:	f200 8119 	bhi.w	8007d48 <UART_SetConfig+0x314>
 8007b16:	a201      	add	r2, pc, #4	; (adr r2, 8007b1c <UART_SetConfig+0xe8>)
 8007b18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007b1c:	08007b51 	.word	0x08007b51
 8007b20:	08007d49 	.word	0x08007d49
 8007b24:	08007d49 	.word	0x08007d49
 8007b28:	08007d49 	.word	0x08007d49
 8007b2c:	08007b5d 	.word	0x08007b5d
 8007b30:	08007d49 	.word	0x08007d49
 8007b34:	08007d49 	.word	0x08007d49
 8007b38:	08007d49 	.word	0x08007d49
 8007b3c:	08007b57 	.word	0x08007b57
 8007b40:	08007d49 	.word	0x08007d49
 8007b44:	08007d49 	.word	0x08007d49
 8007b48:	08007d49 	.word	0x08007d49
 8007b4c:	08007b63 	.word	0x08007b63
 8007b50:	2300      	movs	r3, #0
 8007b52:	75fb      	strb	r3, [r7, #23]
 8007b54:	e0f8      	b.n	8007d48 <UART_SetConfig+0x314>
 8007b56:	2302      	movs	r3, #2
 8007b58:	75fb      	strb	r3, [r7, #23]
 8007b5a:	e0f5      	b.n	8007d48 <UART_SetConfig+0x314>
 8007b5c:	2304      	movs	r3, #4
 8007b5e:	75fb      	strb	r3, [r7, #23]
 8007b60:	e0f2      	b.n	8007d48 <UART_SetConfig+0x314>
 8007b62:	2308      	movs	r3, #8
 8007b64:	75fb      	strb	r3, [r7, #23]
 8007b66:	e0ef      	b.n	8007d48 <UART_SetConfig+0x314>
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	681b      	ldr	r3, [r3, #0]
 8007b6c:	4a6f      	ldr	r2, [pc, #444]	; (8007d2c <UART_SetConfig+0x2f8>)
 8007b6e:	4293      	cmp	r3, r2
 8007b70:	d11c      	bne.n	8007bac <UART_SetConfig+0x178>
 8007b72:	4b6c      	ldr	r3, [pc, #432]	; (8007d24 <UART_SetConfig+0x2f0>)
 8007b74:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007b78:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8007b7c:	2b10      	cmp	r3, #16
 8007b7e:	d00f      	beq.n	8007ba0 <UART_SetConfig+0x16c>
 8007b80:	2b10      	cmp	r3, #16
 8007b82:	d802      	bhi.n	8007b8a <UART_SetConfig+0x156>
 8007b84:	2b00      	cmp	r3, #0
 8007b86:	d005      	beq.n	8007b94 <UART_SetConfig+0x160>
 8007b88:	e0de      	b.n	8007d48 <UART_SetConfig+0x314>
 8007b8a:	2b20      	cmp	r3, #32
 8007b8c:	d005      	beq.n	8007b9a <UART_SetConfig+0x166>
 8007b8e:	2b30      	cmp	r3, #48	; 0x30
 8007b90:	d009      	beq.n	8007ba6 <UART_SetConfig+0x172>
 8007b92:	e0d9      	b.n	8007d48 <UART_SetConfig+0x314>
 8007b94:	2300      	movs	r3, #0
 8007b96:	75fb      	strb	r3, [r7, #23]
 8007b98:	e0d6      	b.n	8007d48 <UART_SetConfig+0x314>
 8007b9a:	2302      	movs	r3, #2
 8007b9c:	75fb      	strb	r3, [r7, #23]
 8007b9e:	e0d3      	b.n	8007d48 <UART_SetConfig+0x314>
 8007ba0:	2304      	movs	r3, #4
 8007ba2:	75fb      	strb	r3, [r7, #23]
 8007ba4:	e0d0      	b.n	8007d48 <UART_SetConfig+0x314>
 8007ba6:	2308      	movs	r3, #8
 8007ba8:	75fb      	strb	r3, [r7, #23]
 8007baa:	e0cd      	b.n	8007d48 <UART_SetConfig+0x314>
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	681b      	ldr	r3, [r3, #0]
 8007bb0:	4a5f      	ldr	r2, [pc, #380]	; (8007d30 <UART_SetConfig+0x2fc>)
 8007bb2:	4293      	cmp	r3, r2
 8007bb4:	d11c      	bne.n	8007bf0 <UART_SetConfig+0x1bc>
 8007bb6:	4b5b      	ldr	r3, [pc, #364]	; (8007d24 <UART_SetConfig+0x2f0>)
 8007bb8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007bbc:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8007bc0:	2b40      	cmp	r3, #64	; 0x40
 8007bc2:	d00f      	beq.n	8007be4 <UART_SetConfig+0x1b0>
 8007bc4:	2b40      	cmp	r3, #64	; 0x40
 8007bc6:	d802      	bhi.n	8007bce <UART_SetConfig+0x19a>
 8007bc8:	2b00      	cmp	r3, #0
 8007bca:	d005      	beq.n	8007bd8 <UART_SetConfig+0x1a4>
 8007bcc:	e0bc      	b.n	8007d48 <UART_SetConfig+0x314>
 8007bce:	2b80      	cmp	r3, #128	; 0x80
 8007bd0:	d005      	beq.n	8007bde <UART_SetConfig+0x1aa>
 8007bd2:	2bc0      	cmp	r3, #192	; 0xc0
 8007bd4:	d009      	beq.n	8007bea <UART_SetConfig+0x1b6>
 8007bd6:	e0b7      	b.n	8007d48 <UART_SetConfig+0x314>
 8007bd8:	2300      	movs	r3, #0
 8007bda:	75fb      	strb	r3, [r7, #23]
 8007bdc:	e0b4      	b.n	8007d48 <UART_SetConfig+0x314>
 8007bde:	2302      	movs	r3, #2
 8007be0:	75fb      	strb	r3, [r7, #23]
 8007be2:	e0b1      	b.n	8007d48 <UART_SetConfig+0x314>
 8007be4:	2304      	movs	r3, #4
 8007be6:	75fb      	strb	r3, [r7, #23]
 8007be8:	e0ae      	b.n	8007d48 <UART_SetConfig+0x314>
 8007bea:	2308      	movs	r3, #8
 8007bec:	75fb      	strb	r3, [r7, #23]
 8007bee:	e0ab      	b.n	8007d48 <UART_SetConfig+0x314>
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	681b      	ldr	r3, [r3, #0]
 8007bf4:	4a4f      	ldr	r2, [pc, #316]	; (8007d34 <UART_SetConfig+0x300>)
 8007bf6:	4293      	cmp	r3, r2
 8007bf8:	d120      	bne.n	8007c3c <UART_SetConfig+0x208>
 8007bfa:	4b4a      	ldr	r3, [pc, #296]	; (8007d24 <UART_SetConfig+0x2f0>)
 8007bfc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007c00:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007c04:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007c08:	d012      	beq.n	8007c30 <UART_SetConfig+0x1fc>
 8007c0a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007c0e:	d802      	bhi.n	8007c16 <UART_SetConfig+0x1e2>
 8007c10:	2b00      	cmp	r3, #0
 8007c12:	d007      	beq.n	8007c24 <UART_SetConfig+0x1f0>
 8007c14:	e098      	b.n	8007d48 <UART_SetConfig+0x314>
 8007c16:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007c1a:	d006      	beq.n	8007c2a <UART_SetConfig+0x1f6>
 8007c1c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007c20:	d009      	beq.n	8007c36 <UART_SetConfig+0x202>
 8007c22:	e091      	b.n	8007d48 <UART_SetConfig+0x314>
 8007c24:	2300      	movs	r3, #0
 8007c26:	75fb      	strb	r3, [r7, #23]
 8007c28:	e08e      	b.n	8007d48 <UART_SetConfig+0x314>
 8007c2a:	2302      	movs	r3, #2
 8007c2c:	75fb      	strb	r3, [r7, #23]
 8007c2e:	e08b      	b.n	8007d48 <UART_SetConfig+0x314>
 8007c30:	2304      	movs	r3, #4
 8007c32:	75fb      	strb	r3, [r7, #23]
 8007c34:	e088      	b.n	8007d48 <UART_SetConfig+0x314>
 8007c36:	2308      	movs	r3, #8
 8007c38:	75fb      	strb	r3, [r7, #23]
 8007c3a:	e085      	b.n	8007d48 <UART_SetConfig+0x314>
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	681b      	ldr	r3, [r3, #0]
 8007c40:	4a3d      	ldr	r2, [pc, #244]	; (8007d38 <UART_SetConfig+0x304>)
 8007c42:	4293      	cmp	r3, r2
 8007c44:	d120      	bne.n	8007c88 <UART_SetConfig+0x254>
 8007c46:	4b37      	ldr	r3, [pc, #220]	; (8007d24 <UART_SetConfig+0x2f0>)
 8007c48:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007c4c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8007c50:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007c54:	d012      	beq.n	8007c7c <UART_SetConfig+0x248>
 8007c56:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007c5a:	d802      	bhi.n	8007c62 <UART_SetConfig+0x22e>
 8007c5c:	2b00      	cmp	r3, #0
 8007c5e:	d007      	beq.n	8007c70 <UART_SetConfig+0x23c>
 8007c60:	e072      	b.n	8007d48 <UART_SetConfig+0x314>
 8007c62:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007c66:	d006      	beq.n	8007c76 <UART_SetConfig+0x242>
 8007c68:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007c6c:	d009      	beq.n	8007c82 <UART_SetConfig+0x24e>
 8007c6e:	e06b      	b.n	8007d48 <UART_SetConfig+0x314>
 8007c70:	2301      	movs	r3, #1
 8007c72:	75fb      	strb	r3, [r7, #23]
 8007c74:	e068      	b.n	8007d48 <UART_SetConfig+0x314>
 8007c76:	2302      	movs	r3, #2
 8007c78:	75fb      	strb	r3, [r7, #23]
 8007c7a:	e065      	b.n	8007d48 <UART_SetConfig+0x314>
 8007c7c:	2304      	movs	r3, #4
 8007c7e:	75fb      	strb	r3, [r7, #23]
 8007c80:	e062      	b.n	8007d48 <UART_SetConfig+0x314>
 8007c82:	2308      	movs	r3, #8
 8007c84:	75fb      	strb	r3, [r7, #23]
 8007c86:	e05f      	b.n	8007d48 <UART_SetConfig+0x314>
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	681b      	ldr	r3, [r3, #0]
 8007c8c:	4a2b      	ldr	r2, [pc, #172]	; (8007d3c <UART_SetConfig+0x308>)
 8007c8e:	4293      	cmp	r3, r2
 8007c90:	d120      	bne.n	8007cd4 <UART_SetConfig+0x2a0>
 8007c92:	4b24      	ldr	r3, [pc, #144]	; (8007d24 <UART_SetConfig+0x2f0>)
 8007c94:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007c98:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8007c9c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007ca0:	d012      	beq.n	8007cc8 <UART_SetConfig+0x294>
 8007ca2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007ca6:	d802      	bhi.n	8007cae <UART_SetConfig+0x27a>
 8007ca8:	2b00      	cmp	r3, #0
 8007caa:	d007      	beq.n	8007cbc <UART_SetConfig+0x288>
 8007cac:	e04c      	b.n	8007d48 <UART_SetConfig+0x314>
 8007cae:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007cb2:	d006      	beq.n	8007cc2 <UART_SetConfig+0x28e>
 8007cb4:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8007cb8:	d009      	beq.n	8007cce <UART_SetConfig+0x29a>
 8007cba:	e045      	b.n	8007d48 <UART_SetConfig+0x314>
 8007cbc:	2300      	movs	r3, #0
 8007cbe:	75fb      	strb	r3, [r7, #23]
 8007cc0:	e042      	b.n	8007d48 <UART_SetConfig+0x314>
 8007cc2:	2302      	movs	r3, #2
 8007cc4:	75fb      	strb	r3, [r7, #23]
 8007cc6:	e03f      	b.n	8007d48 <UART_SetConfig+0x314>
 8007cc8:	2304      	movs	r3, #4
 8007cca:	75fb      	strb	r3, [r7, #23]
 8007ccc:	e03c      	b.n	8007d48 <UART_SetConfig+0x314>
 8007cce:	2308      	movs	r3, #8
 8007cd0:	75fb      	strb	r3, [r7, #23]
 8007cd2:	e039      	b.n	8007d48 <UART_SetConfig+0x314>
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	681b      	ldr	r3, [r3, #0]
 8007cd8:	4a19      	ldr	r2, [pc, #100]	; (8007d40 <UART_SetConfig+0x30c>)
 8007cda:	4293      	cmp	r3, r2
 8007cdc:	d135      	bne.n	8007d4a <UART_SetConfig+0x316>
 8007cde:	4b11      	ldr	r3, [pc, #68]	; (8007d24 <UART_SetConfig+0x2f0>)
 8007ce0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007ce4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8007ce8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007cec:	d012      	beq.n	8007d14 <UART_SetConfig+0x2e0>
 8007cee:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007cf2:	d802      	bhi.n	8007cfa <UART_SetConfig+0x2c6>
 8007cf4:	2b00      	cmp	r3, #0
 8007cf6:	d007      	beq.n	8007d08 <UART_SetConfig+0x2d4>
 8007cf8:	e026      	b.n	8007d48 <UART_SetConfig+0x314>
 8007cfa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007cfe:	d006      	beq.n	8007d0e <UART_SetConfig+0x2da>
 8007d00:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8007d04:	d01e      	beq.n	8007d44 <UART_SetConfig+0x310>
 8007d06:	e01f      	b.n	8007d48 <UART_SetConfig+0x314>
 8007d08:	2300      	movs	r3, #0
 8007d0a:	75fb      	strb	r3, [r7, #23]
 8007d0c:	e01c      	b.n	8007d48 <UART_SetConfig+0x314>
 8007d0e:	2302      	movs	r3, #2
 8007d10:	75fb      	strb	r3, [r7, #23]
 8007d12:	e019      	b.n	8007d48 <UART_SetConfig+0x314>
 8007d14:	2304      	movs	r3, #4
 8007d16:	75fb      	strb	r3, [r7, #23]
 8007d18:	e016      	b.n	8007d48 <UART_SetConfig+0x314>
 8007d1a:	bf00      	nop
 8007d1c:	efff69f3 	.word	0xefff69f3
 8007d20:	40011000 	.word	0x40011000
 8007d24:	40023800 	.word	0x40023800
 8007d28:	40004400 	.word	0x40004400
 8007d2c:	40004800 	.word	0x40004800
 8007d30:	40004c00 	.word	0x40004c00
 8007d34:	40005000 	.word	0x40005000
 8007d38:	40011400 	.word	0x40011400
 8007d3c:	40007800 	.word	0x40007800
 8007d40:	40007c00 	.word	0x40007c00
 8007d44:	2308      	movs	r3, #8
 8007d46:	75fb      	strb	r3, [r7, #23]
 8007d48:	bf00      	nop

  /* Check UART Over Sampling to set Baud Rate Register */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007d4a:	687b      	ldr	r3, [r7, #4]
 8007d4c:	69db      	ldr	r3, [r3, #28]
 8007d4e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007d52:	d16c      	bne.n	8007e2e <UART_SetConfig+0x3fa>
  {
    switch (clocksource)
 8007d54:	7dfb      	ldrb	r3, [r7, #23]
 8007d56:	2b08      	cmp	r3, #8
 8007d58:	d854      	bhi.n	8007e04 <UART_SetConfig+0x3d0>
 8007d5a:	a201      	add	r2, pc, #4	; (adr r2, 8007d60 <UART_SetConfig+0x32c>)
 8007d5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007d60:	08007d85 	.word	0x08007d85
 8007d64:	08007da1 	.word	0x08007da1
 8007d68:	08007dbd 	.word	0x08007dbd
 8007d6c:	08007e05 	.word	0x08007e05
 8007d70:	08007dd3 	.word	0x08007dd3
 8007d74:	08007e05 	.word	0x08007e05
 8007d78:	08007e05 	.word	0x08007e05
 8007d7c:	08007e05 	.word	0x08007e05
 8007d80:	08007def 	.word	0x08007def
    {
    case UART_CLOCKSOURCE_PCLK1:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8007d84:	f7fe f800 	bl	8005d88 <HAL_RCC_GetPCLK1Freq>
 8007d88:	4603      	mov	r3, r0
 8007d8a:	005a      	lsls	r2, r3, #1
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	685b      	ldr	r3, [r3, #4]
 8007d90:	085b      	lsrs	r3, r3, #1
 8007d92:	441a      	add	r2, r3
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	685b      	ldr	r3, [r3, #4]
 8007d98:	fbb2 f3f3 	udiv	r3, r2, r3
 8007d9c:	82bb      	strh	r3, [r7, #20]
      break;
 8007d9e:	e034      	b.n	8007e0a <UART_SetConfig+0x3d6>
    case UART_CLOCKSOURCE_PCLK2:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8007da0:	f7fe f806 	bl	8005db0 <HAL_RCC_GetPCLK2Freq>
 8007da4:	4603      	mov	r3, r0
 8007da6:	005a      	lsls	r2, r3, #1
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	685b      	ldr	r3, [r3, #4]
 8007dac:	085b      	lsrs	r3, r3, #1
 8007dae:	441a      	add	r2, r3
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	685b      	ldr	r3, [r3, #4]
 8007db4:	fbb2 f3f3 	udiv	r3, r2, r3
 8007db8:	82bb      	strh	r3, [r7, #20]
      break;
 8007dba:	e026      	b.n	8007e0a <UART_SetConfig+0x3d6>
    case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8007dbc:	687b      	ldr	r3, [r7, #4]
 8007dbe:	685b      	ldr	r3, [r3, #4]
 8007dc0:	085a      	lsrs	r2, r3, #1
 8007dc2:	4b51      	ldr	r3, [pc, #324]	; (8007f08 <UART_SetConfig+0x4d4>)
 8007dc4:	4413      	add	r3, r2
 8007dc6:	687a      	ldr	r2, [r7, #4]
 8007dc8:	6852      	ldr	r2, [r2, #4]
 8007dca:	fbb3 f3f2 	udiv	r3, r3, r2
 8007dce:	82bb      	strh	r3, [r7, #20]
      break;
 8007dd0:	e01b      	b.n	8007e0a <UART_SetConfig+0x3d6>
    case UART_CLOCKSOURCE_SYSCLK:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8007dd2:	f7fd ff17 	bl	8005c04 <HAL_RCC_GetSysClockFreq>
 8007dd6:	4603      	mov	r3, r0
 8007dd8:	005a      	lsls	r2, r3, #1
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	685b      	ldr	r3, [r3, #4]
 8007dde:	085b      	lsrs	r3, r3, #1
 8007de0:	441a      	add	r2, r3
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	685b      	ldr	r3, [r3, #4]
 8007de6:	fbb2 f3f3 	udiv	r3, r2, r3
 8007dea:	82bb      	strh	r3, [r7, #20]
      break;
 8007dec:	e00d      	b.n	8007e0a <UART_SetConfig+0x3d6>
    case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8007dee:	687b      	ldr	r3, [r7, #4]
 8007df0:	685b      	ldr	r3, [r3, #4]
 8007df2:	085b      	lsrs	r3, r3, #1
 8007df4:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	685b      	ldr	r3, [r3, #4]
 8007dfc:	fbb2 f3f3 	udiv	r3, r2, r3
 8007e00:	82bb      	strh	r3, [r7, #20]
      break;
 8007e02:	e002      	b.n	8007e0a <UART_SetConfig+0x3d6>
      case UART_CLOCKSOURCE_UNDEFINED:
    default:
        ret = HAL_ERROR;
 8007e04:	2301      	movs	r3, #1
 8007e06:	74fb      	strb	r3, [r7, #19]
      break;
 8007e08:	bf00      	nop
    }

    brrtemp = usartdiv & 0xFFF0U;
 8007e0a:	8abb      	ldrh	r3, [r7, #20]
 8007e0c:	f023 030f 	bic.w	r3, r3, #15
 8007e10:	817b      	strh	r3, [r7, #10]
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007e12:	8abb      	ldrh	r3, [r7, #20]
 8007e14:	105b      	asrs	r3, r3, #1
 8007e16:	b29b      	uxth	r3, r3
 8007e18:	f003 0307 	and.w	r3, r3, #7
 8007e1c:	b29a      	uxth	r2, r3
 8007e1e:	897b      	ldrh	r3, [r7, #10]
 8007e20:	4313      	orrs	r3, r2
 8007e22:	817b      	strh	r3, [r7, #10]
    huart->Instance->BRR = brrtemp;
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	681b      	ldr	r3, [r3, #0]
 8007e28:	897a      	ldrh	r2, [r7, #10]
 8007e2a:	60da      	str	r2, [r3, #12]
 8007e2c:	e067      	b.n	8007efe <UART_SetConfig+0x4ca>
  }
  else
  {
    switch (clocksource)
 8007e2e:	7dfb      	ldrb	r3, [r7, #23]
 8007e30:	2b08      	cmp	r3, #8
 8007e32:	d861      	bhi.n	8007ef8 <UART_SetConfig+0x4c4>
 8007e34:	a201      	add	r2, pc, #4	; (adr r2, 8007e3c <UART_SetConfig+0x408>)
 8007e36:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007e3a:	bf00      	nop
 8007e3c:	08007e61 	.word	0x08007e61
 8007e40:	08007e81 	.word	0x08007e81
 8007e44:	08007ea1 	.word	0x08007ea1
 8007e48:	08007ef9 	.word	0x08007ef9
 8007e4c:	08007ebd 	.word	0x08007ebd
 8007e50:	08007ef9 	.word	0x08007ef9
 8007e54:	08007ef9 	.word	0x08007ef9
 8007e58:	08007ef9 	.word	0x08007ef9
 8007e5c:	08007edd 	.word	0x08007edd
    {
    case UART_CLOCKSOURCE_PCLK1:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	681c      	ldr	r4, [r3, #0]
 8007e64:	f7fd ff90 	bl	8005d88 <HAL_RCC_GetPCLK1Freq>
 8007e68:	4602      	mov	r2, r0
 8007e6a:	687b      	ldr	r3, [r7, #4]
 8007e6c:	685b      	ldr	r3, [r3, #4]
 8007e6e:	085b      	lsrs	r3, r3, #1
 8007e70:	441a      	add	r2, r3
 8007e72:	687b      	ldr	r3, [r7, #4]
 8007e74:	685b      	ldr	r3, [r3, #4]
 8007e76:	fbb2 f3f3 	udiv	r3, r2, r3
 8007e7a:	b29b      	uxth	r3, r3
 8007e7c:	60e3      	str	r3, [r4, #12]
      break;
 8007e7e:	e03e      	b.n	8007efe <UART_SetConfig+0x4ca>
    case UART_CLOCKSOURCE_PCLK2:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8007e80:	687b      	ldr	r3, [r7, #4]
 8007e82:	681c      	ldr	r4, [r3, #0]
 8007e84:	f7fd ff94 	bl	8005db0 <HAL_RCC_GetPCLK2Freq>
 8007e88:	4602      	mov	r2, r0
 8007e8a:	687b      	ldr	r3, [r7, #4]
 8007e8c:	685b      	ldr	r3, [r3, #4]
 8007e8e:	085b      	lsrs	r3, r3, #1
 8007e90:	441a      	add	r2, r3
 8007e92:	687b      	ldr	r3, [r7, #4]
 8007e94:	685b      	ldr	r3, [r3, #4]
 8007e96:	fbb2 f3f3 	udiv	r3, r2, r3
 8007e9a:	b29b      	uxth	r3, r3
 8007e9c:	60e3      	str	r3, [r4, #12]
      break;
 8007e9e:	e02e      	b.n	8007efe <UART_SetConfig+0x4ca>
    case UART_CLOCKSOURCE_HSI:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	681a      	ldr	r2, [r3, #0]
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	685b      	ldr	r3, [r3, #4]
 8007ea8:	0859      	lsrs	r1, r3, #1
 8007eaa:	4b18      	ldr	r3, [pc, #96]	; (8007f0c <UART_SetConfig+0x4d8>)
 8007eac:	440b      	add	r3, r1
 8007eae:	6879      	ldr	r1, [r7, #4]
 8007eb0:	6849      	ldr	r1, [r1, #4]
 8007eb2:	fbb3 f3f1 	udiv	r3, r3, r1
 8007eb6:	b29b      	uxth	r3, r3
 8007eb8:	60d3      	str	r3, [r2, #12]
      break;
 8007eba:	e020      	b.n	8007efe <UART_SetConfig+0x4ca>
    case UART_CLOCKSOURCE_SYSCLK:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	681c      	ldr	r4, [r3, #0]
 8007ec0:	f7fd fea0 	bl	8005c04 <HAL_RCC_GetSysClockFreq>
 8007ec4:	4602      	mov	r2, r0
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	685b      	ldr	r3, [r3, #4]
 8007eca:	085b      	lsrs	r3, r3, #1
 8007ecc:	441a      	add	r2, r3
 8007ece:	687b      	ldr	r3, [r7, #4]
 8007ed0:	685b      	ldr	r3, [r3, #4]
 8007ed2:	fbb2 f3f3 	udiv	r3, r2, r3
 8007ed6:	b29b      	uxth	r3, r3
 8007ed8:	60e3      	str	r3, [r4, #12]
      break;
 8007eda:	e010      	b.n	8007efe <UART_SetConfig+0x4ca>
    case UART_CLOCKSOURCE_LSE:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8007edc:	687b      	ldr	r3, [r7, #4]
 8007ede:	681b      	ldr	r3, [r3, #0]
 8007ee0:	687a      	ldr	r2, [r7, #4]
 8007ee2:	6852      	ldr	r2, [r2, #4]
 8007ee4:	0852      	lsrs	r2, r2, #1
 8007ee6:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
 8007eea:	687a      	ldr	r2, [r7, #4]
 8007eec:	6852      	ldr	r2, [r2, #4]
 8007eee:	fbb1 f2f2 	udiv	r2, r1, r2
 8007ef2:	b292      	uxth	r2, r2
 8007ef4:	60da      	str	r2, [r3, #12]
      break;
 8007ef6:	e002      	b.n	8007efe <UART_SetConfig+0x4ca>
      case UART_CLOCKSOURCE_UNDEFINED:
    default:
        ret = HAL_ERROR;
 8007ef8:	2301      	movs	r3, #1
 8007efa:	74fb      	strb	r3, [r7, #19]
      break;
 8007efc:	bf00      	nop
    }
  }

  return ret;
 8007efe:	7cfb      	ldrb	r3, [r7, #19]

}
 8007f00:	4618      	mov	r0, r3
 8007f02:	371c      	adds	r7, #28
 8007f04:	46bd      	mov	sp, r7
 8007f06:	bd90      	pop	{r4, r7, pc}
 8007f08:	01e84800 	.word	0x01e84800
 8007f0c:	00f42400 	.word	0x00f42400

08007f10 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features
  * @param huart uart handle
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007f10:	b480      	push	{r7}
 8007f12:	b083      	sub	sp, #12
 8007f14:	af00      	add	r7, sp, #0
 8007f16:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f1c:	f003 0301 	and.w	r3, r3, #1
 8007f20:	2b00      	cmp	r3, #0
 8007f22:	d00a      	beq.n	8007f3a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007f24:	687b      	ldr	r3, [r7, #4]
 8007f26:	681b      	ldr	r3, [r3, #0]
 8007f28:	687a      	ldr	r2, [r7, #4]
 8007f2a:	6812      	ldr	r2, [r2, #0]
 8007f2c:	6852      	ldr	r2, [r2, #4]
 8007f2e:	f422 3100 	bic.w	r1, r2, #131072	; 0x20000
 8007f32:	687a      	ldr	r2, [r7, #4]
 8007f34:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8007f36:	430a      	orrs	r2, r1
 8007f38:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007f3a:	687b      	ldr	r3, [r7, #4]
 8007f3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f3e:	f003 0302 	and.w	r3, r3, #2
 8007f42:	2b00      	cmp	r3, #0
 8007f44:	d00a      	beq.n	8007f5c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007f46:	687b      	ldr	r3, [r7, #4]
 8007f48:	681b      	ldr	r3, [r3, #0]
 8007f4a:	687a      	ldr	r2, [r7, #4]
 8007f4c:	6812      	ldr	r2, [r2, #0]
 8007f4e:	6852      	ldr	r2, [r2, #4]
 8007f50:	f422 3180 	bic.w	r1, r2, #65536	; 0x10000
 8007f54:	687a      	ldr	r2, [r7, #4]
 8007f56:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8007f58:	430a      	orrs	r2, r1
 8007f5a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f60:	f003 0304 	and.w	r3, r3, #4
 8007f64:	2b00      	cmp	r3, #0
 8007f66:	d00a      	beq.n	8007f7e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007f68:	687b      	ldr	r3, [r7, #4]
 8007f6a:	681b      	ldr	r3, [r3, #0]
 8007f6c:	687a      	ldr	r2, [r7, #4]
 8007f6e:	6812      	ldr	r2, [r2, #0]
 8007f70:	6852      	ldr	r2, [r2, #4]
 8007f72:	f422 2180 	bic.w	r1, r2, #262144	; 0x40000
 8007f76:	687a      	ldr	r2, [r7, #4]
 8007f78:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8007f7a:	430a      	orrs	r2, r1
 8007f7c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007f7e:	687b      	ldr	r3, [r7, #4]
 8007f80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f82:	f003 0308 	and.w	r3, r3, #8
 8007f86:	2b00      	cmp	r3, #0
 8007f88:	d00a      	beq.n	8007fa0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007f8a:	687b      	ldr	r3, [r7, #4]
 8007f8c:	681b      	ldr	r3, [r3, #0]
 8007f8e:	687a      	ldr	r2, [r7, #4]
 8007f90:	6812      	ldr	r2, [r2, #0]
 8007f92:	6852      	ldr	r2, [r2, #4]
 8007f94:	f422 4100 	bic.w	r1, r2, #32768	; 0x8000
 8007f98:	687a      	ldr	r2, [r7, #4]
 8007f9a:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8007f9c:	430a      	orrs	r2, r1
 8007f9e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007fa0:	687b      	ldr	r3, [r7, #4]
 8007fa2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007fa4:	f003 0310 	and.w	r3, r3, #16
 8007fa8:	2b00      	cmp	r3, #0
 8007faa:	d00a      	beq.n	8007fc2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	681b      	ldr	r3, [r3, #0]
 8007fb0:	687a      	ldr	r2, [r7, #4]
 8007fb2:	6812      	ldr	r2, [r2, #0]
 8007fb4:	6892      	ldr	r2, [r2, #8]
 8007fb6:	f422 5180 	bic.w	r1, r2, #4096	; 0x1000
 8007fba:	687a      	ldr	r2, [r7, #4]
 8007fbc:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8007fbe:	430a      	orrs	r2, r1
 8007fc0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8007fc2:	687b      	ldr	r3, [r7, #4]
 8007fc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007fc6:	f003 0320 	and.w	r3, r3, #32
 8007fca:	2b00      	cmp	r3, #0
 8007fcc:	d00a      	beq.n	8007fe4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007fce:	687b      	ldr	r3, [r7, #4]
 8007fd0:	681b      	ldr	r3, [r3, #0]
 8007fd2:	687a      	ldr	r2, [r7, #4]
 8007fd4:	6812      	ldr	r2, [r2, #0]
 8007fd6:	6892      	ldr	r2, [r2, #8]
 8007fd8:	f422 5100 	bic.w	r1, r2, #8192	; 0x2000
 8007fdc:	687a      	ldr	r2, [r7, #4]
 8007fde:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8007fe0:	430a      	orrs	r2, r1
 8007fe2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007fe8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007fec:	2b00      	cmp	r3, #0
 8007fee:	d01a      	beq.n	8008026 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007ff0:	687b      	ldr	r3, [r7, #4]
 8007ff2:	681b      	ldr	r3, [r3, #0]
 8007ff4:	687a      	ldr	r2, [r7, #4]
 8007ff6:	6812      	ldr	r2, [r2, #0]
 8007ff8:	6852      	ldr	r2, [r2, #4]
 8007ffa:	f422 1180 	bic.w	r1, r2, #1048576	; 0x100000
 8007ffe:	687a      	ldr	r2, [r7, #4]
 8008000:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8008002:	430a      	orrs	r2, r1
 8008004:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if(huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8008006:	687b      	ldr	r3, [r7, #4]
 8008008:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800800a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800800e:	d10a      	bne.n	8008026 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8008010:	687b      	ldr	r3, [r7, #4]
 8008012:	681b      	ldr	r3, [r3, #0]
 8008014:	687a      	ldr	r2, [r7, #4]
 8008016:	6812      	ldr	r2, [r2, #0]
 8008018:	6852      	ldr	r2, [r2, #4]
 800801a:	f422 01c0 	bic.w	r1, r2, #6291456	; 0x600000
 800801e:	687a      	ldr	r2, [r7, #4]
 8008020:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8008022:	430a      	orrs	r2, r1
 8008024:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8008026:	687b      	ldr	r3, [r7, #4]
 8008028:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800802a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800802e:	2b00      	cmp	r3, #0
 8008030:	d00a      	beq.n	8008048 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8008032:	687b      	ldr	r3, [r7, #4]
 8008034:	681b      	ldr	r3, [r3, #0]
 8008036:	687a      	ldr	r2, [r7, #4]
 8008038:	6812      	ldr	r2, [r2, #0]
 800803a:	6852      	ldr	r2, [r2, #4]
 800803c:	f422 2100 	bic.w	r1, r2, #524288	; 0x80000
 8008040:	687a      	ldr	r2, [r7, #4]
 8008042:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8008044:	430a      	orrs	r2, r1
 8008046:	605a      	str	r2, [r3, #4]
  }
}
 8008048:	bf00      	nop
 800804a:	370c      	adds	r7, #12
 800804c:	46bd      	mov	sp, r7
 800804e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008052:	4770      	bx	lr

08008054 <UART_CheckIdleState>:
  * @brief Check the UART Idle State
  * @param huart uart handle
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8008054:	b580      	push	{r7, lr}
 8008056:	b086      	sub	sp, #24
 8008058:	af02      	add	r7, sp, #8
 800805a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800805c:	2300      	movs	r3, #0
 800805e:	60fb      	str	r3, [r7, #12]

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008060:	687b      	ldr	r3, [r7, #4]
 8008062:	2200      	movs	r2, #0
 8008064:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8008066:	f7fa ffb9 	bl	8002fdc <HAL_GetTick>
 800806a:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	681b      	ldr	r3, [r3, #0]
 8008070:	681b      	ldr	r3, [r3, #0]
 8008072:	f003 0308 	and.w	r3, r3, #8
 8008076:	2b08      	cmp	r3, #8
 8008078:	d10e      	bne.n	8008098 <UART_CheckIdleState+0x44>
  {
    /* Wait until TEACK flag is set */
    if(UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800807a:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800807e:	9300      	str	r3, [sp, #0]
 8008080:	68fb      	ldr	r3, [r7, #12]
 8008082:	2200      	movs	r2, #0
 8008084:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8008088:	6878      	ldr	r0, [r7, #4]
 800808a:	f7ff fc88 	bl	800799e <UART_WaitOnFlagUntilTimeout>
 800808e:	4603      	mov	r3, r0
 8008090:	2b00      	cmp	r3, #0
 8008092:	d001      	beq.n	8008098 <UART_CheckIdleState+0x44>
    {
      /* Timeout Occurred */
      return HAL_TIMEOUT;
 8008094:	2303      	movs	r3, #3
 8008096:	e00c      	b.n	80080b2 <UART_CheckIdleState+0x5e>
    }
  }

  /* Initialize the UART State */
  huart->gState= HAL_UART_STATE_READY;
 8008098:	687b      	ldr	r3, [r7, #4]
 800809a:	2220      	movs	r2, #32
 800809c:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
  huart->RxState= HAL_UART_STATE_READY;
 80080a0:	687b      	ldr	r3, [r7, #4]
 80080a2:	2220      	movs	r2, #32
 80080a4:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80080a8:	687b      	ldr	r3, [r7, #4]
 80080aa:	2200      	movs	r2, #0
 80080ac:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68

  return HAL_OK;
 80080b0:	2300      	movs	r3, #0
}
 80080b2:	4618      	mov	r0, r3
 80080b4:	3710      	adds	r7, #16
 80080b6:	46bd      	mov	sp, r7
 80080b8:	bd80      	pop	{r7, pc}
	...

080080bc <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 80080bc:	b480      	push	{r7}
 80080be:	b085      	sub	sp, #20
 80080c0:	af00      	add	r7, sp, #0
 80080c2:	6078      	str	r0, [r7, #4]
 80080c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpr1 = 0;
 80080c6:	2300      	movs	r3, #0
 80080c8:	60fb      	str	r3, [r7, #12]
  uint32_t tmpr2 = 0;
 80080ca:	2300      	movs	r3, #0
 80080cc:	60bb      	str	r3, [r7, #8]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));   

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank != FMC_SDRAM_BANK2) 
 80080ce:	683b      	ldr	r3, [r7, #0]
 80080d0:	681b      	ldr	r3, [r3, #0]
 80080d2:	2b01      	cmp	r3, #1
 80080d4:	d027      	beq.n	8008126 <FMC_SDRAM_Init+0x6a>
  {
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 80080d6:	687b      	ldr	r3, [r7, #4]
 80080d8:	681b      	ldr	r3, [r3, #0]
 80080da:	60fb      	str	r3, [r7, #12]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 80080dc:	68fa      	ldr	r2, [r7, #12]
 80080de:	4b2f      	ldr	r3, [pc, #188]	; (800819c <FMC_SDRAM_Init+0xe0>)
 80080e0:	4013      	ands	r3, r2
 80080e2:	60fb      	str	r3, [r7, #12]
                          FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP   | \
                          FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));

    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 80080e4:	683b      	ldr	r3, [r7, #0]
 80080e6:	685a      	ldr	r2, [r3, #4]
                        Init->RowBitsNumber      |\
 80080e8:	683b      	ldr	r3, [r7, #0]
 80080ea:	689b      	ldr	r3, [r3, #8]
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 80080ec:	431a      	orrs	r2, r3
                        Init->MemoryDataWidth    |\
 80080ee:	683b      	ldr	r3, [r7, #0]
 80080f0:	68db      	ldr	r3, [r3, #12]
                        Init->RowBitsNumber      |\
 80080f2:	431a      	orrs	r2, r3
                        Init->InternalBankNumber |\
 80080f4:	683b      	ldr	r3, [r7, #0]
 80080f6:	691b      	ldr	r3, [r3, #16]
                        Init->MemoryDataWidth    |\
 80080f8:	431a      	orrs	r2, r3
                        Init->CASLatency         |\
 80080fa:	683b      	ldr	r3, [r7, #0]
 80080fc:	695b      	ldr	r3, [r3, #20]
                        Init->InternalBankNumber |\
 80080fe:	431a      	orrs	r2, r3
                        Init->WriteProtection    |\
 8008100:	683b      	ldr	r3, [r7, #0]
 8008102:	699b      	ldr	r3, [r3, #24]
                        Init->CASLatency         |\
 8008104:	431a      	orrs	r2, r3
                        Init->SDClockPeriod      |\
 8008106:	683b      	ldr	r3, [r7, #0]
 8008108:	69db      	ldr	r3, [r3, #28]
                        Init->WriteProtection    |\
 800810a:	431a      	orrs	r2, r3
                        Init->ReadBurst          |\
 800810c:	683b      	ldr	r3, [r7, #0]
 800810e:	6a1b      	ldr	r3, [r3, #32]
                        Init->SDClockPeriod      |\
 8008110:	431a      	orrs	r2, r3
                        Init->ReadPipeDelay
 8008112:	683b      	ldr	r3, [r7, #0]
 8008114:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        Init->ReadBurst          |\
 8008116:	4313      	orrs	r3, r2
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8008118:	68fa      	ldr	r2, [r7, #12]
 800811a:	4313      	orrs	r3, r2
 800811c:	60fb      	str	r3, [r7, #12]
                        );                                      
    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 800811e:	687b      	ldr	r3, [r7, #4]
 8008120:	68fa      	ldr	r2, [r7, #12]
 8008122:	601a      	str	r2, [r3, #0]
 8008124:	e032      	b.n	800818c <FMC_SDRAM_Init+0xd0>
  }
  else /* FMC_Bank2_SDRAM */                      
  {
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 8008126:	687b      	ldr	r3, [r7, #4]
 8008128:	681b      	ldr	r3, [r3, #0]
 800812a:	60fb      	str	r3, [r7, #12]
    
    /* Clear SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));
 800812c:	68fb      	ldr	r3, [r7, #12]
 800812e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8008132:	60fb      	str	r3, [r7, #12]
    
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 8008134:	683b      	ldr	r3, [r7, #0]
 8008136:	69da      	ldr	r2, [r3, #28]
                        Init->ReadBurst          |\
 8008138:	683b      	ldr	r3, [r7, #0]
 800813a:	6a1b      	ldr	r3, [r3, #32]
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 800813c:	431a      	orrs	r2, r3
                        Init->ReadPipeDelay);
 800813e:	683b      	ldr	r3, [r7, #0]
 8008140:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        Init->ReadBurst          |\
 8008142:	4313      	orrs	r3, r2
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 8008144:	68fa      	ldr	r2, [r7, #12]
 8008146:	4313      	orrs	r3, r2
 8008148:	60fb      	str	r3, [r7, #12]
    
    tmpr2 = Device->SDCR[FMC_SDRAM_BANK2];
 800814a:	687b      	ldr	r3, [r7, #4]
 800814c:	685b      	ldr	r3, [r3, #4]
 800814e:	60bb      	str	r3, [r7, #8]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr2 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 8008150:	68ba      	ldr	r2, [r7, #8]
 8008152:	4b12      	ldr	r3, [pc, #72]	; (800819c <FMC_SDRAM_Init+0xe0>)
 8008154:	4013      	ands	r3, r2
 8008156:	60bb      	str	r3, [r7, #8]
                          FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP   | \
                          FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));

    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8008158:	683b      	ldr	r3, [r7, #0]
 800815a:	685a      	ldr	r2, [r3, #4]
                       Init->RowBitsNumber       |\
 800815c:	683b      	ldr	r3, [r7, #0]
 800815e:	689b      	ldr	r3, [r3, #8]
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8008160:	431a      	orrs	r2, r3
                       Init->MemoryDataWidth     |\
 8008162:	683b      	ldr	r3, [r7, #0]
 8008164:	68db      	ldr	r3, [r3, #12]
                       Init->RowBitsNumber       |\
 8008166:	431a      	orrs	r2, r3
                       Init->InternalBankNumber  |\
 8008168:	683b      	ldr	r3, [r7, #0]
 800816a:	691b      	ldr	r3, [r3, #16]
                       Init->MemoryDataWidth     |\
 800816c:	431a      	orrs	r2, r3
                       Init->CASLatency          |\
 800816e:	683b      	ldr	r3, [r7, #0]
 8008170:	695b      	ldr	r3, [r3, #20]
                       Init->InternalBankNumber  |\
 8008172:	431a      	orrs	r2, r3
                       Init->WriteProtection);
 8008174:	683b      	ldr	r3, [r7, #0]
 8008176:	699b      	ldr	r3, [r3, #24]
                       Init->CASLatency          |\
 8008178:	4313      	orrs	r3, r2
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800817a:	68ba      	ldr	r2, [r7, #8]
 800817c:	4313      	orrs	r3, r2
 800817e:	60bb      	str	r3, [r7, #8]

    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 8008180:	687b      	ldr	r3, [r7, #4]
 8008182:	68fa      	ldr	r2, [r7, #12]
 8008184:	601a      	str	r2, [r3, #0]
    Device->SDCR[FMC_SDRAM_BANK2] = tmpr2;
 8008186:	687b      	ldr	r3, [r7, #4]
 8008188:	68ba      	ldr	r2, [r7, #8]
 800818a:	605a      	str	r2, [r3, #4]
  }
  
  return HAL_OK;
 800818c:	2300      	movs	r3, #0
}
 800818e:	4618      	mov	r0, r3
 8008190:	3714      	adds	r7, #20
 8008192:	46bd      	mov	sp, r7
 8008194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008198:	4770      	bx	lr
 800819a:	bf00      	nop
 800819c:	ffff8000 	.word	0xffff8000

080081a0 <FMC_SDRAM_Timing_Init>:
  * @param  Timing Pointer to SDRAM Timing structure
  * @param  Bank SDRAM bank number   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 80081a0:	b480      	push	{r7}
 80081a2:	b087      	sub	sp, #28
 80081a4:	af00      	add	r7, sp, #0
 80081a6:	60f8      	str	r0, [r7, #12]
 80081a8:	60b9      	str	r1, [r7, #8]
 80081aa:	607a      	str	r2, [r7, #4]
  uint32_t tmpr1 = 0;
 80081ac:	2300      	movs	r3, #0
 80081ae:	617b      	str	r3, [r7, #20]
  uint32_t tmpr2 = 0;
 80081b0:	2300      	movs	r3, #0
 80081b2:	613b      	str	r3, [r7, #16]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));
  
  /* Set SDRAM device timing parameters */ 
  if (Bank != FMC_SDRAM_BANK2) 
 80081b4:	687b      	ldr	r3, [r7, #4]
 80081b6:	2b01      	cmp	r3, #1
 80081b8:	d02e      	beq.n	8008218 <FMC_SDRAM_Timing_Init+0x78>
  {
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 80081ba:	68fb      	ldr	r3, [r7, #12]
 80081bc:	689b      	ldr	r3, [r3, #8]
 80081be:	617b      	str	r3, [r7, #20]
    
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 80081c0:	697b      	ldr	r3, [r7, #20]
 80081c2:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 80081c6:	617b      	str	r3, [r7, #20]
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 80081c8:	68bb      	ldr	r3, [r7, #8]
 80081ca:	681b      	ldr	r3, [r3, #0]
 80081cc:	1e5a      	subs	r2, r3, #1
                       (((Timing->ExitSelfRefreshDelay)-1) << 4) |\
 80081ce:	68bb      	ldr	r3, [r7, #8]
 80081d0:	685b      	ldr	r3, [r3, #4]
 80081d2:	3b01      	subs	r3, #1
 80081d4:	011b      	lsls	r3, r3, #4
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 80081d6:	431a      	orrs	r2, r3
                       (((Timing->SelfRefreshTime)-1) << 8)      |\
 80081d8:	68bb      	ldr	r3, [r7, #8]
 80081da:	689b      	ldr	r3, [r3, #8]
 80081dc:	3b01      	subs	r3, #1
 80081de:	021b      	lsls	r3, r3, #8
                       (((Timing->ExitSelfRefreshDelay)-1) << 4) |\
 80081e0:	431a      	orrs	r2, r3
                       (((Timing->RowCycleDelay)-1) << 12)       |\
 80081e2:	68bb      	ldr	r3, [r7, #8]
 80081e4:	68db      	ldr	r3, [r3, #12]
 80081e6:	3b01      	subs	r3, #1
 80081e8:	031b      	lsls	r3, r3, #12
                       (((Timing->SelfRefreshTime)-1) << 8)      |\
 80081ea:	431a      	orrs	r2, r3
                       (((Timing->WriteRecoveryTime)-1) <<16)    |\
 80081ec:	68bb      	ldr	r3, [r7, #8]
 80081ee:	691b      	ldr	r3, [r3, #16]
 80081f0:	3b01      	subs	r3, #1
 80081f2:	041b      	lsls	r3, r3, #16
                       (((Timing->RowCycleDelay)-1) << 12)       |\
 80081f4:	431a      	orrs	r2, r3
                       (((Timing->RPDelay)-1) << 20)             |\
 80081f6:	68bb      	ldr	r3, [r7, #8]
 80081f8:	695b      	ldr	r3, [r3, #20]
 80081fa:	3b01      	subs	r3, #1
 80081fc:	051b      	lsls	r3, r3, #20
                       (((Timing->WriteRecoveryTime)-1) <<16)    |\
 80081fe:	431a      	orrs	r2, r3
                       (((Timing->RCDDelay)-1) << 24));
 8008200:	68bb      	ldr	r3, [r7, #8]
 8008202:	699b      	ldr	r3, [r3, #24]
 8008204:	3b01      	subs	r3, #1
 8008206:	061b      	lsls	r3, r3, #24
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 8008208:	4313      	orrs	r3, r2
 800820a:	697a      	ldr	r2, [r7, #20]
 800820c:	4313      	orrs	r3, r2
 800820e:	617b      	str	r3, [r7, #20]
    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 8008210:	68fb      	ldr	r3, [r7, #12]
 8008212:	697a      	ldr	r2, [r7, #20]
 8008214:	609a      	str	r2, [r3, #8]
 8008216:	e039      	b.n	800828c <FMC_SDRAM_Timing_Init+0xec>
  }
  else /* FMC_Bank2_SDRAM */
  {
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 8008218:	68fb      	ldr	r3, [r7, #12]
 800821a:	689b      	ldr	r3, [r3, #8]
 800821c:	617b      	str	r3, [r7, #20]
    
    /* Clear TRC and TRP bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TRC | FMC_SDTR1_TRP));
 800821e:	697a      	ldr	r2, [r7, #20]
 8008220:	4b1e      	ldr	r3, [pc, #120]	; (800829c <FMC_SDRAM_Timing_Init+0xfc>)
 8008222:	4013      	ands	r3, r2
 8008224:	617b      	str	r3, [r7, #20]
    
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1) << 12)       |\
 8008226:	68bb      	ldr	r3, [r7, #8]
 8008228:	68db      	ldr	r3, [r3, #12]
 800822a:	3b01      	subs	r3, #1
 800822c:	031a      	lsls	r2, r3, #12
                        (((Timing->RPDelay)-1) << 20)); 
 800822e:	68bb      	ldr	r3, [r7, #8]
 8008230:	695b      	ldr	r3, [r3, #20]
 8008232:	3b01      	subs	r3, #1
 8008234:	051b      	lsls	r3, r3, #20
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1) << 12)       |\
 8008236:	4313      	orrs	r3, r2
 8008238:	697a      	ldr	r2, [r7, #20]
 800823a:	4313      	orrs	r3, r2
 800823c:	617b      	str	r3, [r7, #20]
    
    tmpr2 = Device->SDTR[FMC_SDRAM_BANK2];
 800823e:	68fb      	ldr	r3, [r7, #12]
 8008240:	68db      	ldr	r3, [r3, #12]
 8008242:	613b      	str	r3, [r7, #16]
    
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr2 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 8008244:	693b      	ldr	r3, [r7, #16]
 8008246:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800824a:	613b      	str	r3, [r7, #16]
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 800824c:	68bb      	ldr	r3, [r7, #8]
 800824e:	681b      	ldr	r3, [r3, #0]
 8008250:	1e5a      	subs	r2, r3, #1
                       (((Timing->ExitSelfRefreshDelay)-1) << 4)  |\
 8008252:	68bb      	ldr	r3, [r7, #8]
 8008254:	685b      	ldr	r3, [r3, #4]
 8008256:	3b01      	subs	r3, #1
 8008258:	011b      	lsls	r3, r3, #4
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 800825a:	431a      	orrs	r2, r3
                       (((Timing->SelfRefreshTime)-1) << 8)       |\
 800825c:	68bb      	ldr	r3, [r7, #8]
 800825e:	689b      	ldr	r3, [r3, #8]
 8008260:	3b01      	subs	r3, #1
 8008262:	021b      	lsls	r3, r3, #8
                       (((Timing->ExitSelfRefreshDelay)-1) << 4)  |\
 8008264:	431a      	orrs	r2, r3
                       (((Timing->WriteRecoveryTime)-1) <<16)     |\
 8008266:	68bb      	ldr	r3, [r7, #8]
 8008268:	691b      	ldr	r3, [r3, #16]
 800826a:	3b01      	subs	r3, #1
 800826c:	041b      	lsls	r3, r3, #16
                       (((Timing->SelfRefreshTime)-1) << 8)       |\
 800826e:	431a      	orrs	r2, r3
                       (((Timing->RCDDelay)-1) << 24));   
 8008270:	68bb      	ldr	r3, [r7, #8]
 8008272:	699b      	ldr	r3, [r3, #24]
 8008274:	3b01      	subs	r3, #1
 8008276:	061b      	lsls	r3, r3, #24
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 8008278:	4313      	orrs	r3, r2
 800827a:	693a      	ldr	r2, [r7, #16]
 800827c:	4313      	orrs	r3, r2
 800827e:	613b      	str	r3, [r7, #16]

    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 8008280:	68fb      	ldr	r3, [r7, #12]
 8008282:	697a      	ldr	r2, [r7, #20]
 8008284:	609a      	str	r2, [r3, #8]
    Device->SDTR[FMC_SDRAM_BANK2] = tmpr2;
 8008286:	68fb      	ldr	r3, [r7, #12]
 8008288:	693a      	ldr	r2, [r7, #16]
 800828a:	60da      	str	r2, [r3, #12]
  }
  
  return HAL_OK;
 800828c:	2300      	movs	r3, #0
}
 800828e:	4618      	mov	r0, r3
 8008290:	371c      	adds	r7, #28
 8008292:	46bd      	mov	sp, r7
 8008294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008298:	4770      	bx	lr
 800829a:	bf00      	nop
 800829c:	ff0f0fff 	.word	0xff0f0fff

080082a0 <FMC_SDRAM_SendCommand>:
  * @param  Timing Pointer to SDRAM Timing structure
  * @param  Timeout Timeout wait value
  * @retval HAL state
  */  
HAL_StatusTypeDef FMC_SDRAM_SendCommand(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 80082a0:	b480      	push	{r7}
 80082a2:	b087      	sub	sp, #28
 80082a4:	af00      	add	r7, sp, #0
 80082a6:	60f8      	str	r0, [r7, #12]
 80082a8:	60b9      	str	r1, [r7, #8]
 80082aa:	607a      	str	r2, [r7, #4]
  __IO uint32_t tmpr = 0;
 80082ac:	2300      	movs	r3, #0
 80082ae:	617b      	str	r3, [r7, #20]
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));  

  /* Set command register */
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 80082b0:	68bb      	ldr	r3, [r7, #8]
 80082b2:	681a      	ldr	r2, [r3, #0]
                    (Command->CommandTarget)                |\
 80082b4:	68bb      	ldr	r3, [r7, #8]
 80082b6:	685b      	ldr	r3, [r3, #4]
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 80082b8:	431a      	orrs	r2, r3
                    (((Command->AutoRefreshNumber)-1) << 5) |\
 80082ba:	68bb      	ldr	r3, [r7, #8]
 80082bc:	689b      	ldr	r3, [r3, #8]
 80082be:	3b01      	subs	r3, #1
 80082c0:	015b      	lsls	r3, r3, #5
                    (Command->CommandTarget)                |\
 80082c2:	431a      	orrs	r2, r3
                    ((Command->ModeRegisterDefinition) << 9)
 80082c4:	68bb      	ldr	r3, [r7, #8]
 80082c6:	68db      	ldr	r3, [r3, #12]
 80082c8:	025b      	lsls	r3, r3, #9
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 80082ca:	4313      	orrs	r3, r2
 80082cc:	617b      	str	r3, [r7, #20]
                    );
    
  Device->SDCMR = tmpr;
 80082ce:	697a      	ldr	r2, [r7, #20]
 80082d0:	68fb      	ldr	r3, [r7, #12]
 80082d2:	611a      	str	r2, [r3, #16]
  
  return HAL_OK;  
 80082d4:	2300      	movs	r3, #0
}
 80082d6:	4618      	mov	r0, r3
 80082d8:	371c      	adds	r7, #28
 80082da:	46bd      	mov	sp, r7
 80082dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082e0:	4770      	bx	lr

080082e2 <FMC_SDRAM_ProgramRefreshRate>:
  * @param  Device Pointer to SDRAM device instance  
  * @param  RefreshRate The SDRAM refresh rate value.       
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_ProgramRefreshRate(FMC_SDRAM_TypeDef *Device, uint32_t RefreshRate)
{
 80082e2:	b480      	push	{r7}
 80082e4:	b083      	sub	sp, #12
 80082e6:	af00      	add	r7, sp, #0
 80082e8:	6078      	str	r0, [r7, #4]
 80082ea:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_REFRESH_RATE(RefreshRate));
  
  /* Set the refresh rate in command register */
  Device->SDRTR |= (RefreshRate<<1);
 80082ec:	687b      	ldr	r3, [r7, #4]
 80082ee:	695a      	ldr	r2, [r3, #20]
 80082f0:	683b      	ldr	r3, [r7, #0]
 80082f2:	005b      	lsls	r3, r3, #1
 80082f4:	431a      	orrs	r2, r3
 80082f6:	687b      	ldr	r3, [r7, #4]
 80082f8:	615a      	str	r2, [r3, #20]
  
  return HAL_OK;   
 80082fa:	2300      	movs	r3, #0
}
 80082fc:	4618      	mov	r0, r3
 80082fe:	370c      	adds	r7, #12
 8008300:	46bd      	mov	sp, r7
 8008302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008306:	4770      	bx	lr

08008308 <SCB_EnableICache>:
{
 8008308:	b480      	push	{r7}
 800830a:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__attribute__((always_inline)) __STATIC_INLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 800830c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8008310:	f3bf 8f6f 	isb	sy
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8008314:	4b09      	ldr	r3, [pc, #36]	; (800833c <SCB_EnableICache+0x34>)
 8008316:	2200      	movs	r2, #0
 8008318:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 800831c:	4a07      	ldr	r2, [pc, #28]	; (800833c <SCB_EnableICache+0x34>)
 800831e:	4b07      	ldr	r3, [pc, #28]	; (800833c <SCB_EnableICache+0x34>)
 8008320:	695b      	ldr	r3, [r3, #20]
 8008322:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008326:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8008328:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 800832c:	f3bf 8f6f 	isb	sy
}
 8008330:	bf00      	nop
 8008332:	46bd      	mov	sp, r7
 8008334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008338:	4770      	bx	lr
 800833a:	bf00      	nop
 800833c:	e000ed00 	.word	0xe000ed00

08008340 <SCB_EnableDCache>:
{
 8008340:	b480      	push	{r7}
 8008342:	b085      	sub	sp, #20
 8008344:	af00      	add	r7, sp, #0
    SCB->CSSELR = (0U << 1U) | 0U;          /* Level 1 data cache */
 8008346:	4b1d      	ldr	r3, [pc, #116]	; (80083bc <SCB_EnableDCache+0x7c>)
 8008348:	2200      	movs	r2, #0
 800834a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 800834e:	f3bf 8f4f 	dsb	sy
    ccsidr = SCB->CCSIDR;
 8008352:	4b1a      	ldr	r3, [pc, #104]	; (80083bc <SCB_EnableDCache+0x7c>)
 8008354:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008358:	607b      	str	r3, [r7, #4]
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 800835a:	687b      	ldr	r3, [r7, #4]
 800835c:	0b5b      	lsrs	r3, r3, #13
 800835e:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8008362:	60fb      	str	r3, [r7, #12]
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8008364:	687b      	ldr	r3, [r7, #4]
 8008366:	08db      	lsrs	r3, r3, #3
 8008368:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800836c:	60bb      	str	r3, [r7, #8]
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 800836e:	4913      	ldr	r1, [pc, #76]	; (80083bc <SCB_EnableDCache+0x7c>)
 8008370:	68fb      	ldr	r3, [r7, #12]
 8008372:	015a      	lsls	r2, r3, #5
 8008374:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 8008378:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 800837a:	68ba      	ldr	r2, [r7, #8]
 800837c:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 800837e:	4313      	orrs	r3, r2
 8008380:	f8c1 3260 	str.w	r3, [r1, #608]	; 0x260
      } while (ways--);
 8008384:	68bb      	ldr	r3, [r7, #8]
 8008386:	1e5a      	subs	r2, r3, #1
 8008388:	60ba      	str	r2, [r7, #8]
 800838a:	2b00      	cmp	r3, #0
 800838c:	d1ef      	bne.n	800836e <SCB_EnableDCache+0x2e>
    } while(sets--);
 800838e:	68fb      	ldr	r3, [r7, #12]
 8008390:	1e5a      	subs	r2, r3, #1
 8008392:	60fa      	str	r2, [r7, #12]
 8008394:	2b00      	cmp	r3, #0
 8008396:	d1e5      	bne.n	8008364 <SCB_EnableDCache+0x24>
 8008398:	f3bf 8f4f 	dsb	sy
    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 800839c:	4a07      	ldr	r2, [pc, #28]	; (80083bc <SCB_EnableDCache+0x7c>)
 800839e:	4b07      	ldr	r3, [pc, #28]	; (80083bc <SCB_EnableDCache+0x7c>)
 80083a0:	695b      	ldr	r3, [r3, #20]
 80083a2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80083a6:	6153      	str	r3, [r2, #20]
 80083a8:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80083ac:	f3bf 8f6f 	isb	sy
}
 80083b0:	bf00      	nop
 80083b2:	3714      	adds	r7, #20
 80083b4:	46bd      	mov	sp, r7
 80083b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083ba:	4770      	bx	lr
 80083bc:	e000ed00 	.word	0xe000ed00

080083c0 <led1>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);

TS_StateTypeDef TS_State;
GPIO_InitTypeDef GPIO_InitStruct;

void led1(float duty){
 80083c0:	b590      	push	{r4, r7, lr}
 80083c2:	b083      	sub	sp, #12
 80083c4:	af00      	add	r7, sp, #0
 80083c6:	ed87 0a01 	vstr	s0, [r7, #4]
    TIM1->CCR1=(int)(duty*65535.0);
 80083ca:	4c0d      	ldr	r4, [pc, #52]	; (8008400 <led1+0x40>)
 80083cc:	6878      	ldr	r0, [r7, #4]
 80083ce:	f7f8 f87f 	bl	80004d0 <__aeabi_f2d>
 80083d2:	a309      	add	r3, pc, #36	; (adr r3, 80083f8 <led1+0x38>)
 80083d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80083d8:	f7f8 f8ce 	bl	8000578 <__aeabi_dmul>
 80083dc:	4602      	mov	r2, r0
 80083de:	460b      	mov	r3, r1
 80083e0:	4610      	mov	r0, r2
 80083e2:	4619      	mov	r1, r3
 80083e4:	f7f8 fada 	bl	800099c <__aeabi_d2iz>
 80083e8:	4603      	mov	r3, r0
 80083ea:	6363      	str	r3, [r4, #52]	; 0x34
}
 80083ec:	bf00      	nop
 80083ee:	370c      	adds	r7, #12
 80083f0:	46bd      	mov	sp, r7
 80083f2:	bd90      	pop	{r4, r7, pc}
 80083f4:	f3af 8000 	nop.w
 80083f8:	00000000 	.word	0x00000000
 80083fc:	40efffe0 	.word	0x40efffe0
 8008400:	40010000 	.word	0x40010000
 8008404:	00000000 	.word	0x00000000

08008408 <led2>:
void led2(float duty){
 8008408:	b590      	push	{r4, r7, lr}
 800840a:	b083      	sub	sp, #12
 800840c:	af00      	add	r7, sp, #0
 800840e:	ed87 0a01 	vstr	s0, [r7, #4]
    TIM2->CCR1=(int)(duty*65535.0);
 8008412:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
 8008416:	6878      	ldr	r0, [r7, #4]
 8008418:	f7f8 f85a 	bl	80004d0 <__aeabi_f2d>
 800841c:	a308      	add	r3, pc, #32	; (adr r3, 8008440 <led2+0x38>)
 800841e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008422:	f7f8 f8a9 	bl	8000578 <__aeabi_dmul>
 8008426:	4602      	mov	r2, r0
 8008428:	460b      	mov	r3, r1
 800842a:	4610      	mov	r0, r2
 800842c:	4619      	mov	r1, r3
 800842e:	f7f8 fab5 	bl	800099c <__aeabi_d2iz>
 8008432:	4603      	mov	r3, r0
 8008434:	6363      	str	r3, [r4, #52]	; 0x34
}
 8008436:	bf00      	nop
 8008438:	370c      	adds	r7, #12
 800843a:	46bd      	mov	sp, r7
 800843c:	bd90      	pop	{r4, r7, pc}
 800843e:	bf00      	nop
 8008440:	00000000 	.word	0x00000000
 8008444:	40efffe0 	.word	0x40efffe0

08008448 <set_sensor_input>:

void set_sensor_input(void)
{
 8008448:	b580      	push	{r7, lr}
 800844a:	af00      	add	r7, sp, #0
	GPIO_InitStruct.Pin = GPIO_PIN_2;
 800844c:	4b07      	ldr	r3, [pc, #28]	; (800846c <set_sensor_input+0x24>)
 800844e:	2204      	movs	r2, #4
 8008450:	601a      	str	r2, [r3, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8008452:	4b06      	ldr	r3, [pc, #24]	; (800846c <set_sensor_input+0x24>)
 8008454:	2200      	movs	r2, #0
 8008456:	605a      	str	r2, [r3, #4]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008458:	4b04      	ldr	r3, [pc, #16]	; (800846c <set_sensor_input+0x24>)
 800845a:	2200      	movs	r2, #0
 800845c:	609a      	str	r2, [r3, #8]
	HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 800845e:	4903      	ldr	r1, [pc, #12]	; (800846c <set_sensor_input+0x24>)
 8008460:	4803      	ldr	r0, [pc, #12]	; (8008470 <set_sensor_input+0x28>)
 8008462:	f7fb fd61 	bl	8003f28 <HAL_GPIO_Init>
}
 8008466:	bf00      	nop
 8008468:	bd80      	pop	{r7, pc}
 800846a:	bf00      	nop
 800846c:	2002ce20 	.word	0x2002ce20
 8008470:	40022000 	.word	0x40022000

08008474 <set_sensor_output>:

void set_sensor_output(void)
{
 8008474:	b580      	push	{r7, lr}
 8008476:	af00      	add	r7, sp, #0
	GPIO_InitStruct.Pin = GPIO_PIN_2;
 8008478:	4b07      	ldr	r3, [pc, #28]	; (8008498 <set_sensor_output+0x24>)
 800847a:	2204      	movs	r2, #4
 800847c:	601a      	str	r2, [r3, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800847e:	4b06      	ldr	r3, [pc, #24]	; (8008498 <set_sensor_output+0x24>)
 8008480:	2201      	movs	r2, #1
 8008482:	605a      	str	r2, [r3, #4]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008484:	4b04      	ldr	r3, [pc, #16]	; (8008498 <set_sensor_output+0x24>)
 8008486:	2200      	movs	r2, #0
 8008488:	60da      	str	r2, [r3, #12]
	HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 800848a:	4903      	ldr	r1, [pc, #12]	; (8008498 <set_sensor_output+0x24>)
 800848c:	4803      	ldr	r0, [pc, #12]	; (800849c <set_sensor_output+0x28>)
 800848e:	f7fb fd4b 	bl	8003f28 <HAL_GPIO_Init>
}
 8008492:	bf00      	nop
 8008494:	bd80      	pop	{r7, pc}
 8008496:	bf00      	nop
 8008498:	2002ce20 	.word	0x2002ce20
 800849c:	40022000 	.word	0x40022000

080084a0 <delay_us>:

extern TIM_HandleTypeDef htim3;

void delay_us (uint32_t delay)
{
 80084a0:	b480      	push	{r7}
 80084a2:	b083      	sub	sp, #12
 80084a4:	af00      	add	r7, sp, #0
 80084a6:	6078      	str	r0, [r7, #4]
	__HAL_TIM_SET_COUNTER (&htim3, 0);
 80084a8:	4b08      	ldr	r3, [pc, #32]	; (80084cc <delay_us+0x2c>)
 80084aa:	681b      	ldr	r3, [r3, #0]
 80084ac:	2200      	movs	r2, #0
 80084ae:	625a      	str	r2, [r3, #36]	; 0x24
	while (__HAL_TIM_GET_COUNTER(&htim3) < delay);
 80084b0:	bf00      	nop
 80084b2:	4b06      	ldr	r3, [pc, #24]	; (80084cc <delay_us+0x2c>)
 80084b4:	681b      	ldr	r3, [r3, #0]
 80084b6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80084b8:	687b      	ldr	r3, [r7, #4]
 80084ba:	429a      	cmp	r2, r3
 80084bc:	d3f9      	bcc.n	80084b2 <delay_us+0x12>
}
 80084be:	bf00      	nop
 80084c0:	370c      	adds	r7, #12
 80084c2:	46bd      	mov	sp, r7
 80084c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084c8:	4770      	bx	lr
 80084ca:	bf00      	nop
 80084cc:	2002ccc4 	.word	0x2002ccc4

080084d0 <sensor_start>:


void sensor_start (void)
{
 80084d0:	b580      	push	{r7, lr}
 80084d2:	af00      	add	r7, sp, #0
set_sensor_output (); // set the pin as output
 80084d4:	f7ff ffce 	bl	8008474 <set_sensor_output>
HAL_GPIO_WritePin (GPIOI, GPIO_PIN_2, 0); // pull the pin low
 80084d8:	2200      	movs	r2, #0
 80084da:	2104      	movs	r1, #4
 80084dc:	4805      	ldr	r0, [pc, #20]	; (80084f4 <sensor_start+0x24>)
 80084de:	f7fb fee5 	bl	80042ac <HAL_GPIO_WritePin>
delay_us (18000); // wait for 18ms
 80084e2:	f244 6050 	movw	r0, #18000	; 0x4650
 80084e6:	f7ff ffdb 	bl	80084a0 <delay_us>
set_sensor_input (); // set as input
 80084ea:	f7ff ffad 	bl	8008448 <set_sensor_input>
}
 80084ee:	bf00      	nop
 80084f0:	bd80      	pop	{r7, pc}
 80084f2:	bf00      	nop
 80084f4:	40022000 	.word	0x40022000

080084f8 <check_response>:

void check_response (void)
{
 80084f8:	b580      	push	{r7, lr}
 80084fa:	af00      	add	r7, sp, #0
 delay_us (40);
 80084fc:	2028      	movs	r0, #40	; 0x28
 80084fe:	f7ff ffcf 	bl	80084a0 <delay_us>
 if (!(HAL_GPIO_ReadPin (GPIOI, GPIO_PIN_2))) // if the pin is low
 8008502:	2104      	movs	r1, #4
 8008504:	480e      	ldr	r0, [pc, #56]	; (8008540 <check_response+0x48>)
 8008506:	f7fb feb9 	bl	800427c <HAL_GPIO_ReadPin>
 800850a:	4603      	mov	r3, r0
 800850c:	2b00      	cmp	r3, #0
 800850e:	d10c      	bne.n	800852a <check_response+0x32>
 {
  delay_us (80); // wait for 80us
 8008510:	2050      	movs	r0, #80	; 0x50
 8008512:	f7ff ffc5 	bl	80084a0 <delay_us>
  if ((HAL_GPIO_ReadPin (GPIOI, GPIO_PIN_2)))
 8008516:	2104      	movs	r1, #4
 8008518:	4809      	ldr	r0, [pc, #36]	; (8008540 <check_response+0x48>)
 800851a:	f7fb feaf 	bl	800427c <HAL_GPIO_ReadPin>
 800851e:	4603      	mov	r3, r0
 8008520:	2b00      	cmp	r3, #0
 8008522:	d002      	beq.n	800852a <check_response+0x32>
    check = 1; // now if the pin is high response = ok i.e. check =1
 8008524:	4b07      	ldr	r3, [pc, #28]	; (8008544 <check_response+0x4c>)
 8008526:	2201      	movs	r2, #1
 8008528:	701a      	strb	r2, [r3, #0]
 }
 while ((HAL_GPIO_ReadPin (GPIOI, GPIO_PIN_2))); // wait for the pin to go low
 800852a:	bf00      	nop
 800852c:	2104      	movs	r1, #4
 800852e:	4804      	ldr	r0, [pc, #16]	; (8008540 <check_response+0x48>)
 8008530:	f7fb fea4 	bl	800427c <HAL_GPIO_ReadPin>
 8008534:	4603      	mov	r3, r0
 8008536:	2b00      	cmp	r3, #0
 8008538:	d1f8      	bne.n	800852c <check_response+0x34>
}
 800853a:	bf00      	nop
 800853c:	bd80      	pop	{r7, pc}
 800853e:	bf00      	nop
 8008540:	40022000 	.word	0x40022000
 8008544:	2002cb98 	.word	0x2002cb98

08008548 <read_data>:

uint8_t read_data (void)
{
 8008548:	b580      	push	{r7, lr}
 800854a:	b082      	sub	sp, #8
 800854c:	af00      	add	r7, sp, #0
 uint8_t i,j;
 for (j=0;j<8;j++)
 800854e:	2300      	movs	r3, #0
 8008550:	71bb      	strb	r3, [r7, #6]
 8008552:	e037      	b.n	80085c4 <read_data+0x7c>
 {
  while (!(HAL_GPIO_ReadPin (GPIOI, GPIO_PIN_2))); // wait for the pin to go high
 8008554:	bf00      	nop
 8008556:	2104      	movs	r1, #4
 8008558:	481e      	ldr	r0, [pc, #120]	; (80085d4 <read_data+0x8c>)
 800855a:	f7fb fe8f 	bl	800427c <HAL_GPIO_ReadPin>
 800855e:	4603      	mov	r3, r0
 8008560:	2b00      	cmp	r3, #0
 8008562:	d0f8      	beq.n	8008556 <read_data+0xe>
  delay_us(40); // wait for 40 us
 8008564:	2028      	movs	r0, #40	; 0x28
 8008566:	f7ff ff9b 	bl	80084a0 <delay_us>
  if ((HAL_GPIO_ReadPin (GPIOI, GPIO_PIN_2)) == 0) // if the pin is low
 800856a:	2104      	movs	r1, #4
 800856c:	4819      	ldr	r0, [pc, #100]	; (80085d4 <read_data+0x8c>)
 800856e:	f7fb fe85 	bl	800427c <HAL_GPIO_ReadPin>
 8008572:	4603      	mov	r3, r0
 8008574:	2b00      	cmp	r3, #0
 8008576:	d10e      	bne.n	8008596 <read_data+0x4e>
  {
    i&= ~(1<<(7-j)); // write 0
 8008578:	79bb      	ldrb	r3, [r7, #6]
 800857a:	f1c3 0307 	rsb	r3, r3, #7
 800857e:	2201      	movs	r2, #1
 8008580:	fa02 f303 	lsl.w	r3, r2, r3
 8008584:	b25b      	sxtb	r3, r3
 8008586:	43db      	mvns	r3, r3
 8008588:	b25a      	sxtb	r2, r3
 800858a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800858e:	4013      	ands	r3, r2
 8008590:	b25b      	sxtb	r3, r3
 8008592:	71fb      	strb	r3, [r7, #7]
 8008594:	e00b      	b.n	80085ae <read_data+0x66>
   }
  else i|= (1<<(7-j)); // if the pin is high, write 1
 8008596:	79bb      	ldrb	r3, [r7, #6]
 8008598:	f1c3 0307 	rsb	r3, r3, #7
 800859c:	2201      	movs	r2, #1
 800859e:	fa02 f303 	lsl.w	r3, r2, r3
 80085a2:	b25a      	sxtb	r2, r3
 80085a4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80085a8:	4313      	orrs	r3, r2
 80085aa:	b25b      	sxtb	r3, r3
 80085ac:	71fb      	strb	r3, [r7, #7]
  while ((HAL_GPIO_ReadPin (GPIOI, GPIO_PIN_2))); // wait for the pin to go low
 80085ae:	bf00      	nop
 80085b0:	2104      	movs	r1, #4
 80085b2:	4808      	ldr	r0, [pc, #32]	; (80085d4 <read_data+0x8c>)
 80085b4:	f7fb fe62 	bl	800427c <HAL_GPIO_ReadPin>
 80085b8:	4603      	mov	r3, r0
 80085ba:	2b00      	cmp	r3, #0
 80085bc:	d1f8      	bne.n	80085b0 <read_data+0x68>
 for (j=0;j<8;j++)
 80085be:	79bb      	ldrb	r3, [r7, #6]
 80085c0:	3301      	adds	r3, #1
 80085c2:	71bb      	strb	r3, [r7, #6]
 80085c4:	79bb      	ldrb	r3, [r7, #6]
 80085c6:	2b07      	cmp	r3, #7
 80085c8:	d9c4      	bls.n	8008554 <read_data+0xc>
 }
 return i;
 80085ca:	79fb      	ldrb	r3, [r7, #7]
}
 80085cc:	4618      	mov	r0, r3
 80085ce:	3708      	adds	r7, #8
 80085d0:	46bd      	mov	sp, r7
 80085d2:	bd80      	pop	{r7, pc}
 80085d4:	40022000 	.word	0x40022000

080085d8 <DisplayButton1.11126>:
  y[1]=30;
  y[2]=118;
  y[3]=118;

  void DisplayButton1(uint16_t X, uint16_t Y, uint16_t R, uint32_t colour)
  {
 80085d8:	b580      	push	{r7, lr}
 80085da:	b084      	sub	sp, #16
 80085dc:	af00      	add	r7, sp, #0
 80085de:	607b      	str	r3, [r7, #4]
 80085e0:	4603      	mov	r3, r0
 80085e2:	81fb      	strh	r3, [r7, #14]
 80085e4:	460b      	mov	r3, r1
 80085e6:	81bb      	strh	r3, [r7, #12]
 80085e8:	4613      	mov	r3, r2
 80085ea:	817b      	strh	r3, [r7, #10]
 80085ec:	f8c7 c000 	str.w	ip, [r7]
	BSP_LCD_SetTextColor(colour);
 80085f0:	6878      	ldr	r0, [r7, #4]
 80085f2:	f7f9 f8d1 	bl	8001798 <BSP_LCD_SetTextColor>
	BSP_LCD_FillCircle(X,Y,R);
 80085f6:	897a      	ldrh	r2, [r7, #10]
 80085f8:	89b9      	ldrh	r1, [r7, #12]
 80085fa:	89fb      	ldrh	r3, [r7, #14]
 80085fc:	4618      	mov	r0, r3
 80085fe:	f7f9 fdb1 	bl	8002164 <BSP_LCD_FillCircle>
  }
 8008602:	bf00      	nop
 8008604:	3710      	adds	r7, #16
 8008606:	46bd      	mov	sp, r7
 8008608:	bd80      	pop	{r7, pc}
	...

0800860c <main>:
{
 800860c:	b590      	push	{r4, r7, lr}
 800860e:	b083      	sub	sp, #12
 8008610:	af00      	add	r7, sp, #0
int main(void)
 8008612:	f107 0318 	add.w	r3, r7, #24
 8008616:	603b      	str	r3, [r7, #0]
  SCB_EnableICache();
 8008618:	f7ff fe76 	bl	8008308 <SCB_EnableICache>
  SCB_EnableDCache();
 800861c:	f7ff fe90 	bl	8008340 <SCB_EnableDCache>
  HAL_Init();
 8008620:	f7fa fcb2 	bl	8002f88 <HAL_Init>
  SystemClock_Config();
 8008624:	f000 fd3c 	bl	80090a0 <SystemClock_Config>
  MX_GPIO_Init();
 8008628:	f001 f8ac 	bl	8009784 <MX_GPIO_Init>
  MX_CRC_Init();
 800862c:	f000 fde0 	bl	80091f0 <MX_CRC_Init>
  MX_TIM1_Init();
 8008630:	f000 fec4 	bl	80093bc <MX_TIM1_Init>
  MX_TIM2_Init();
 8008634:	f000 ff66 	bl	8009504 <MX_TIM2_Init>
  MX_USART1_UART_Init();
 8008638:	f001 f824 	bl	8009684 <MX_USART1_UART_Init>
  MX_DMA2D_Init();
 800863c:	f000 fe00 	bl	8009240 <MX_DMA2D_Init>
  MX_FMC_Init();
 8008640:	f001 f854 	bl	80096ec <MX_FMC_Init>
  MX_LTDC_Init();
 8008644:	f000 fe36 	bl	80092b4 <MX_LTDC_Init>
  MX_TIM3_Init();
 8008648:	f000 ffce 	bl	80095e8 <MX_TIM3_Init>
  HAL_TIM_Base_Start(&htim3);
 800864c:	48a3      	ldr	r0, [pc, #652]	; (80088dc <main+0x2d0>)
 800864e:	f7fe f88d 	bl	800676c <HAL_TIM_Base_Start>
  HAL_TIM_PWM_Start(&htim1,TIM_CHANNEL_1);
 8008652:	2100      	movs	r1, #0
 8008654:	48a2      	ldr	r0, [pc, #648]	; (80088e0 <main+0x2d4>)
 8008656:	f7fe f8f5 	bl	8006844 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2,TIM_CHANNEL_1);
 800865a:	2100      	movs	r1, #0
 800865c:	48a1      	ldr	r0, [pc, #644]	; (80088e4 <main+0x2d8>)
 800865e:	f7fe f8f1 	bl	8006844 <HAL_TIM_PWM_Start>
  BSP_LCD_Init();
 8008662:	f7f8 ff91 	bl	8001588 <BSP_LCD_Init>
  BSP_LCD_LayerDefaultInit(0, LCD_FB_START_ADDRESS);
 8008666:	f04f 4140 	mov.w	r1, #3221225472	; 0xc0000000
 800866a:	2000      	movs	r0, #0
 800866c:	f7f9 f824 	bl	80016b8 <BSP_LCD_LayerDefaultInit>
  BSP_LCD_LayerDefaultInit(1, LCD_FB_START_ADDRESS);
 8008670:	f04f 4140 	mov.w	r1, #3221225472	; 0xc0000000
 8008674:	2001      	movs	r0, #1
 8008676:	f7f9 f81f 	bl	80016b8 <BSP_LCD_LayerDefaultInit>
  BSP_LCD_DisplayOn();
 800867a:	f7f9 fe13 	bl	80022a4 <BSP_LCD_DisplayOn>
  BSP_LCD_SelectLayer(0);
 800867e:	2000      	movs	r0, #0
 8008680:	f7f9 f87a 	bl	8001778 <BSP_LCD_SelectLayer>
  BSP_LCD_Clear(LCD_COLOR_BLACK);
 8008684:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 8008688:	f7f9 f8e8 	bl	800185c <BSP_LCD_Clear>
  BSP_LCD_SelectLayer(1);
 800868c:	2001      	movs	r0, #1
 800868e:	f7f9 f873 	bl	8001778 <BSP_LCD_SelectLayer>
  BSP_LCD_Clear(LCD_COLOR_BLACK);
 8008692:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 8008696:	f7f9 f8e1 	bl	800185c <BSP_LCD_Clear>
  BSP_LCD_SetFont(&LCD_DEFAULT_FONT);
 800869a:	4893      	ldr	r0, [pc, #588]	; (80088e8 <main+0x2dc>)
 800869c:	f7f9 f8ae 	bl	80017fc <BSP_LCD_SetFont>
  if( BSP_TS_Init(BSP_LCD_GetXSize(), BSP_LCD_GetYSize())!=TS_OK)
 80086a0:	f7f8 ffe2 	bl	8001668 <BSP_LCD_GetXSize>
 80086a4:	4603      	mov	r3, r0
 80086a6:	b29c      	uxth	r4, r3
 80086a8:	f7f8 fff2 	bl	8001690 <BSP_LCD_GetYSize>
 80086ac:	4603      	mov	r3, r0
 80086ae:	b29b      	uxth	r3, r3
 80086b0:	4619      	mov	r1, r3
 80086b2:	4620      	mov	r0, r4
 80086b4:	f7fa fa08 	bl	8002ac8 <BSP_TS_Init>
 80086b8:	4603      	mov	r3, r0
 80086ba:	2b00      	cmp	r3, #0
 80086bc:	d003      	beq.n	80086c6 <main+0xba>
    Error_Handler();
 80086be:	21bc      	movs	r1, #188	; 0xbc
 80086c0:	488a      	ldr	r0, [pc, #552]	; (80088ec <main+0x2e0>)
 80086c2:	f001 f95f 	bl	8009984 <_Error_Handler>
  x[0]=150;
 80086c6:	4b8a      	ldr	r3, [pc, #552]	; (80088f0 <main+0x2e4>)
 80086c8:	2296      	movs	r2, #150	; 0x96
 80086ca:	801a      	strh	r2, [r3, #0]
  x[1]=233;
 80086cc:	4b88      	ldr	r3, [pc, #544]	; (80088f0 <main+0x2e4>)
 80086ce:	22e9      	movs	r2, #233	; 0xe9
 80086d0:	805a      	strh	r2, [r3, #2]
  x[2]=100;
 80086d2:	4b87      	ldr	r3, [pc, #540]	; (80088f0 <main+0x2e4>)
 80086d4:	2264      	movs	r2, #100	; 0x64
 80086d6:	809a      	strh	r2, [r3, #4]
  x[3]=300;
 80086d8:	4b85      	ldr	r3, [pc, #532]	; (80088f0 <main+0x2e4>)
 80086da:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80086de:	80da      	strh	r2, [r3, #6]
  y[0]=212;
 80086e0:	4b84      	ldr	r3, [pc, #528]	; (80088f4 <main+0x2e8>)
 80086e2:	22d4      	movs	r2, #212	; 0xd4
 80086e4:	801a      	strh	r2, [r3, #0]
  y[1]=30;
 80086e6:	4b83      	ldr	r3, [pc, #524]	; (80088f4 <main+0x2e8>)
 80086e8:	221e      	movs	r2, #30
 80086ea:	805a      	strh	r2, [r3, #2]
  y[2]=118;
 80086ec:	4b81      	ldr	r3, [pc, #516]	; (80088f4 <main+0x2e8>)
 80086ee:	2276      	movs	r2, #118	; 0x76
 80086f0:	809a      	strh	r2, [r3, #4]
  y[3]=118;
 80086f2:	4b80      	ldr	r3, [pc, #512]	; (80088f4 <main+0x2e8>)
 80086f4:	2276      	movs	r2, #118	; 0x76
 80086f6:	80da      	strh	r2, [r3, #6]
		  BSP_LCD_DisplayStringAt(350, 165, (uint8_t *)"%", LEFT_MODE);
		  HAL_Delay(500);
	  }
   }

   welcome();
 80086f8:	463b      	mov	r3, r7
 80086fa:	469c      	mov	ip, r3
 80086fc:	f000 faac 	bl	8008c58 <welcome.11128>
* while loop
\*============================================================================*/
while (1)
{

	BSP_TS_GetState(&TS_State);
 8008700:	487d      	ldr	r0, [pc, #500]	; (80088f8 <main+0x2ec>)
 8008702:	f7fa fa21 	bl	8002b48 <BSP_TS_GetState>

	if (TS_State.touchDetected)
 8008706:	4b7c      	ldr	r3, [pc, #496]	; (80088f8 <main+0x2ec>)
 8008708:	781b      	ldrb	r3, [r3, #0]
 800870a:	2b00      	cmp	r3, #0
 800870c:	d0f8      	beq.n	8008700 <main+0xf4>
	{

		DrawHome();
 800870e:	463b      	mov	r3, r7
 8008710:	469c      	mov	ip, r3
 8008712:	f000 fad9 	bl	8008cc8 <DrawHome.11130>
		sensor();
 8008716:	463b      	mov	r3, r7
 8008718:	469c      	mov	ip, r3
 800871a:	f000 fbf9 	bl	8008f10 <sensor.11136>
		back1=1;
 800871e:	4b77      	ldr	r3, [pc, #476]	; (80088fc <main+0x2f0>)
 8008720:	2201      	movs	r2, #1
 8008722:	701a      	strb	r2, [r3, #0]
		back2=1;
 8008724:	4b76      	ldr	r3, [pc, #472]	; (8008900 <main+0x2f4>)
 8008726:	2201      	movs	r2, #1
 8008728:	701a      	strb	r2, [r3, #0]

      		if(TS_State.touchX[0]>55&&TS_State.touchX[0]<235&&TS_State.touchY[0]>60&&TS_State.touchY[0]<130)
 800872a:	4b73      	ldr	r3, [pc, #460]	; (80088f8 <main+0x2ec>)
 800872c:	885b      	ldrh	r3, [r3, #2]
 800872e:	2b37      	cmp	r3, #55	; 0x37
 8008730:	f240 8136 	bls.w	80089a0 <main+0x394>
 8008734:	4b70      	ldr	r3, [pc, #448]	; (80088f8 <main+0x2ec>)
 8008736:	885b      	ldrh	r3, [r3, #2]
 8008738:	2bea      	cmp	r3, #234	; 0xea
 800873a:	f200 8131 	bhi.w	80089a0 <main+0x394>
 800873e:	4b6e      	ldr	r3, [pc, #440]	; (80088f8 <main+0x2ec>)
 8008740:	899b      	ldrh	r3, [r3, #12]
 8008742:	2b3c      	cmp	r3, #60	; 0x3c
 8008744:	f240 812c 	bls.w	80089a0 <main+0x394>
 8008748:	4b6b      	ldr	r3, [pc, #428]	; (80088f8 <main+0x2ec>)
 800874a:	899b      	ldrh	r3, [r3, #12]
 800874c:	2b81      	cmp	r3, #129	; 0x81
 800874e:	f200 8127 	bhi.w	80089a0 <main+0x394>
      		{
      			DrawLed();
 8008752:	463b      	mov	r3, r7
 8008754:	469c      	mov	ip, r3
 8008756:	f000 fb69 	bl	8008e2c <DrawLed.11134>

      			while(back1==1)
 800875a:	e11c      	b.n	8008996 <main+0x38a>
      			{
      				BSP_TS_GetState(&TS_State);
 800875c:	4866      	ldr	r0, [pc, #408]	; (80088f8 <main+0x2ec>)
 800875e:	f7fa f9f3 	bl	8002b48 <BSP_TS_GetState>
      				count2++;
 8008762:	4b68      	ldr	r3, [pc, #416]	; (8008904 <main+0x2f8>)
 8008764:	781b      	ldrb	r3, [r3, #0]
 8008766:	3301      	adds	r3, #1
 8008768:	b2da      	uxtb	r2, r3
 800876a:	4b66      	ldr	r3, [pc, #408]	; (8008904 <main+0x2f8>)
 800876c:	701a      	strb	r2, [r3, #0]
      					if(count2>30)
 800876e:	4b65      	ldr	r3, [pc, #404]	; (8008904 <main+0x2f8>)
 8008770:	781b      	ldrb	r3, [r3, #0]
 8008772:	2b1e      	cmp	r3, #30
 8008774:	f240 810f 	bls.w	8008996 <main+0x38a>
      					{
      						if (TS_State.touchDetected)
 8008778:	4b5f      	ldr	r3, [pc, #380]	; (80088f8 <main+0x2ec>)
 800877a:	781b      	ldrb	r3, [r3, #0]
 800877c:	2b00      	cmp	r3, #0
 800877e:	f000 8107 	beq.w	8008990 <main+0x384>
      						{
      							if(led==1)led1(((float)(x[0]-150)/190.0));
 8008782:	4b61      	ldr	r3, [pc, #388]	; (8008908 <main+0x2fc>)
 8008784:	681b      	ldr	r3, [r3, #0]
 8008786:	2b01      	cmp	r3, #1
 8008788:	d10f      	bne.n	80087aa <main+0x19e>
 800878a:	4b59      	ldr	r3, [pc, #356]	; (80088f0 <main+0x2e4>)
 800878c:	881b      	ldrh	r3, [r3, #0]
 800878e:	3b96      	subs	r3, #150	; 0x96
 8008790:	ee07 3a90 	vmov	s15, r3
 8008794:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8008798:	ed9f 7a5c 	vldr	s14, [pc, #368]	; 800890c <main+0x300>
 800879c:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80087a0:	eeb0 0a66 	vmov.f32	s0, s13
 80087a4:	f7ff fe0c 	bl	80083c0 <led1>
 80087a8:	e012      	b.n	80087d0 <main+0x1c4>

      							else if(led==2)led2(((float)(x[0]-150)/190.0));
 80087aa:	4b57      	ldr	r3, [pc, #348]	; (8008908 <main+0x2fc>)
 80087ac:	681b      	ldr	r3, [r3, #0]
 80087ae:	2b02      	cmp	r3, #2
 80087b0:	d10e      	bne.n	80087d0 <main+0x1c4>
 80087b2:	4b4f      	ldr	r3, [pc, #316]	; (80088f0 <main+0x2e4>)
 80087b4:	881b      	ldrh	r3, [r3, #0]
 80087b6:	3b96      	subs	r3, #150	; 0x96
 80087b8:	ee07 3a90 	vmov	s15, r3
 80087bc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80087c0:	ed9f 7a52 	vldr	s14, [pc, #328]	; 800890c <main+0x300>
 80087c4:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80087c8:	eeb0 0a66 	vmov.f32	s0, s13
 80087cc:	f7ff fe1c 	bl	8008408 <led2>

      							if( TS_State.touchX[0]>x[0]-20&&TS_State.touchX[0]<x[0]+20&&TS_State.touchY[0]>y[0]-20&&TS_State.touchY[0]<y[0]+20)
 80087d0:	4b49      	ldr	r3, [pc, #292]	; (80088f8 <main+0x2ec>)
 80087d2:	885b      	ldrh	r3, [r3, #2]
 80087d4:	461a      	mov	r2, r3
 80087d6:	4b46      	ldr	r3, [pc, #280]	; (80088f0 <main+0x2e4>)
 80087d8:	881b      	ldrh	r3, [r3, #0]
 80087da:	3b14      	subs	r3, #20
 80087dc:	429a      	cmp	r2, r3
 80087de:	dd2e      	ble.n	800883e <main+0x232>
 80087e0:	4b45      	ldr	r3, [pc, #276]	; (80088f8 <main+0x2ec>)
 80087e2:	885b      	ldrh	r3, [r3, #2]
 80087e4:	461a      	mov	r2, r3
 80087e6:	4b42      	ldr	r3, [pc, #264]	; (80088f0 <main+0x2e4>)
 80087e8:	881b      	ldrh	r3, [r3, #0]
 80087ea:	3314      	adds	r3, #20
 80087ec:	429a      	cmp	r2, r3
 80087ee:	da26      	bge.n	800883e <main+0x232>
 80087f0:	4b41      	ldr	r3, [pc, #260]	; (80088f8 <main+0x2ec>)
 80087f2:	899b      	ldrh	r3, [r3, #12]
 80087f4:	461a      	mov	r2, r3
 80087f6:	4b3f      	ldr	r3, [pc, #252]	; (80088f4 <main+0x2e8>)
 80087f8:	881b      	ldrh	r3, [r3, #0]
 80087fa:	3b14      	subs	r3, #20
 80087fc:	429a      	cmp	r2, r3
 80087fe:	dd1e      	ble.n	800883e <main+0x232>
 8008800:	4b3d      	ldr	r3, [pc, #244]	; (80088f8 <main+0x2ec>)
 8008802:	899b      	ldrh	r3, [r3, #12]
 8008804:	461a      	mov	r2, r3
 8008806:	4b3b      	ldr	r3, [pc, #236]	; (80088f4 <main+0x2e8>)
 8008808:	881b      	ldrh	r3, [r3, #0]
 800880a:	3314      	adds	r3, #20
 800880c:	429a      	cmp	r2, r3
 800880e:	da16      	bge.n	800883e <main+0x232>
      							{
      								x[0]=TS_State.touchX[0];
 8008810:	4b39      	ldr	r3, [pc, #228]	; (80088f8 <main+0x2ec>)
 8008812:	885a      	ldrh	r2, [r3, #2]
 8008814:	4b36      	ldr	r3, [pc, #216]	; (80088f0 <main+0x2e4>)
 8008816:	801a      	strh	r2, [r3, #0]

      								if(x[0]<=150) x[0]=150;
 8008818:	4b35      	ldr	r3, [pc, #212]	; (80088f0 <main+0x2e4>)
 800881a:	881b      	ldrh	r3, [r3, #0]
 800881c:	2b96      	cmp	r3, #150	; 0x96
 800881e:	d803      	bhi.n	8008828 <main+0x21c>
 8008820:	4b33      	ldr	r3, [pc, #204]	; (80088f0 <main+0x2e4>)
 8008822:	2296      	movs	r2, #150	; 0x96
 8008824:	801a      	strh	r2, [r3, #0]
 8008826:	e0ae      	b.n	8008986 <main+0x37a>

      								else if(x[0]>=340) x[0]=340;
 8008828:	4b31      	ldr	r3, [pc, #196]	; (80088f0 <main+0x2e4>)
 800882a:	881b      	ldrh	r3, [r3, #0]
 800882c:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
 8008830:	f0c0 80a9 	bcc.w	8008986 <main+0x37a>
 8008834:	4b2e      	ldr	r3, [pc, #184]	; (80088f0 <main+0x2e4>)
 8008836:	f44f 72aa 	mov.w	r2, #340	; 0x154
 800883a:	801a      	strh	r2, [r3, #0]
      								if(x[0]<=150) x[0]=150;
 800883c:	e0a3      	b.n	8008986 <main+0x37a>
      							}

      							else if(TS_State.touchX[0]>40-25&&TS_State.touchX[0]<40+25&&TS_State.touchY[0]>40-15&&TS_State.touchY[0]<30+15)
 800883e:	4b2e      	ldr	r3, [pc, #184]	; (80088f8 <main+0x2ec>)
 8008840:	885b      	ldrh	r3, [r3, #2]
 8008842:	2b0f      	cmp	r3, #15
 8008844:	d90f      	bls.n	8008866 <main+0x25a>
 8008846:	4b2c      	ldr	r3, [pc, #176]	; (80088f8 <main+0x2ec>)
 8008848:	885b      	ldrh	r3, [r3, #2]
 800884a:	2b40      	cmp	r3, #64	; 0x40
 800884c:	d80b      	bhi.n	8008866 <main+0x25a>
 800884e:	4b2a      	ldr	r3, [pc, #168]	; (80088f8 <main+0x2ec>)
 8008850:	899b      	ldrh	r3, [r3, #12]
 8008852:	2b19      	cmp	r3, #25
 8008854:	d907      	bls.n	8008866 <main+0x25a>
 8008856:	4b28      	ldr	r3, [pc, #160]	; (80088f8 <main+0x2ec>)
 8008858:	899b      	ldrh	r3, [r3, #12]
 800885a:	2b2c      	cmp	r3, #44	; 0x2c
 800885c:	d803      	bhi.n	8008866 <main+0x25a>
      							{
      								back1=0;
 800885e:	4b27      	ldr	r3, [pc, #156]	; (80088fc <main+0x2f0>)
 8008860:	2200      	movs	r2, #0
 8008862:	701a      	strb	r2, [r3, #0]
 8008864:	e090      	b.n	8008988 <main+0x37c>
      							}

      							else if(TS_State.touchX[0]>x[2]-40&&TS_State.touchX[0]<x[2]+40&&TS_State.touchY[0]>y[2]-40&&TS_State.touchY[0]<y[2]+40)
 8008866:	4b24      	ldr	r3, [pc, #144]	; (80088f8 <main+0x2ec>)
 8008868:	885b      	ldrh	r3, [r3, #2]
 800886a:	461a      	mov	r2, r3
 800886c:	4b20      	ldr	r3, [pc, #128]	; (80088f0 <main+0x2e4>)
 800886e:	889b      	ldrh	r3, [r3, #4]
 8008870:	3b28      	subs	r3, #40	; 0x28
 8008872:	429a      	cmp	r2, r3
 8008874:	dd4c      	ble.n	8008910 <main+0x304>
 8008876:	4b20      	ldr	r3, [pc, #128]	; (80088f8 <main+0x2ec>)
 8008878:	885b      	ldrh	r3, [r3, #2]
 800887a:	461a      	mov	r2, r3
 800887c:	4b1c      	ldr	r3, [pc, #112]	; (80088f0 <main+0x2e4>)
 800887e:	889b      	ldrh	r3, [r3, #4]
 8008880:	3328      	adds	r3, #40	; 0x28
 8008882:	429a      	cmp	r2, r3
 8008884:	da44      	bge.n	8008910 <main+0x304>
 8008886:	4b1c      	ldr	r3, [pc, #112]	; (80088f8 <main+0x2ec>)
 8008888:	899b      	ldrh	r3, [r3, #12]
 800888a:	461a      	mov	r2, r3
 800888c:	4b19      	ldr	r3, [pc, #100]	; (80088f4 <main+0x2e8>)
 800888e:	889b      	ldrh	r3, [r3, #4]
 8008890:	3b28      	subs	r3, #40	; 0x28
 8008892:	429a      	cmp	r2, r3
 8008894:	dd3c      	ble.n	8008910 <main+0x304>
 8008896:	4b18      	ldr	r3, [pc, #96]	; (80088f8 <main+0x2ec>)
 8008898:	899b      	ldrh	r3, [r3, #12]
 800889a:	461a      	mov	r2, r3
 800889c:	4b15      	ldr	r3, [pc, #84]	; (80088f4 <main+0x2e8>)
 800889e:	889b      	ldrh	r3, [r3, #4]
 80088a0:	3328      	adds	r3, #40	; 0x28
 80088a2:	429a      	cmp	r2, r3
 80088a4:	da34      	bge.n	8008910 <main+0x304>
      							{
      								if(led==1) led= 0;
 80088a6:	4b18      	ldr	r3, [pc, #96]	; (8008908 <main+0x2fc>)
 80088a8:	681b      	ldr	r3, [r3, #0]
 80088aa:	2b01      	cmp	r3, #1
 80088ac:	d103      	bne.n	80088b6 <main+0x2aa>
 80088ae:	4b16      	ldr	r3, [pc, #88]	; (8008908 <main+0x2fc>)
 80088b0:	2200      	movs	r2, #0
 80088b2:	601a      	str	r2, [r3, #0]
 80088b4:	e068      	b.n	8008988 <main+0x37c>

      								else
      								{
      									led = 1;
 80088b6:	4b14      	ldr	r3, [pc, #80]	; (8008908 <main+0x2fc>)
 80088b8:	2201      	movs	r2, #1
 80088ba:	601a      	str	r2, [r3, #0]
      									led1(((float)(x[0]-150)/190.0));
 80088bc:	4b0c      	ldr	r3, [pc, #48]	; (80088f0 <main+0x2e4>)
 80088be:	881b      	ldrh	r3, [r3, #0]
 80088c0:	3b96      	subs	r3, #150	; 0x96
 80088c2:	ee07 3a90 	vmov	s15, r3
 80088c6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80088ca:	ed9f 7a10 	vldr	s14, [pc, #64]	; 800890c <main+0x300>
 80088ce:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80088d2:	eeb0 0a66 	vmov.f32	s0, s13
 80088d6:	f7ff fd73 	bl	80083c0 <led1>
      								if(led==1) led= 0;
 80088da:	e055      	b.n	8008988 <main+0x37c>
 80088dc:	2002ccc4 	.word	0x2002ccc4
 80088e0:	2002ce34 	.word	0x2002ce34
 80088e4:	2002cee8 	.word	0x2002cee8
 80088e8:	20000028 	.word	0x20000028
 80088ec:	0800a0ac 	.word	0x0800a0ac
 80088f0:	2002cc88 	.word	0x2002cc88
 80088f4:	2002ce74 	.word	0x2002ce74
 80088f8:	2002cebc 	.word	0x2002cebc
 80088fc:	2002cf5c 	.word	0x2002cf5c
 8008900:	2002cc90 	.word	0x2002cc90
 8008904:	2002cba0 	.word	0x2002cba0
 8008908:	2002cb9c 	.word	0x2002cb9c
 800890c:	433e0000 	.word	0x433e0000
      								}
      							}

      							else if(TS_State.touchX[0]>x[3]-40&&TS_State.touchX[0]<x[3]+40&&TS_State.touchY[0]>y[3]-40&&TS_State.touchY[0]<y[3]+40)
 8008910:	4b9e      	ldr	r3, [pc, #632]	; (8008b8c <main+0x580>)
 8008912:	885b      	ldrh	r3, [r3, #2]
 8008914:	461a      	mov	r2, r3
 8008916:	4b9e      	ldr	r3, [pc, #632]	; (8008b90 <main+0x584>)
 8008918:	88db      	ldrh	r3, [r3, #6]
 800891a:	3b28      	subs	r3, #40	; 0x28
 800891c:	429a      	cmp	r2, r3
 800891e:	dd33      	ble.n	8008988 <main+0x37c>
 8008920:	4b9a      	ldr	r3, [pc, #616]	; (8008b8c <main+0x580>)
 8008922:	885b      	ldrh	r3, [r3, #2]
 8008924:	461a      	mov	r2, r3
 8008926:	4b9a      	ldr	r3, [pc, #616]	; (8008b90 <main+0x584>)
 8008928:	88db      	ldrh	r3, [r3, #6]
 800892a:	3328      	adds	r3, #40	; 0x28
 800892c:	429a      	cmp	r2, r3
 800892e:	da2b      	bge.n	8008988 <main+0x37c>
 8008930:	4b96      	ldr	r3, [pc, #600]	; (8008b8c <main+0x580>)
 8008932:	899b      	ldrh	r3, [r3, #12]
 8008934:	461a      	mov	r2, r3
 8008936:	4b97      	ldr	r3, [pc, #604]	; (8008b94 <main+0x588>)
 8008938:	88db      	ldrh	r3, [r3, #6]
 800893a:	3b28      	subs	r3, #40	; 0x28
 800893c:	429a      	cmp	r2, r3
 800893e:	dd23      	ble.n	8008988 <main+0x37c>
 8008940:	4b92      	ldr	r3, [pc, #584]	; (8008b8c <main+0x580>)
 8008942:	899b      	ldrh	r3, [r3, #12]
 8008944:	461a      	mov	r2, r3
 8008946:	4b93      	ldr	r3, [pc, #588]	; (8008b94 <main+0x588>)
 8008948:	88db      	ldrh	r3, [r3, #6]
 800894a:	3328      	adds	r3, #40	; 0x28
 800894c:	429a      	cmp	r2, r3
 800894e:	da1b      	bge.n	8008988 <main+0x37c>
      							{
      								if(led==2) led=0;
 8008950:	4b91      	ldr	r3, [pc, #580]	; (8008b98 <main+0x58c>)
 8008952:	681b      	ldr	r3, [r3, #0]
 8008954:	2b02      	cmp	r3, #2
 8008956:	d103      	bne.n	8008960 <main+0x354>
 8008958:	4b8f      	ldr	r3, [pc, #572]	; (8008b98 <main+0x58c>)
 800895a:	2200      	movs	r2, #0
 800895c:	601a      	str	r2, [r3, #0]
 800895e:	e013      	b.n	8008988 <main+0x37c>

      								else
      								{
      									led=2;
 8008960:	4b8d      	ldr	r3, [pc, #564]	; (8008b98 <main+0x58c>)
 8008962:	2202      	movs	r2, #2
 8008964:	601a      	str	r2, [r3, #0]
      									led2(((float)(x[0]-150)/190.0));
 8008966:	4b8a      	ldr	r3, [pc, #552]	; (8008b90 <main+0x584>)
 8008968:	881b      	ldrh	r3, [r3, #0]
 800896a:	3b96      	subs	r3, #150	; 0x96
 800896c:	ee07 3a90 	vmov	s15, r3
 8008970:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8008974:	ed9f 7a89 	vldr	s14, [pc, #548]	; 8008b9c <main+0x590>
 8008978:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800897c:	eeb0 0a66 	vmov.f32	s0, s13
 8008980:	f7ff fd42 	bl	8008408 <led2>
 8008984:	e000      	b.n	8008988 <main+0x37c>
      								if(x[0]<=150) x[0]=150;
 8008986:	bf00      	nop
      								}
      							}

      							DrawLed();
 8008988:	463b      	mov	r3, r7
 800898a:	469c      	mov	ip, r3
 800898c:	f000 fa4e 	bl	8008e2c <DrawLed.11134>
      						}
      						count2=0;
 8008990:	4b83      	ldr	r3, [pc, #524]	; (8008ba0 <main+0x594>)
 8008992:	2200      	movs	r2, #0
 8008994:	701a      	strb	r2, [r3, #0]
      			while(back1==1)
 8008996:	4b83      	ldr	r3, [pc, #524]	; (8008ba4 <main+0x598>)
 8008998:	781b      	ldrb	r3, [r3, #0]
 800899a:	2b01      	cmp	r3, #1
 800899c:	f43f aede 	beq.w	800875c <main+0x150>
      					}

      				}
      			}

        	if(TS_State.touchX[0]>55&&TS_State.touchX[0]<235&&TS_State.touchY[0]>180&&TS_State.touchY[0]<250)
 80089a0:	4b7a      	ldr	r3, [pc, #488]	; (8008b8c <main+0x580>)
 80089a2:	885b      	ldrh	r3, [r3, #2]
 80089a4:	2b37      	cmp	r3, #55	; 0x37
 80089a6:	f240 8143 	bls.w	8008c30 <main+0x624>
 80089aa:	4b78      	ldr	r3, [pc, #480]	; (8008b8c <main+0x580>)
 80089ac:	885b      	ldrh	r3, [r3, #2]
 80089ae:	2bea      	cmp	r3, #234	; 0xea
 80089b0:	f200 813e 	bhi.w	8008c30 <main+0x624>
 80089b4:	4b75      	ldr	r3, [pc, #468]	; (8008b8c <main+0x580>)
 80089b6:	899b      	ldrh	r3, [r3, #12]
 80089b8:	2bb4      	cmp	r3, #180	; 0xb4
 80089ba:	f240 8139 	bls.w	8008c30 <main+0x624>
 80089be:	4b73      	ldr	r3, [pc, #460]	; (8008b8c <main+0x580>)
 80089c0:	899b      	ldrh	r3, [r3, #12]
 80089c2:	2bf9      	cmp	r3, #249	; 0xf9
 80089c4:	f200 8134 	bhi.w	8008c30 <main+0x624>
        	{
        		DrawBlinds();
 80089c8:	463b      	mov	r3, r7
 80089ca:	469c      	mov	ip, r3
 80089cc:	f000 f9c0 	bl	8008d50 <DrawBlinds.11132>

        		while(back2==1)
 80089d0:	e129      	b.n	8008c26 <main+0x61a>
        		{
        			BSP_TS_GetState(&TS_State);
 80089d2:	486e      	ldr	r0, [pc, #440]	; (8008b8c <main+0x580>)
 80089d4:	f7fa f8b8 	bl	8002b48 <BSP_TS_GetState>
      				count3++;
 80089d8:	4b73      	ldr	r3, [pc, #460]	; (8008ba8 <main+0x59c>)
 80089da:	781b      	ldrb	r3, [r3, #0]
 80089dc:	3301      	adds	r3, #1
 80089de:	b2da      	uxtb	r2, r3
 80089e0:	4b71      	ldr	r3, [pc, #452]	; (8008ba8 <main+0x59c>)
 80089e2:	701a      	strb	r2, [r3, #0]
      				if(count3>30)
 80089e4:	4b70      	ldr	r3, [pc, #448]	; (8008ba8 <main+0x59c>)
 80089e6:	781b      	ldrb	r3, [r3, #0]
 80089e8:	2b1e      	cmp	r3, #30
 80089ea:	f240 811c 	bls.w	8008c26 <main+0x61a>
      				{
						if (TS_State.touchDetected)
 80089ee:	4b67      	ldr	r3, [pc, #412]	; (8008b8c <main+0x580>)
 80089f0:	781b      	ldrb	r3, [r3, #0]
 80089f2:	2b00      	cmp	r3, #0
 80089f4:	f000 8114 	beq.w	8008c20 <main+0x614>
						{
							int pre_y = y[1];
 80089f8:	4b66      	ldr	r3, [pc, #408]	; (8008b94 <main+0x588>)
 80089fa:	885b      	ldrh	r3, [r3, #2]
 80089fc:	607b      	str	r3, [r7, #4]

							if( TS_State.touchX[0]>233&&TS_State.touchX[0]<450&&TS_State.touchY[0]>40-20&&TS_State.touchY[0]<230+20)
 80089fe:	4b63      	ldr	r3, [pc, #396]	; (8008b8c <main+0x580>)
 8008a00:	885b      	ldrh	r3, [r3, #2]
 8008a02:	2be9      	cmp	r3, #233	; 0xe9
 8008a04:	f240 80ae 	bls.w	8008b64 <main+0x558>
 8008a08:	4b60      	ldr	r3, [pc, #384]	; (8008b8c <main+0x580>)
 8008a0a:	885b      	ldrh	r3, [r3, #2]
 8008a0c:	f5b3 7fe1 	cmp.w	r3, #450	; 0x1c2
 8008a10:	f080 80a8 	bcs.w	8008b64 <main+0x558>
 8008a14:	4b5d      	ldr	r3, [pc, #372]	; (8008b8c <main+0x580>)
 8008a16:	899b      	ldrh	r3, [r3, #12]
 8008a18:	2b14      	cmp	r3, #20
 8008a1a:	f240 80a3 	bls.w	8008b64 <main+0x558>
 8008a1e:	4b5b      	ldr	r3, [pc, #364]	; (8008b8c <main+0x580>)
 8008a20:	899b      	ldrh	r3, [r3, #12]
 8008a22:	2bf9      	cmp	r3, #249	; 0xf9
 8008a24:	f200 809e 	bhi.w	8008b64 <main+0x558>
							{
								if(TS_State.touchY[0]-y[1]>1)
 8008a28:	4b58      	ldr	r3, [pc, #352]	; (8008b8c <main+0x580>)
 8008a2a:	899b      	ldrh	r3, [r3, #12]
 8008a2c:	461a      	mov	r2, r3
 8008a2e:	4b59      	ldr	r3, [pc, #356]	; (8008b94 <main+0x588>)
 8008a30:	885b      	ldrh	r3, [r3, #2]
 8008a32:	1ad3      	subs	r3, r2, r3
 8008a34:	2b01      	cmp	r3, #1
 8008a36:	dd29      	ble.n	8008a8c <main+0x480>
								{
									y[1]=TS_State.touchY[0];
 8008a38:	4b54      	ldr	r3, [pc, #336]	; (8008b8c <main+0x580>)
 8008a3a:	899a      	ldrh	r2, [r3, #12]
 8008a3c:	4b55      	ldr	r3, [pc, #340]	; (8008b94 <main+0x588>)
 8008a3e:	805a      	strh	r2, [r3, #2]
									last_y[1]=y[1];
 8008a40:	4b54      	ldr	r3, [pc, #336]	; (8008b94 <main+0x588>)
 8008a42:	885a      	ldrh	r2, [r3, #2]
 8008a44:	4b59      	ldr	r3, [pc, #356]	; (8008bac <main+0x5a0>)
 8008a46:	805a      	strh	r2, [r3, #2]
									DrawBlinds();
 8008a48:	463b      	mov	r3, r7
 8008a4a:	469c      	mov	ip, r3
 8008a4c:	f000 f980 	bl	8008d50 <DrawBlinds.11132>
									HAL_GPIO_WritePin(GPIOI, GPIO_PIN_3,GPIO_PIN_SET);
 8008a50:	2201      	movs	r2, #1
 8008a52:	2108      	movs	r1, #8
 8008a54:	4856      	ldr	r0, [pc, #344]	; (8008bb0 <main+0x5a4>)
 8008a56:	f7fb fc29 	bl	80042ac <HAL_GPIO_WritePin>
									HAL_GPIO_WritePin(GPIOH, GPIO_PIN_6,GPIO_PIN_RESET);
 8008a5a:	2200      	movs	r2, #0
 8008a5c:	2140      	movs	r1, #64	; 0x40
 8008a5e:	4855      	ldr	r0, [pc, #340]	; (8008bb4 <main+0x5a8>)
 8008a60:	f7fb fc24 	bl	80042ac <HAL_GPIO_WritePin>
									HAL_Delay(abs(pre_y-y[1])*50);
 8008a64:	4b4b      	ldr	r3, [pc, #300]	; (8008b94 <main+0x588>)
 8008a66:	885b      	ldrh	r3, [r3, #2]
 8008a68:	461a      	mov	r2, r3
 8008a6a:	687b      	ldr	r3, [r7, #4]
 8008a6c:	1a9b      	subs	r3, r3, r2
 8008a6e:	2b00      	cmp	r3, #0
 8008a70:	bfb8      	it	lt
 8008a72:	425b      	neglt	r3, r3
 8008a74:	2232      	movs	r2, #50	; 0x32
 8008a76:	fb02 f303 	mul.w	r3, r2, r3
 8008a7a:	4618      	mov	r0, r3
 8008a7c:	f7fa faba 	bl	8002ff4 <HAL_Delay>
									HAL_GPIO_WritePin(GPIOI, GPIO_PIN_3,GPIO_PIN_RESET);
 8008a80:	2200      	movs	r2, #0
 8008a82:	2108      	movs	r1, #8
 8008a84:	484a      	ldr	r0, [pc, #296]	; (8008bb0 <main+0x5a4>)
 8008a86:	f7fb fc11 	bl	80042ac <HAL_GPIO_WritePin>
 8008a8a:	e047      	b.n	8008b1c <main+0x510>
								}

								else if(TS_State.touchY[0]-y[1]<-1)
 8008a8c:	4b3f      	ldr	r3, [pc, #252]	; (8008b8c <main+0x580>)
 8008a8e:	899b      	ldrh	r3, [r3, #12]
 8008a90:	461a      	mov	r2, r3
 8008a92:	4b40      	ldr	r3, [pc, #256]	; (8008b94 <main+0x588>)
 8008a94:	885b      	ldrh	r3, [r3, #2]
 8008a96:	1ad3      	subs	r3, r2, r3
 8008a98:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008a9c:	da29      	bge.n	8008af2 <main+0x4e6>
								{
									y[1]=TS_State.touchY[0];
 8008a9e:	4b3b      	ldr	r3, [pc, #236]	; (8008b8c <main+0x580>)
 8008aa0:	899a      	ldrh	r2, [r3, #12]
 8008aa2:	4b3c      	ldr	r3, [pc, #240]	; (8008b94 <main+0x588>)
 8008aa4:	805a      	strh	r2, [r3, #2]
									last_y[1]=y[1];
 8008aa6:	4b3b      	ldr	r3, [pc, #236]	; (8008b94 <main+0x588>)
 8008aa8:	885a      	ldrh	r2, [r3, #2]
 8008aaa:	4b40      	ldr	r3, [pc, #256]	; (8008bac <main+0x5a0>)
 8008aac:	805a      	strh	r2, [r3, #2]
									DrawBlinds();
 8008aae:	463b      	mov	r3, r7
 8008ab0:	469c      	mov	ip, r3
 8008ab2:	f000 f94d 	bl	8008d50 <DrawBlinds.11132>
									HAL_GPIO_WritePin(GPIOI, GPIO_PIN_3,GPIO_PIN_RESET);
 8008ab6:	2200      	movs	r2, #0
 8008ab8:	2108      	movs	r1, #8
 8008aba:	483d      	ldr	r0, [pc, #244]	; (8008bb0 <main+0x5a4>)
 8008abc:	f7fb fbf6 	bl	80042ac <HAL_GPIO_WritePin>
									HAL_GPIO_WritePin(GPIOH, GPIO_PIN_6,GPIO_PIN_SET);
 8008ac0:	2201      	movs	r2, #1
 8008ac2:	2140      	movs	r1, #64	; 0x40
 8008ac4:	483b      	ldr	r0, [pc, #236]	; (8008bb4 <main+0x5a8>)
 8008ac6:	f7fb fbf1 	bl	80042ac <HAL_GPIO_WritePin>
									HAL_Delay(abs(pre_y-y[1])*50);
 8008aca:	4b32      	ldr	r3, [pc, #200]	; (8008b94 <main+0x588>)
 8008acc:	885b      	ldrh	r3, [r3, #2]
 8008ace:	461a      	mov	r2, r3
 8008ad0:	687b      	ldr	r3, [r7, #4]
 8008ad2:	1a9b      	subs	r3, r3, r2
 8008ad4:	2b00      	cmp	r3, #0
 8008ad6:	bfb8      	it	lt
 8008ad8:	425b      	neglt	r3, r3
 8008ada:	2232      	movs	r2, #50	; 0x32
 8008adc:	fb02 f303 	mul.w	r3, r2, r3
 8008ae0:	4618      	mov	r0, r3
 8008ae2:	f7fa fa87 	bl	8002ff4 <HAL_Delay>
									HAL_GPIO_WritePin(GPIOH, GPIO_PIN_6,GPIO_PIN_RESET);
 8008ae6:	2200      	movs	r2, #0
 8008ae8:	2140      	movs	r1, #64	; 0x40
 8008aea:	4832      	ldr	r0, [pc, #200]	; (8008bb4 <main+0x5a8>)
 8008aec:	f7fb fbde 	bl	80042ac <HAL_GPIO_WritePin>
 8008af0:	e014      	b.n	8008b1c <main+0x510>
								}

								else if (TS_State.touchY[0]-y[1]>=-1||TS_State.touchY[0]-y[1]<=1)
 8008af2:	4b26      	ldr	r3, [pc, #152]	; (8008b8c <main+0x580>)
 8008af4:	899b      	ldrh	r3, [r3, #12]
 8008af6:	461a      	mov	r2, r3
 8008af8:	4b26      	ldr	r3, [pc, #152]	; (8008b94 <main+0x588>)
 8008afa:	885b      	ldrh	r3, [r3, #2]
 8008afc:	1ad3      	subs	r3, r2, r3
 8008afe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008b02:	da07      	bge.n	8008b14 <main+0x508>
 8008b04:	4b21      	ldr	r3, [pc, #132]	; (8008b8c <main+0x580>)
 8008b06:	899b      	ldrh	r3, [r3, #12]
 8008b08:	461a      	mov	r2, r3
 8008b0a:	4b22      	ldr	r3, [pc, #136]	; (8008b94 <main+0x588>)
 8008b0c:	885b      	ldrh	r3, [r3, #2]
 8008b0e:	1ad3      	subs	r3, r2, r3
 8008b10:	2b01      	cmp	r3, #1
 8008b12:	dc03      	bgt.n	8008b1c <main+0x510>
								{
									y[1]=last_y[1];
 8008b14:	4b25      	ldr	r3, [pc, #148]	; (8008bac <main+0x5a0>)
 8008b16:	885a      	ldrh	r2, [r3, #2]
 8008b18:	4b1e      	ldr	r3, [pc, #120]	; (8008b94 <main+0x588>)
 8008b1a:	805a      	strh	r2, [r3, #2]
								}

								if(y[1]<=40)
 8008b1c:	4b1d      	ldr	r3, [pc, #116]	; (8008b94 <main+0x588>)
 8008b1e:	885b      	ldrh	r3, [r3, #2]
 8008b20:	2b28      	cmp	r3, #40	; 0x28
 8008b22:	d80d      	bhi.n	8008b40 <main+0x534>
								{
									y[1]=40;
 8008b24:	4b1b      	ldr	r3, [pc, #108]	; (8008b94 <main+0x588>)
 8008b26:	2228      	movs	r2, #40	; 0x28
 8008b28:	805a      	strh	r2, [r3, #2]
									HAL_GPIO_WritePin(GPIOI, GPIO_PIN_3,GPIO_PIN_RESET);
 8008b2a:	2200      	movs	r2, #0
 8008b2c:	2108      	movs	r1, #8
 8008b2e:	4820      	ldr	r0, [pc, #128]	; (8008bb0 <main+0x5a4>)
 8008b30:	f7fb fbbc 	bl	80042ac <HAL_GPIO_WritePin>
									HAL_GPIO_WritePin(GPIOH, GPIO_PIN_6,GPIO_PIN_RESET);
 8008b34:	2200      	movs	r2, #0
 8008b36:	2140      	movs	r1, #64	; 0x40
 8008b38:	481e      	ldr	r0, [pc, #120]	; (8008bb4 <main+0x5a8>)
 8008b3a:	f7fb fbb7 	bl	80042ac <HAL_GPIO_WritePin>
								if(y[1]<=40)
 8008b3e:	e06a      	b.n	8008c16 <main+0x60a>
								}

								else if(y[1]>220)
 8008b40:	4b14      	ldr	r3, [pc, #80]	; (8008b94 <main+0x588>)
 8008b42:	885b      	ldrh	r3, [r3, #2]
 8008b44:	2bdc      	cmp	r3, #220	; 0xdc
 8008b46:	d966      	bls.n	8008c16 <main+0x60a>
								{
									y[1]=220;
 8008b48:	4b12      	ldr	r3, [pc, #72]	; (8008b94 <main+0x588>)
 8008b4a:	22dc      	movs	r2, #220	; 0xdc
 8008b4c:	805a      	strh	r2, [r3, #2]
									HAL_GPIO_WritePin(GPIOI, GPIO_PIN_3,GPIO_PIN_RESET);
 8008b4e:	2200      	movs	r2, #0
 8008b50:	2108      	movs	r1, #8
 8008b52:	4817      	ldr	r0, [pc, #92]	; (8008bb0 <main+0x5a4>)
 8008b54:	f7fb fbaa 	bl	80042ac <HAL_GPIO_WritePin>
									HAL_GPIO_WritePin(GPIOH, GPIO_PIN_6,GPIO_PIN_RESET);
 8008b58:	2200      	movs	r2, #0
 8008b5a:	2140      	movs	r1, #64	; 0x40
 8008b5c:	4815      	ldr	r0, [pc, #84]	; (8008bb4 <main+0x5a8>)
 8008b5e:	f7fb fba5 	bl	80042ac <HAL_GPIO_WritePin>
								if(y[1]<=40)
 8008b62:	e058      	b.n	8008c16 <main+0x60a>
								}
							}

							else if(TS_State.touchX[0]>40-25&&TS_State.touchX[0]<40+25&&TS_State.touchY[0]>40-15&&TS_State.touchY[0]<30+15)
 8008b64:	4b09      	ldr	r3, [pc, #36]	; (8008b8c <main+0x580>)
 8008b66:	885b      	ldrh	r3, [r3, #2]
 8008b68:	2b0f      	cmp	r3, #15
 8008b6a:	d927      	bls.n	8008bbc <main+0x5b0>
 8008b6c:	4b07      	ldr	r3, [pc, #28]	; (8008b8c <main+0x580>)
 8008b6e:	885b      	ldrh	r3, [r3, #2]
 8008b70:	2b40      	cmp	r3, #64	; 0x40
 8008b72:	d823      	bhi.n	8008bbc <main+0x5b0>
 8008b74:	4b05      	ldr	r3, [pc, #20]	; (8008b8c <main+0x580>)
 8008b76:	899b      	ldrh	r3, [r3, #12]
 8008b78:	2b19      	cmp	r3, #25
 8008b7a:	d91f      	bls.n	8008bbc <main+0x5b0>
 8008b7c:	4b03      	ldr	r3, [pc, #12]	; (8008b8c <main+0x580>)
 8008b7e:	899b      	ldrh	r3, [r3, #12]
 8008b80:	2b2c      	cmp	r3, #44	; 0x2c
 8008b82:	d81b      	bhi.n	8008bbc <main+0x5b0>
							{
								back2=0;
 8008b84:	4b0c      	ldr	r3, [pc, #48]	; (8008bb8 <main+0x5ac>)
 8008b86:	2200      	movs	r2, #0
 8008b88:	701a      	strb	r2, [r3, #0]
 8008b8a:	e045      	b.n	8008c18 <main+0x60c>
 8008b8c:	2002cebc 	.word	0x2002cebc
 8008b90:	2002cc88 	.word	0x2002cc88
 8008b94:	2002ce74 	.word	0x2002ce74
 8008b98:	2002cb9c 	.word	0x2002cb9c
 8008b9c:	433e0000 	.word	0x433e0000
 8008ba0:	2002cba0 	.word	0x2002cba0
 8008ba4:	2002cf5c 	.word	0x2002cf5c
 8008ba8:	2002cba1 	.word	0x2002cba1
 8008bac:	2002ccbc 	.word	0x2002ccbc
 8008bb0:	40022000 	.word	0x40022000
 8008bb4:	40021c00 	.word	0x40021c00
 8008bb8:	2002cc90 	.word	0x2002cc90
							}

							else if(TS_State.touchX[0]>110-30&&TS_State.touchX[0]<110+30&&TS_State.touchY[0]>180-30&&TS_State.touchY[0]<180+30)
 8008bbc:	4b21      	ldr	r3, [pc, #132]	; (8008c44 <main+0x638>)
 8008bbe:	885b      	ldrh	r3, [r3, #2]
 8008bc0:	2b50      	cmp	r3, #80	; 0x50
 8008bc2:	d929      	bls.n	8008c18 <main+0x60c>
 8008bc4:	4b1f      	ldr	r3, [pc, #124]	; (8008c44 <main+0x638>)
 8008bc6:	885b      	ldrh	r3, [r3, #2]
 8008bc8:	2b8b      	cmp	r3, #139	; 0x8b
 8008bca:	d825      	bhi.n	8008c18 <main+0x60c>
 8008bcc:	4b1d      	ldr	r3, [pc, #116]	; (8008c44 <main+0x638>)
 8008bce:	899b      	ldrh	r3, [r3, #12]
 8008bd0:	2b96      	cmp	r3, #150	; 0x96
 8008bd2:	d921      	bls.n	8008c18 <main+0x60c>
 8008bd4:	4b1b      	ldr	r3, [pc, #108]	; (8008c44 <main+0x638>)
 8008bd6:	899b      	ldrh	r3, [r3, #12]
 8008bd8:	2bd1      	cmp	r3, #209	; 0xd1
 8008bda:	d81d      	bhi.n	8008c18 <main+0x60c>
							{
								if (lock==1)
 8008bdc:	4b1a      	ldr	r3, [pc, #104]	; (8008c48 <main+0x63c>)
 8008bde:	781b      	ldrb	r3, [r3, #0]
 8008be0:	2b00      	cmp	r3, #0
 8008be2:	d008      	beq.n	8008bf6 <main+0x5ea>
								{
									lock=0;
 8008be4:	4b18      	ldr	r3, [pc, #96]	; (8008c48 <main+0x63c>)
 8008be6:	2200      	movs	r2, #0
 8008be8:	701a      	strb	r2, [r3, #0]
									HAL_GPIO_WritePin(GPIOI, GPIO_PIN_0,GPIO_PIN_RESET);
 8008bea:	2200      	movs	r2, #0
 8008bec:	2101      	movs	r1, #1
 8008bee:	4817      	ldr	r0, [pc, #92]	; (8008c4c <main+0x640>)
 8008bf0:	f7fb fb5c 	bl	80042ac <HAL_GPIO_WritePin>
 8008bf4:	e010      	b.n	8008c18 <main+0x60c>

								}
								else if(lock==0)
 8008bf6:	4b14      	ldr	r3, [pc, #80]	; (8008c48 <main+0x63c>)
 8008bf8:	781b      	ldrb	r3, [r3, #0]
 8008bfa:	f083 0301 	eor.w	r3, r3, #1
 8008bfe:	b2db      	uxtb	r3, r3
 8008c00:	2b00      	cmp	r3, #0
 8008c02:	d009      	beq.n	8008c18 <main+0x60c>
								{
									lock=1;
 8008c04:	4b10      	ldr	r3, [pc, #64]	; (8008c48 <main+0x63c>)
 8008c06:	2201      	movs	r2, #1
 8008c08:	701a      	strb	r2, [r3, #0]
									HAL_GPIO_WritePin(GPIOI, GPIO_PIN_0,GPIO_PIN_SET);
 8008c0a:	2201      	movs	r2, #1
 8008c0c:	2101      	movs	r1, #1
 8008c0e:	480f      	ldr	r0, [pc, #60]	; (8008c4c <main+0x640>)
 8008c10:	f7fb fb4c 	bl	80042ac <HAL_GPIO_WritePin>
 8008c14:	e000      	b.n	8008c18 <main+0x60c>
								if(y[1]<=40)
 8008c16:	bf00      	nop
								}

							}
							DrawBlinds();
 8008c18:	463b      	mov	r3, r7
 8008c1a:	469c      	mov	ip, r3
 8008c1c:	f000 f898 	bl	8008d50 <DrawBlinds.11132>
						}
        			count3 = 0;
 8008c20:	4b0b      	ldr	r3, [pc, #44]	; (8008c50 <main+0x644>)
 8008c22:	2200      	movs	r2, #0
 8008c24:	701a      	strb	r2, [r3, #0]
        		while(back2==1)
 8008c26:	4b0b      	ldr	r3, [pc, #44]	; (8008c54 <main+0x648>)
 8008c28:	781b      	ldrb	r3, [r3, #0]
 8008c2a:	2b01      	cmp	r3, #1
 8008c2c:	f43f aed1 	beq.w	80089d2 <main+0x3c6>
      				}

        		}
        	}
        	DrawHome();
 8008c30:	463b      	mov	r3, r7
 8008c32:	469c      	mov	ip, r3
 8008c34:	f000 f848 	bl	8008cc8 <DrawHome.11130>
        	sensor();
 8008c38:	463b      	mov	r3, r7
 8008c3a:	469c      	mov	ip, r3
 8008c3c:	f000 f968 	bl	8008f10 <sensor.11136>
	BSP_TS_GetState(&TS_State);
 8008c40:	e55e      	b.n	8008700 <main+0xf4>
 8008c42:	bf00      	nop
 8008c44:	2002cebc 	.word	0x2002cebc
 8008c48:	2002cb99 	.word	0x2002cb99
 8008c4c:	40022000 	.word	0x40022000
 8008c50:	2002cba1 	.word	0x2002cba1
 8008c54:	2002cc90 	.word	0x2002cc90

08008c58 <welcome.11128>:
  {
 8008c58:	b580      	push	{r7, lr}
 8008c5a:	b082      	sub	sp, #8
 8008c5c:	af00      	add	r7, sp, #0
 8008c5e:	f8c7 c004 	str.w	ip, [r7, #4]
	  BSP_LCD_SelectLayer(0);
 8008c62:	2000      	movs	r0, #0
 8008c64:	f7f8 fd88 	bl	8001778 <BSP_LCD_SelectLayer>
	  BSP_LCD_Clear(LCD_COLOR_DARKGRAY );
 8008c68:	4813      	ldr	r0, [pc, #76]	; (8008cb8 <welcome.11128+0x60>)
 8008c6a:	f7f8 fdf7 	bl	800185c <BSP_LCD_Clear>
	  BSP_LCD_SetTextColor(LCD_COLOR_LIGHTGRAY);
 8008c6e:	4813      	ldr	r0, [pc, #76]	; (8008cbc <welcome.11128+0x64>)
 8008c70:	f7f8 fd92 	bl	8001798 <BSP_LCD_SetTextColor>
	  BSP_LCD_SetBackColor(LCD_COLOR_DARKGRAY);
 8008c74:	4810      	ldr	r0, [pc, #64]	; (8008cb8 <welcome.11128+0x60>)
 8008c76:	f7f8 fda7 	bl	80017c8 <BSP_LCD_SetBackColor>
	  BSP_LCD_DisplayStringAt(0, LINE(6), (uint8_t *)"Witamy w naszym systemie", CENTER_MODE);
 8008c7a:	f7f8 fdd9 	bl	8001830 <BSP_LCD_GetFont>
 8008c7e:	4603      	mov	r3, r0
 8008c80:	88db      	ldrh	r3, [r3, #6]
 8008c82:	461a      	mov	r2, r3
 8008c84:	0052      	lsls	r2, r2, #1
 8008c86:	4413      	add	r3, r2
 8008c88:	005b      	lsls	r3, r3, #1
 8008c8a:	b299      	uxth	r1, r3
 8008c8c:	2301      	movs	r3, #1
 8008c8e:	4a0c      	ldr	r2, [pc, #48]	; (8008cc0 <welcome.11128+0x68>)
 8008c90:	2000      	movs	r0, #0
 8008c92:	f7f8 fe4f 	bl	8001934 <BSP_LCD_DisplayStringAt>
	  BSP_LCD_DisplayStringAt(0, LINE(7), (uint8_t *)"sterujesz: SYPIALNIA", CENTER_MODE);
 8008c96:	f7f8 fdcb 	bl	8001830 <BSP_LCD_GetFont>
 8008c9a:	4603      	mov	r3, r0
 8008c9c:	88db      	ldrh	r3, [r3, #6]
 8008c9e:	461a      	mov	r2, r3
 8008ca0:	00d2      	lsls	r2, r2, #3
 8008ca2:	1ad3      	subs	r3, r2, r3
 8008ca4:	b299      	uxth	r1, r3
 8008ca6:	2301      	movs	r3, #1
 8008ca8:	4a06      	ldr	r2, [pc, #24]	; (8008cc4 <welcome.11128+0x6c>)
 8008caa:	2000      	movs	r0, #0
 8008cac:	f7f8 fe42 	bl	8001934 <BSP_LCD_DisplayStringAt>
  }
 8008cb0:	bf00      	nop
 8008cb2:	3708      	adds	r7, #8
 8008cb4:	46bd      	mov	sp, r7
 8008cb6:	bd80      	pop	{r7, pc}
 8008cb8:	ff404040 	.word	0xff404040
 8008cbc:	ffd3d3d3 	.word	0xffd3d3d3
 8008cc0:	0800a0bc 	.word	0x0800a0bc
 8008cc4:	0800a0d8 	.word	0x0800a0d8

08008cc8 <DrawHome.11130>:
  {
 8008cc8:	b580      	push	{r7, lr}
 8008cca:	b082      	sub	sp, #8
 8008ccc:	af00      	add	r7, sp, #0
 8008cce:	f8c7 c004 	str.w	ip, [r7, #4]
	BSP_LCD_SelectLayer(0);
 8008cd2:	2000      	movs	r0, #0
 8008cd4:	f7f8 fd50 	bl	8001778 <BSP_LCD_SelectLayer>
	BSP_LCD_Clear(LCD_COLOR_DARKGRAY);
 8008cd8:	4818      	ldr	r0, [pc, #96]	; (8008d3c <DrawHome.11130+0x74>)
 8008cda:	f7f8 fdbf 	bl	800185c <BSP_LCD_Clear>
    BSP_LCD_SetBackColor(LCD_COLOR_DARKGRAY);
 8008cde:	4817      	ldr	r0, [pc, #92]	; (8008d3c <DrawHome.11130+0x74>)
 8008ce0:	f7f8 fd72 	bl	80017c8 <BSP_LCD_SetBackColor>
    BSP_LCD_SetTextColor(LCD_COLOR_LIGHTGRAY);
 8008ce4:	4816      	ldr	r0, [pc, #88]	; (8008d40 <DrawHome.11130+0x78>)
 8008ce6:	f7f8 fd57 	bl	8001798 <BSP_LCD_SetTextColor>
    BSP_LCD_DrawRect(55,60,180,70);
 8008cea:	2346      	movs	r3, #70	; 0x46
 8008cec:	22b4      	movs	r2, #180	; 0xb4
 8008cee:	213c      	movs	r1, #60	; 0x3c
 8008cf0:	2037      	movs	r0, #55	; 0x37
 8008cf2:	f7f8 ffa3 	bl	8001c3c <BSP_LCD_DrawRect>
    BSP_LCD_DrawRect(55,180,180,70);
 8008cf6:	2346      	movs	r3, #70	; 0x46
 8008cf8:	22b4      	movs	r2, #180	; 0xb4
 8008cfa:	21b4      	movs	r1, #180	; 0xb4
 8008cfc:	2037      	movs	r0, #55	; 0x37
 8008cfe:	f7f8 ff9d 	bl	8001c3c <BSP_LCD_DrawRect>
    BSP_LCD_DisplayStringAt(65,70,(uint8_t *)"Sterowanie", LEFT_MODE);
 8008d02:	2303      	movs	r3, #3
 8008d04:	4a0f      	ldr	r2, [pc, #60]	; (8008d44 <DrawHome.11130+0x7c>)
 8008d06:	2146      	movs	r1, #70	; 0x46
 8008d08:	2041      	movs	r0, #65	; 0x41
 8008d0a:	f7f8 fe13 	bl	8001934 <BSP_LCD_DisplayStringAt>
    BSP_LCD_DisplayStringAt(65,90,(uint8_t *)"swiatlami", LEFT_MODE);
 8008d0e:	2303      	movs	r3, #3
 8008d10:	4a0d      	ldr	r2, [pc, #52]	; (8008d48 <DrawHome.11130+0x80>)
 8008d12:	215a      	movs	r1, #90	; 0x5a
 8008d14:	2041      	movs	r0, #65	; 0x41
 8008d16:	f7f8 fe0d 	bl	8001934 <BSP_LCD_DisplayStringAt>
    BSP_LCD_DisplayStringAt(65,190,(uint8_t *)"Sterowanie", LEFT_MODE);
 8008d1a:	2303      	movs	r3, #3
 8008d1c:	4a09      	ldr	r2, [pc, #36]	; (8008d44 <DrawHome.11130+0x7c>)
 8008d1e:	21be      	movs	r1, #190	; 0xbe
 8008d20:	2041      	movs	r0, #65	; 0x41
 8008d22:	f7f8 fe07 	bl	8001934 <BSP_LCD_DisplayStringAt>
    BSP_LCD_DisplayStringAt(65,210,(uint8_t *)"zaluzjami", LEFT_MODE);
 8008d26:	2303      	movs	r3, #3
 8008d28:	4a08      	ldr	r2, [pc, #32]	; (8008d4c <DrawHome.11130+0x84>)
 8008d2a:	21d2      	movs	r1, #210	; 0xd2
 8008d2c:	2041      	movs	r0, #65	; 0x41
 8008d2e:	f7f8 fe01 	bl	8001934 <BSP_LCD_DisplayStringAt>
  }
 8008d32:	bf00      	nop
 8008d34:	3708      	adds	r7, #8
 8008d36:	46bd      	mov	sp, r7
 8008d38:	bd80      	pop	{r7, pc}
 8008d3a:	bf00      	nop
 8008d3c:	ff404040 	.word	0xff404040
 8008d40:	ffd3d3d3 	.word	0xffd3d3d3
 8008d44:	0800a0f0 	.word	0x0800a0f0
 8008d48:	0800a0fc 	.word	0x0800a0fc
 8008d4c:	0800a108 	.word	0x0800a108

08008d50 <DrawBlinds.11132>:
  {
 8008d50:	b580      	push	{r7, lr}
 8008d52:	b082      	sub	sp, #8
 8008d54:	af00      	add	r7, sp, #0
 8008d56:	f8c7 c004 	str.w	ip, [r7, #4]
	BSP_LCD_SelectLayer(0);
 8008d5a:	2000      	movs	r0, #0
 8008d5c:	f7f8 fd0c 	bl	8001778 <BSP_LCD_SelectLayer>
    BSP_LCD_Clear(LCD_COLOR_DARKGRAY);
 8008d60:	4826      	ldr	r0, [pc, #152]	; (8008dfc <DrawBlinds.11132+0xac>)
 8008d62:	f7f8 fd7b 	bl	800185c <BSP_LCD_Clear>
    BSP_LCD_SetBackColor(LCD_COLOR_DARKGRAY);
 8008d66:	4825      	ldr	r0, [pc, #148]	; (8008dfc <DrawBlinds.11132+0xac>)
 8008d68:	f7f8 fd2e 	bl	80017c8 <BSP_LCD_SetBackColor>
    BSP_LCD_SetTextColor(LCD_COLOR_LIGHTGRAY);
 8008d6c:	4824      	ldr	r0, [pc, #144]	; (8008e00 <DrawBlinds.11132+0xb0>)
 8008d6e:	f7f8 fd13 	bl	8001798 <BSP_LCD_SetTextColor>
    BSP_LCD_DrawRect(15,15,50,30);
 8008d72:	231e      	movs	r3, #30
 8008d74:	2232      	movs	r2, #50	; 0x32
 8008d76:	210f      	movs	r1, #15
 8008d78:	200f      	movs	r0, #15
 8008d7a:	f7f8 ff5f 	bl	8001c3c <BSP_LCD_DrawRect>
    BSP_LCD_DisplayStringAt(40,228,(uint8_t *)"Zamykanie", LEFT_MODE);
 8008d7e:	2303      	movs	r3, #3
 8008d80:	4a20      	ldr	r2, [pc, #128]	; (8008e04 <DrawBlinds.11132+0xb4>)
 8008d82:	21e4      	movs	r1, #228	; 0xe4
 8008d84:	2028      	movs	r0, #40	; 0x28
 8008d86:	f7f8 fdd5 	bl	8001934 <BSP_LCD_DisplayStringAt>
    BSP_LCD_DisplayStringAt(40,248,(uint8_t *)"  okna", LEFT_MODE);
 8008d8a:	2303      	movs	r3, #3
 8008d8c:	4a1e      	ldr	r2, [pc, #120]	; (8008e08 <DrawBlinds.11132+0xb8>)
 8008d8e:	21f8      	movs	r1, #248	; 0xf8
 8008d90:	2028      	movs	r0, #40	; 0x28
 8008d92:	f7f8 fdcf 	bl	8001934 <BSP_LCD_DisplayStringAt>
	if (lock==1)
 8008d96:	4b1d      	ldr	r3, [pc, #116]	; (8008e0c <DrawBlinds.11132+0xbc>)
 8008d98:	781b      	ldrb	r3, [r3, #0]
 8008d9a:	2b00      	cmp	r3, #0
 8008d9c:	d00a      	beq.n	8008db4 <DrawBlinds.11132+0x64>
		BSP_LCD_DrawBitmap(80,150, (uint8_t *)&lock_open);
 8008d9e:	4a1c      	ldr	r2, [pc, #112]	; (8008e10 <DrawBlinds.11132+0xc0>)
 8008da0:	2196      	movs	r1, #150	; 0x96
 8008da2:	2050      	movs	r0, #80	; 0x50
 8008da4:	f7f9 f8b4 	bl	8001f10 <BSP_LCD_DrawBitmap>
		BSP_LCD_DrawBitmap(233,40, (uint8_t *)&open);
 8008da8:	4a1a      	ldr	r2, [pc, #104]	; (8008e14 <DrawBlinds.11132+0xc4>)
 8008daa:	2128      	movs	r1, #40	; 0x28
 8008dac:	20e9      	movs	r0, #233	; 0xe9
 8008dae:	f7f9 f8af 	bl	8001f10 <BSP_LCD_DrawBitmap>
 8008db2:	e010      	b.n	8008dd6 <DrawBlinds.11132+0x86>
	else if(lock==0)
 8008db4:	4b15      	ldr	r3, [pc, #84]	; (8008e0c <DrawBlinds.11132+0xbc>)
 8008db6:	781b      	ldrb	r3, [r3, #0]
 8008db8:	f083 0301 	eor.w	r3, r3, #1
 8008dbc:	b2db      	uxtb	r3, r3
 8008dbe:	2b00      	cmp	r3, #0
 8008dc0:	d009      	beq.n	8008dd6 <DrawBlinds.11132+0x86>
		BSP_LCD_DrawBitmap(80,150, (uint8_t *)&lock_closed);
 8008dc2:	4a15      	ldr	r2, [pc, #84]	; (8008e18 <DrawBlinds.11132+0xc8>)
 8008dc4:	2196      	movs	r1, #150	; 0x96
 8008dc6:	2050      	movs	r0, #80	; 0x50
 8008dc8:	f7f9 f8a2 	bl	8001f10 <BSP_LCD_DrawBitmap>
		BSP_LCD_DrawBitmap(233,40, (uint8_t *)&closed);
 8008dcc:	4a13      	ldr	r2, [pc, #76]	; (8008e1c <DrawBlinds.11132+0xcc>)
 8008dce:	2128      	movs	r1, #40	; 0x28
 8008dd0:	20e9      	movs	r0, #233	; 0xe9
 8008dd2:	f7f9 f89d 	bl	8001f10 <BSP_LCD_DrawBitmap>
    BSP_LCD_DrawBitmap(15,15, (uint8_t *)&back);
 8008dd6:	4a12      	ldr	r2, [pc, #72]	; (8008e20 <DrawBlinds.11132+0xd0>)
 8008dd8:	210f      	movs	r1, #15
 8008dda:	200f      	movs	r0, #15
 8008ddc:	f7f9 f898 	bl	8001f10 <BSP_LCD_DrawBitmap>
    BSP_LCD_FillRect(x[1],30,217,y[1]-30);
 8008de0:	4b10      	ldr	r3, [pc, #64]	; (8008e24 <DrawBlinds.11132+0xd4>)
 8008de2:	8858      	ldrh	r0, [r3, #2]
 8008de4:	4b10      	ldr	r3, [pc, #64]	; (8008e28 <DrawBlinds.11132+0xd8>)
 8008de6:	885b      	ldrh	r3, [r3, #2]
 8008de8:	3b1e      	subs	r3, #30
 8008dea:	b29b      	uxth	r3, r3
 8008dec:	22d9      	movs	r2, #217	; 0xd9
 8008dee:	211e      	movs	r1, #30
 8008df0:	f7f9 f93e 	bl	8002070 <BSP_LCD_FillRect>
   }
 8008df4:	bf00      	nop
 8008df6:	3708      	adds	r7, #8
 8008df8:	46bd      	mov	sp, r7
 8008dfa:	bd80      	pop	{r7, pc}
 8008dfc:	ff404040 	.word	0xff404040
 8008e00:	ffd3d3d3 	.word	0xffd3d3d3
 8008e04:	0800a114 	.word	0x0800a114
 8008e08:	0800a120 	.word	0x0800a120
 8008e0c:	2002cb99 	.word	0x2002cb99
 8008e10:	200290d4 	.word	0x200290d4
 8008e14:	20000c2c 	.word	0x20000c2c
 8008e18:	2002ad2c 	.word	0x2002ad2c
 8008e1c:	20014e80 	.word	0x20014e80
 8008e20:	2000003c 	.word	0x2000003c
 8008e24:	2002cc88 	.word	0x2002cc88
 8008e28:	2002ce74 	.word	0x2002ce74

08008e2c <DrawLed.11134>:
  {
 8008e2c:	b590      	push	{r4, r7, lr}
 8008e2e:	b083      	sub	sp, #12
 8008e30:	af00      	add	r7, sp, #0
 8008e32:	4664      	mov	r4, ip
 8008e34:	f8c7 c004 	str.w	ip, [r7, #4]
	BSP_LCD_SelectLayer(0);
 8008e38:	2000      	movs	r0, #0
 8008e3a:	f7f8 fc9d 	bl	8001778 <BSP_LCD_SelectLayer>
  	BSP_LCD_Clear(LCD_COLOR_DARKGRAY);
 8008e3e:	482b      	ldr	r0, [pc, #172]	; (8008eec <DrawLed.11134+0xc0>)
 8008e40:	f7f8 fd0c 	bl	800185c <BSP_LCD_Clear>
    BSP_LCD_SetBackColor(LCD_COLOR_DARKGRAY);
 8008e44:	4829      	ldr	r0, [pc, #164]	; (8008eec <DrawLed.11134+0xc0>)
 8008e46:	f7f8 fcbf 	bl	80017c8 <BSP_LCD_SetBackColor>
  	BSP_LCD_SetTextColor(LCD_COLOR_LIGHTGRAY);
 8008e4a:	4829      	ldr	r0, [pc, #164]	; (8008ef0 <DrawLed.11134+0xc4>)
 8008e4c:	f7f8 fca4 	bl	8001798 <BSP_LCD_SetTextColor>
  	BSP_LCD_FillRect(x[0],y[0],10,20);
 8008e50:	4b28      	ldr	r3, [pc, #160]	; (8008ef4 <DrawLed.11134+0xc8>)
 8008e52:	8818      	ldrh	r0, [r3, #0]
 8008e54:	4b28      	ldr	r3, [pc, #160]	; (8008ef8 <DrawLed.11134+0xcc>)
 8008e56:	8819      	ldrh	r1, [r3, #0]
 8008e58:	2314      	movs	r3, #20
 8008e5a:	220a      	movs	r2, #10
 8008e5c:	f7f9 f908 	bl	8002070 <BSP_LCD_FillRect>
  	BSP_LCD_DrawRect(150,212,190,20);
 8008e60:	2314      	movs	r3, #20
 8008e62:	22be      	movs	r2, #190	; 0xbe
 8008e64:	21d4      	movs	r1, #212	; 0xd4
 8008e66:	2096      	movs	r0, #150	; 0x96
 8008e68:	f7f8 fee8 	bl	8001c3c <BSP_LCD_DrawRect>
    BSP_LCD_DrawCircle(100,126,45);
 8008e6c:	222d      	movs	r2, #45	; 0x2d
 8008e6e:	217e      	movs	r1, #126	; 0x7e
 8008e70:	2064      	movs	r0, #100	; 0x64
 8008e72:	f7f8 ff15 	bl	8001ca0 <BSP_LCD_DrawCircle>
    BSP_LCD_DrawCircle(300,126,45);
 8008e76:	222d      	movs	r2, #45	; 0x2d
 8008e78:	217e      	movs	r1, #126	; 0x7e
 8008e7a:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8008e7e:	f7f8 ff0f 	bl	8001ca0 <BSP_LCD_DrawCircle>
    BSP_LCD_DrawRect(15,15,50,30);
 8008e82:	231e      	movs	r3, #30
 8008e84:	2232      	movs	r2, #50	; 0x32
 8008e86:	210f      	movs	r1, #15
 8008e88:	200f      	movs	r0, #15
 8008e8a:	f7f8 fed7 	bl	8001c3c <BSP_LCD_DrawRect>
    BSP_LCD_DrawBitmap(15,15, (uint8_t *)&back);
 8008e8e:	4a1b      	ldr	r2, [pc, #108]	; (8008efc <DrawLed.11134+0xd0>)
 8008e90:	210f      	movs	r1, #15
 8008e92:	200f      	movs	r0, #15
 8008e94:	f7f9 f83c 	bl	8001f10 <BSP_LCD_DrawBitmap>
	if(led==1)
 8008e98:	4b19      	ldr	r3, [pc, #100]	; (8008f00 <DrawLed.11134+0xd4>)
 8008e9a:	681b      	ldr	r3, [r3, #0]
 8008e9c:	2b01      	cmp	r3, #1
 8008e9e:	d107      	bne.n	8008eb0 <DrawLed.11134+0x84>
		DisplayButton1(100,126,45,0xFFFF0000);
 8008ea0:	46a4      	mov	ip, r4
 8008ea2:	4b18      	ldr	r3, [pc, #96]	; (8008f04 <DrawLed.11134+0xd8>)
 8008ea4:	222d      	movs	r2, #45	; 0x2d
 8008ea6:	217e      	movs	r1, #126	; 0x7e
 8008ea8:	2064      	movs	r0, #100	; 0x64
 8008eaa:	f7ff fb95 	bl	80085d8 <DisplayButton1.11126>
 8008eae:	e00c      	b.n	8008eca <DrawLed.11134+0x9e>
	else if (led==2)
 8008eb0:	4b13      	ldr	r3, [pc, #76]	; (8008f00 <DrawLed.11134+0xd4>)
 8008eb2:	681b      	ldr	r3, [r3, #0]
 8008eb4:	2b02      	cmp	r3, #2
 8008eb6:	d108      	bne.n	8008eca <DrawLed.11134+0x9e>
		DisplayButton1(300,126,45,0xFF00FF00);
 8008eb8:	46a4      	mov	ip, r4
 8008eba:	f04f 23ff 	mov.w	r3, #4278255360	; 0xff00ff00
 8008ebe:	222d      	movs	r2, #45	; 0x2d
 8008ec0:	217e      	movs	r1, #126	; 0x7e
 8008ec2:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8008ec6:	f7ff fb87 	bl	80085d8 <DisplayButton1.11126>
    BSP_LCD_DisplayStringAt(72,118,(uint8_t *)"LED1", LEFT_MODE);
 8008eca:	2303      	movs	r3, #3
 8008ecc:	4a0e      	ldr	r2, [pc, #56]	; (8008f08 <DrawLed.11134+0xdc>)
 8008ece:	2176      	movs	r1, #118	; 0x76
 8008ed0:	2048      	movs	r0, #72	; 0x48
 8008ed2:	f7f8 fd2f 	bl	8001934 <BSP_LCD_DisplayStringAt>
    BSP_LCD_DisplayStringAt(272,118,(uint8_t *)"LED2", LEFT_MODE);
 8008ed6:	2303      	movs	r3, #3
 8008ed8:	4a0c      	ldr	r2, [pc, #48]	; (8008f0c <DrawLed.11134+0xe0>)
 8008eda:	2176      	movs	r1, #118	; 0x76
 8008edc:	f44f 7088 	mov.w	r0, #272	; 0x110
 8008ee0:	f7f8 fd28 	bl	8001934 <BSP_LCD_DisplayStringAt>
  }
 8008ee4:	bf00      	nop
 8008ee6:	370c      	adds	r7, #12
 8008ee8:	46bd      	mov	sp, r7
 8008eea:	bd90      	pop	{r4, r7, pc}
 8008eec:	ff404040 	.word	0xff404040
 8008ef0:	ffd3d3d3 	.word	0xffd3d3d3
 8008ef4:	2002cc88 	.word	0x2002cc88
 8008ef8:	2002ce74 	.word	0x2002ce74
 8008efc:	2000003c 	.word	0x2000003c
 8008f00:	2002cb9c 	.word	0x2002cb9c
 8008f04:	ffff0000 	.word	0xffff0000
 8008f08:	0800a128 	.word	0x0800a128
 8008f0c:	0800a130 	.word	0x0800a130

08008f10 <sensor.11136>:
  {
 8008f10:	b580      	push	{r7, lr}
 8008f12:	b082      	sub	sp, #8
 8008f14:	af00      	add	r7, sp, #0
 8008f16:	f8c7 c004 	str.w	ip, [r7, #4]
	  sensor_start();
 8008f1a:	f7ff fad9 	bl	80084d0 <sensor_start>
	  check_response();
 8008f1e:	f7ff faeb 	bl	80084f8 <check_response>
	  Rh_byte1= read_data();
 8008f22:	f7ff fb11 	bl	8008548 <read_data>
 8008f26:	4603      	mov	r3, r0
 8008f28:	461a      	mov	r2, r3
 8008f2a:	4b50      	ldr	r3, [pc, #320]	; (800906c <sensor.11136+0x15c>)
 8008f2c:	701a      	strb	r2, [r3, #0]
	  Rh_byte2= read_data();
 8008f2e:	f7ff fb0b 	bl	8008548 <read_data>
 8008f32:	4603      	mov	r3, r0
 8008f34:	461a      	mov	r2, r3
 8008f36:	4b4e      	ldr	r3, [pc, #312]	; (8009070 <sensor.11136+0x160>)
 8008f38:	701a      	strb	r2, [r3, #0]
	  Temp_byte1= read_data();
 8008f3a:	f7ff fb05 	bl	8008548 <read_data>
 8008f3e:	4603      	mov	r3, r0
 8008f40:	461a      	mov	r2, r3
 8008f42:	4b4c      	ldr	r3, [pc, #304]	; (8009074 <sensor.11136+0x164>)
 8008f44:	701a      	strb	r2, [r3, #0]
	  Temp_byte2= read_data();
 8008f46:	f7ff faff 	bl	8008548 <read_data>
 8008f4a:	4603      	mov	r3, r0
 8008f4c:	461a      	mov	r2, r3
 8008f4e:	4b4a      	ldr	r3, [pc, #296]	; (8009078 <sensor.11136+0x168>)
 8008f50:	701a      	strb	r2, [r3, #0]
	  sum = read_data();
 8008f52:	f7ff faf9 	bl	8008548 <read_data>
 8008f56:	4603      	mov	r3, r0
 8008f58:	b29a      	uxth	r2, r3
 8008f5a:	4b48      	ldr	r3, [pc, #288]	; (800907c <sensor.11136+0x16c>)
 8008f5c:	801a      	strh	r2, [r3, #0]
	  if(sum==(Rh_byte1+Rh_byte2+Temp_byte1+Temp_byte2))
 8008f5e:	4b47      	ldr	r3, [pc, #284]	; (800907c <sensor.11136+0x16c>)
 8008f60:	881b      	ldrh	r3, [r3, #0]
 8008f62:	4619      	mov	r1, r3
 8008f64:	4b41      	ldr	r3, [pc, #260]	; (800906c <sensor.11136+0x15c>)
 8008f66:	781b      	ldrb	r3, [r3, #0]
 8008f68:	461a      	mov	r2, r3
 8008f6a:	4b41      	ldr	r3, [pc, #260]	; (8009070 <sensor.11136+0x160>)
 8008f6c:	781b      	ldrb	r3, [r3, #0]
 8008f6e:	4413      	add	r3, r2
 8008f70:	4a40      	ldr	r2, [pc, #256]	; (8009074 <sensor.11136+0x164>)
 8008f72:	7812      	ldrb	r2, [r2, #0]
 8008f74:	4413      	add	r3, r2
 8008f76:	4a40      	ldr	r2, [pc, #256]	; (8009078 <sensor.11136+0x168>)
 8008f78:	7812      	ldrb	r2, [r2, #0]
 8008f7a:	4413      	add	r3, r2
 8008f7c:	4299      	cmp	r1, r3
 8008f7e:	d171      	bne.n	8009064 <sensor.11136+0x154>
		  BSP_LCD_SelectLayer(1);
 8008f80:	2001      	movs	r0, #1
 8008f82:	f7f8 fbf9 	bl	8001778 <BSP_LCD_SelectLayer>
		  BSP_LCD_SetTextColor(LCD_COLOR_LIGHTGRAY);
 8008f86:	483e      	ldr	r0, [pc, #248]	; (8009080 <sensor.11136+0x170>)
 8008f88:	f7f8 fc06 	bl	8001798 <BSP_LCD_SetTextColor>
		  BSP_LCD_SetBackColor(LCD_COLOR_DARKGRAY);
 8008f8c:	483d      	ldr	r0, [pc, #244]	; (8009084 <sensor.11136+0x174>)
 8008f8e:	f7f8 fc1b 	bl	80017c8 <BSP_LCD_SetBackColor>
		  BSP_LCD_SetFont(&Font12);
 8008f92:	483d      	ldr	r0, [pc, #244]	; (8009088 <sensor.11136+0x178>)
 8008f94:	f7f8 fc32 	bl	80017fc <BSP_LCD_SetFont>
		  BSP_LCD_DisplayStringAt(315, 75, (uint8_t *)"Temperatura:", LEFT_MODE);
 8008f98:	2303      	movs	r3, #3
 8008f9a:	4a3c      	ldr	r2, [pc, #240]	; (800908c <sensor.11136+0x17c>)
 8008f9c:	214b      	movs	r1, #75	; 0x4b
 8008f9e:	f240 103b 	movw	r0, #315	; 0x13b
 8008fa2:	f7f8 fcc7 	bl	8001934 <BSP_LCD_DisplayStringAt>
		  BSP_LCD_DisplayChar(330, 90, (Temp_byte1/10)+48);
 8008fa6:	4b33      	ldr	r3, [pc, #204]	; (8009074 <sensor.11136+0x164>)
 8008fa8:	781b      	ldrb	r3, [r3, #0]
 8008faa:	4a39      	ldr	r2, [pc, #228]	; (8009090 <sensor.11136+0x180>)
 8008fac:	fba2 2303 	umull	r2, r3, r2, r3
 8008fb0:	08db      	lsrs	r3, r3, #3
 8008fb2:	b2db      	uxtb	r3, r3
 8008fb4:	3330      	adds	r3, #48	; 0x30
 8008fb6:	b2db      	uxtb	r3, r3
 8008fb8:	461a      	mov	r2, r3
 8008fba:	215a      	movs	r1, #90	; 0x5a
 8008fbc:	f44f 70a5 	mov.w	r0, #330	; 0x14a
 8008fc0:	f7f8 fc74 	bl	80018ac <BSP_LCD_DisplayChar>
		  BSP_LCD_DisplayChar(340, 90, (Temp_byte1%10)+48);
 8008fc4:	4b2b      	ldr	r3, [pc, #172]	; (8009074 <sensor.11136+0x164>)
 8008fc6:	781a      	ldrb	r2, [r3, #0]
 8008fc8:	4b31      	ldr	r3, [pc, #196]	; (8009090 <sensor.11136+0x180>)
 8008fca:	fba3 1302 	umull	r1, r3, r3, r2
 8008fce:	08d9      	lsrs	r1, r3, #3
 8008fd0:	460b      	mov	r3, r1
 8008fd2:	009b      	lsls	r3, r3, #2
 8008fd4:	440b      	add	r3, r1
 8008fd6:	005b      	lsls	r3, r3, #1
 8008fd8:	1ad3      	subs	r3, r2, r3
 8008fda:	b2db      	uxtb	r3, r3
 8008fdc:	3330      	adds	r3, #48	; 0x30
 8008fde:	b2db      	uxtb	r3, r3
 8008fe0:	461a      	mov	r2, r3
 8008fe2:	215a      	movs	r1, #90	; 0x5a
 8008fe4:	f44f 70aa 	mov.w	r0, #340	; 0x154
 8008fe8:	f7f8 fc60 	bl	80018ac <BSP_LCD_DisplayChar>
		  BSP_LCD_DisplayStringAt(350, 90, (uint8_t *)"*C", LEFT_MODE);
 8008fec:	2303      	movs	r3, #3
 8008fee:	4a29      	ldr	r2, [pc, #164]	; (8009094 <sensor.11136+0x184>)
 8008ff0:	215a      	movs	r1, #90	; 0x5a
 8008ff2:	f44f 70af 	mov.w	r0, #350	; 0x15e
 8008ff6:	f7f8 fc9d 	bl	8001934 <BSP_LCD_DisplayStringAt>
		  BSP_LCD_DisplayStringAt(315, 150, (uint8_t *)"Wilgotnosc:", LEFT_MODE);
 8008ffa:	2303      	movs	r3, #3
 8008ffc:	4a26      	ldr	r2, [pc, #152]	; (8009098 <sensor.11136+0x188>)
 8008ffe:	2196      	movs	r1, #150	; 0x96
 8009000:	f240 103b 	movw	r0, #315	; 0x13b
 8009004:	f7f8 fc96 	bl	8001934 <BSP_LCD_DisplayStringAt>
		  BSP_LCD_DisplayChar(330, 165, (Rh_byte1/10)+48);
 8009008:	4b18      	ldr	r3, [pc, #96]	; (800906c <sensor.11136+0x15c>)
 800900a:	781b      	ldrb	r3, [r3, #0]
 800900c:	4a20      	ldr	r2, [pc, #128]	; (8009090 <sensor.11136+0x180>)
 800900e:	fba2 2303 	umull	r2, r3, r2, r3
 8009012:	08db      	lsrs	r3, r3, #3
 8009014:	b2db      	uxtb	r3, r3
 8009016:	3330      	adds	r3, #48	; 0x30
 8009018:	b2db      	uxtb	r3, r3
 800901a:	461a      	mov	r2, r3
 800901c:	21a5      	movs	r1, #165	; 0xa5
 800901e:	f44f 70a5 	mov.w	r0, #330	; 0x14a
 8009022:	f7f8 fc43 	bl	80018ac <BSP_LCD_DisplayChar>
		  BSP_LCD_DisplayChar(340, 165, (Rh_byte1%10)+48);
 8009026:	4b11      	ldr	r3, [pc, #68]	; (800906c <sensor.11136+0x15c>)
 8009028:	781a      	ldrb	r2, [r3, #0]
 800902a:	4b19      	ldr	r3, [pc, #100]	; (8009090 <sensor.11136+0x180>)
 800902c:	fba3 1302 	umull	r1, r3, r3, r2
 8009030:	08d9      	lsrs	r1, r3, #3
 8009032:	460b      	mov	r3, r1
 8009034:	009b      	lsls	r3, r3, #2
 8009036:	440b      	add	r3, r1
 8009038:	005b      	lsls	r3, r3, #1
 800903a:	1ad3      	subs	r3, r2, r3
 800903c:	b2db      	uxtb	r3, r3
 800903e:	3330      	adds	r3, #48	; 0x30
 8009040:	b2db      	uxtb	r3, r3
 8009042:	461a      	mov	r2, r3
 8009044:	21a5      	movs	r1, #165	; 0xa5
 8009046:	f44f 70aa 	mov.w	r0, #340	; 0x154
 800904a:	f7f8 fc2f 	bl	80018ac <BSP_LCD_DisplayChar>
		  BSP_LCD_DisplayStringAt(350, 165, (uint8_t *)"%", LEFT_MODE);
 800904e:	2303      	movs	r3, #3
 8009050:	4a12      	ldr	r2, [pc, #72]	; (800909c <sensor.11136+0x18c>)
 8009052:	21a5      	movs	r1, #165	; 0xa5
 8009054:	f44f 70af 	mov.w	r0, #350	; 0x15e
 8009058:	f7f8 fc6c 	bl	8001934 <BSP_LCD_DisplayStringAt>
		  HAL_Delay(500);
 800905c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8009060:	f7f9 ffc8 	bl	8002ff4 <HAL_Delay>
   }
 8009064:	bf00      	nop
 8009066:	3708      	adds	r7, #8
 8009068:	46bd      	mov	sp, r7
 800906a:	bd80      	pop	{r7, pc}
 800906c:	2002ccba 	.word	0x2002ccba
 8009070:	2002ce1d 	.word	0x2002ce1d
 8009074:	2002ce1c 	.word	0x2002ce1c
 8009078:	2002cf5d 	.word	0x2002cf5d
 800907c:	2002ccb8 	.word	0x2002ccb8
 8009080:	ffd3d3d3 	.word	0xffd3d3d3
 8009084:	ff404040 	.word	0xff404040
 8009088:	20000030 	.word	0x20000030
 800908c:	0800a138 	.word	0x0800a138
 8009090:	cccccccd 	.word	0xcccccccd
 8009094:	0800a148 	.word	0x0800a148
 8009098:	0800a14c 	.word	0x0800a14c
 800909c:	0800a158 	.word	0x0800a158

080090a0 <SystemClock_Config>:
System clock config funtion
  * @brief System Clock Configuration
  * @retval None
\*============================================================================*/
void SystemClock_Config(void)
{
 80090a0:	b580      	push	{r7, lr}
 80090a2:	b0b4      	sub	sp, #208	; 0xd0
 80090a4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct;
  RCC_ClkInitTypeDef RCC_ClkInitStruct;
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct;

    /* Configure the main internal regulator output voltage */
  __HAL_RCC_PWR_CLK_ENABLE();
 80090a6:	4a4e      	ldr	r2, [pc, #312]	; (80091e0 <SystemClock_Config+0x140>)
 80090a8:	4b4d      	ldr	r3, [pc, #308]	; (80091e0 <SystemClock_Config+0x140>)
 80090aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80090ac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80090b0:	6413      	str	r3, [r2, #64]	; 0x40
 80090b2:	4b4b      	ldr	r3, [pc, #300]	; (80091e0 <SystemClock_Config+0x140>)
 80090b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80090b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80090ba:	607b      	str	r3, [r7, #4]
 80090bc:	687b      	ldr	r3, [r7, #4]

  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80090be:	4a49      	ldr	r2, [pc, #292]	; (80091e4 <SystemClock_Config+0x144>)
 80090c0:	4b48      	ldr	r3, [pc, #288]	; (80091e4 <SystemClock_Config+0x144>)
 80090c2:	681b      	ldr	r3, [r3, #0]
 80090c4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80090c8:	6013      	str	r3, [r2, #0]
 80090ca:	4b46      	ldr	r3, [pc, #280]	; (80091e4 <SystemClock_Config+0x144>)
 80090cc:	681b      	ldr	r3, [r3, #0]
 80090ce:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80090d2:	603b      	str	r3, [r7, #0]
 80090d4:	683b      	ldr	r3, [r7, #0]

    /* Initializes the CPU, AHB and APB */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80090d6:	2301      	movs	r3, #1
 80090d8:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80090dc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80090e0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80090e4:	2302      	movs	r3, #2
 80090e6:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80090ea:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80090ee:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  RCC_OscInitStruct.PLL.PLLM = 25;
 80090f2:	2319      	movs	r3, #25
 80090f4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
  RCC_OscInitStruct.PLL.PLLN = 432;
 80090f8:	f44f 73d8 	mov.w	r3, #432	; 0x1b0
 80090fc:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8009100:	2302      	movs	r3, #2
 8009102:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLQ = 9;
 8009106:	2309      	movs	r3, #9
 8009108:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc

  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800910c:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8009110:	4618      	mov	r0, r3
 8009112:	f7fc fa1f 	bl	8005554 <HAL_RCC_OscConfig>
 8009116:	4603      	mov	r3, r0
 8009118:	2b00      	cmp	r3, #0
 800911a:	d004      	beq.n	8009126 <SystemClock_Config+0x86>
  {
    _Error_Handler(__FILE__, __LINE__);
 800911c:	f240 2101 	movw	r1, #513	; 0x201
 8009120:	4831      	ldr	r0, [pc, #196]	; (80091e8 <SystemClock_Config+0x148>)
 8009122:	f000 fc2f 	bl	8009984 <_Error_Handler>
  }

  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8009126:	f7fc f9c5 	bl	80054b4 <HAL_PWREx_EnableOverDrive>
 800912a:	4603      	mov	r3, r0
 800912c:	2b00      	cmp	r3, #0
 800912e:	d004      	beq.n	800913a <SystemClock_Config+0x9a>
  {
    _Error_Handler(__FILE__, __LINE__);
 8009130:	f240 2106 	movw	r1, #518	; 0x206
 8009134:	482c      	ldr	r0, [pc, #176]	; (80091e8 <SystemClock_Config+0x148>)
 8009136:	f000 fc25 	bl	8009984 <_Error_Handler>
  }

  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800913a:	230f      	movs	r3, #15
 800913c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8009140:	2302      	movs	r3, #2
 8009142:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8009146:	2300      	movs	r3, #0
 8009148:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800914c:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8009150:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8009154:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009158:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 800915c:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8009160:	2107      	movs	r1, #7
 8009162:	4618      	mov	r0, r3
 8009164:	f7fc fc66 	bl	8005a34 <HAL_RCC_ClockConfig>
 8009168:	4603      	mov	r3, r0
 800916a:	2b00      	cmp	r3, #0
 800916c:	d004      	beq.n	8009178 <SystemClock_Config+0xd8>
  {
    _Error_Handler(__FILE__, __LINE__);
 800916e:	f240 2112 	movw	r1, #530	; 0x212
 8009172:	481d      	ldr	r0, [pc, #116]	; (80091e8 <SystemClock_Config+0x148>)
 8009174:	f000 fc06 	bl	8009984 <_Error_Handler>
  }

  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC|RCC_PERIPHCLK_USART1;
 8009178:	2348      	movs	r3, #72	; 0x48
 800917a:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLLSAI.PLLSAIN = 100;
 800917c:	2364      	movs	r3, #100	; 0x64
 800917e:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLLSAI.PLLSAIR = 2;
 8009180:	2302      	movs	r3, #2
 8009182:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInitStruct.PLLSAI.PLLSAIQ = 2;
 8009184:	2302      	movs	r3, #2
 8009186:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLLSAI.PLLSAIP = RCC_PLLSAIP_DIV4;
 8009188:	2301      	movs	r3, #1
 800918a:	62bb      	str	r3, [r7, #40]	; 0x28
  PeriphClkInitStruct.PLLSAIDivQ = 1;
 800918c:	2301      	movs	r3, #1
 800918e:	633b      	str	r3, [r7, #48]	; 0x30
  PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_2;
 8009190:	2300      	movs	r3, #0
 8009192:	637b      	str	r3, [r7, #52]	; 0x34
  PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8009194:	2300      	movs	r3, #0
 8009196:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8009198:	f107 0308 	add.w	r3, r7, #8
 800919c:	4618      	mov	r0, r3
 800919e:	f7fc fe4d 	bl	8005e3c <HAL_RCCEx_PeriphCLKConfig>
 80091a2:	4603      	mov	r3, r0
 80091a4:	2b00      	cmp	r3, #0
 80091a6:	d004      	beq.n	80091b2 <SystemClock_Config+0x112>
  {
    _Error_Handler(__FILE__, __LINE__);
 80091a8:	f240 211f 	movw	r1, #543	; 0x21f
 80091ac:	480e      	ldr	r0, [pc, #56]	; (80091e8 <SystemClock_Config+0x148>)
 80091ae:	f000 fbe9 	bl	8009984 <_Error_Handler>
  }

  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 80091b2:	f7fc fddd 	bl	8005d70 <HAL_RCC_GetHCLKFreq>
 80091b6:	4602      	mov	r2, r0
 80091b8:	4b0c      	ldr	r3, [pc, #48]	; (80091ec <SystemClock_Config+0x14c>)
 80091ba:	fba3 2302 	umull	r2, r3, r3, r2
 80091be:	099b      	lsrs	r3, r3, #6
 80091c0:	4618      	mov	r0, r3
 80091c2:	f7fa f838 	bl	8003236 <HAL_SYSTICK_Config>
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 80091c6:	2004      	movs	r0, #4
 80091c8:	f7fa f842 	bl	8003250 <HAL_SYSTICK_CLKSourceConfig>
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 80091cc:	2200      	movs	r2, #0
 80091ce:	2100      	movs	r1, #0
 80091d0:	f04f 30ff 	mov.w	r0, #4294967295
 80091d4:	f7fa f805 	bl	80031e2 <HAL_NVIC_SetPriority>
}
 80091d8:	bf00      	nop
 80091da:	37d0      	adds	r7, #208	; 0xd0
 80091dc:	46bd      	mov	sp, r7
 80091de:	bd80      	pop	{r7, pc}
 80091e0:	40023800 	.word	0x40023800
 80091e4:	40007000 	.word	0x40007000
 80091e8:	0800a0ac 	.word	0x0800a0ac
 80091ec:	10624dd3 	.word	0x10624dd3

080091f0 <MX_CRC_Init>:

/* CRC init function */
static void MX_CRC_Init(void)
{
 80091f0:	b580      	push	{r7, lr}
 80091f2:	af00      	add	r7, sp, #0

  hcrc.Instance = CRC;
 80091f4:	4b0f      	ldr	r3, [pc, #60]	; (8009234 <MX_CRC_Init+0x44>)
 80091f6:	4a10      	ldr	r2, [pc, #64]	; (8009238 <MX_CRC_Init+0x48>)
 80091f8:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 80091fa:	4b0e      	ldr	r3, [pc, #56]	; (8009234 <MX_CRC_Init+0x44>)
 80091fc:	2200      	movs	r2, #0
 80091fe:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 8009200:	4b0c      	ldr	r3, [pc, #48]	; (8009234 <MX_CRC_Init+0x44>)
 8009202:	2200      	movs	r2, #0
 8009204:	715a      	strb	r2, [r3, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 8009206:	4b0b      	ldr	r3, [pc, #44]	; (8009234 <MX_CRC_Init+0x44>)
 8009208:	2200      	movs	r2, #0
 800920a:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 800920c:	4b09      	ldr	r3, [pc, #36]	; (8009234 <MX_CRC_Init+0x44>)
 800920e:	2200      	movs	r2, #0
 8009210:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 8009212:	4b08      	ldr	r3, [pc, #32]	; (8009234 <MX_CRC_Init+0x44>)
 8009214:	2201      	movs	r2, #1
 8009216:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8009218:	4806      	ldr	r0, [pc, #24]	; (8009234 <MX_CRC_Init+0x44>)
 800921a:	f7fa f843 	bl	80032a4 <HAL_CRC_Init>
 800921e:	4603      	mov	r3, r0
 8009220:	2b00      	cmp	r3, #0
 8009222:	d004      	beq.n	800922e <MX_CRC_Init+0x3e>
  {
    _Error_Handler(__FILE__, __LINE__);
 8009224:	f240 2133 	movw	r1, #563	; 0x233
 8009228:	4804      	ldr	r0, [pc, #16]	; (800923c <MX_CRC_Init+0x4c>)
 800922a:	f000 fbab 	bl	8009984 <_Error_Handler>
  }

}
 800922e:	bf00      	nop
 8009230:	bd80      	pop	{r7, pc}
 8009232:	bf00      	nop
 8009234:	2002cc94 	.word	0x2002cc94
 8009238:	40023000 	.word	0x40023000
 800923c:	0800a0ac 	.word	0x0800a0ac

08009240 <MX_DMA2D_Init>:

/* DMA2D init function */
static void MX_DMA2D_Init(void)
{
 8009240:	b580      	push	{r7, lr}
 8009242:	af00      	add	r7, sp, #0

  hdma2d.Instance = DMA2D;
 8009244:	4b18      	ldr	r3, [pc, #96]	; (80092a8 <MX_DMA2D_Init+0x68>)
 8009246:	4a19      	ldr	r2, [pc, #100]	; (80092ac <MX_DMA2D_Init+0x6c>)
 8009248:	601a      	str	r2, [r3, #0]
  hdma2d.Init.Mode = DMA2D_M2M;
 800924a:	4b17      	ldr	r3, [pc, #92]	; (80092a8 <MX_DMA2D_Init+0x68>)
 800924c:	2200      	movs	r2, #0
 800924e:	605a      	str	r2, [r3, #4]
  hdma2d.Init.ColorMode = DMA2D_OUTPUT_ARGB8888;
 8009250:	4b15      	ldr	r3, [pc, #84]	; (80092a8 <MX_DMA2D_Init+0x68>)
 8009252:	2200      	movs	r2, #0
 8009254:	609a      	str	r2, [r3, #8]
  hdma2d.Init.OutputOffset = 0;
 8009256:	4b14      	ldr	r3, [pc, #80]	; (80092a8 <MX_DMA2D_Init+0x68>)
 8009258:	2200      	movs	r2, #0
 800925a:	60da      	str	r2, [r3, #12]
  hdma2d.LayerCfg[1].InputOffset = 0;
 800925c:	4b12      	ldr	r3, [pc, #72]	; (80092a8 <MX_DMA2D_Init+0x68>)
 800925e:	2200      	movs	r2, #0
 8009260:	629a      	str	r2, [r3, #40]	; 0x28
  hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_ARGB8888;
 8009262:	4b11      	ldr	r3, [pc, #68]	; (80092a8 <MX_DMA2D_Init+0x68>)
 8009264:	2200      	movs	r2, #0
 8009266:	62da      	str	r2, [r3, #44]	; 0x2c
  hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 8009268:	4b0f      	ldr	r3, [pc, #60]	; (80092a8 <MX_DMA2D_Init+0x68>)
 800926a:	2200      	movs	r2, #0
 800926c:	631a      	str	r2, [r3, #48]	; 0x30
  hdma2d.LayerCfg[1].InputAlpha = 0;
 800926e:	4b0e      	ldr	r3, [pc, #56]	; (80092a8 <MX_DMA2D_Init+0x68>)
 8009270:	2200      	movs	r2, #0
 8009272:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 8009274:	480c      	ldr	r0, [pc, #48]	; (80092a8 <MX_DMA2D_Init+0x68>)
 8009276:	f7fa faaf 	bl	80037d8 <HAL_DMA2D_Init>
 800927a:	4603      	mov	r3, r0
 800927c:	2b00      	cmp	r3, #0
 800927e:	d004      	beq.n	800928a <MX_DMA2D_Init+0x4a>
  {
    _Error_Handler(__FILE__, __LINE__);
 8009280:	f240 2146 	movw	r1, #582	; 0x246
 8009284:	480a      	ldr	r0, [pc, #40]	; (80092b0 <MX_DMA2D_Init+0x70>)
 8009286:	f000 fb7d 	bl	8009984 <_Error_Handler>
  }

  if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
 800928a:	2101      	movs	r1, #1
 800928c:	4806      	ldr	r0, [pc, #24]	; (80092a8 <MX_DMA2D_Init+0x68>)
 800928e:	f7fa fd11 	bl	8003cb4 <HAL_DMA2D_ConfigLayer>
 8009292:	4603      	mov	r3, r0
 8009294:	2b00      	cmp	r3, #0
 8009296:	d004      	beq.n	80092a2 <MX_DMA2D_Init+0x62>
  {
    _Error_Handler(__FILE__, __LINE__);
 8009298:	f240 214b 	movw	r1, #587	; 0x24b
 800929c:	4804      	ldr	r0, [pc, #16]	; (80092b0 <MX_DMA2D_Init+0x70>)
 800929e:	f000 fb71 	bl	8009984 <_Error_Handler>
  }

}
 80092a2:	bf00      	nop
 80092a4:	bd80      	pop	{r7, pc}
 80092a6:	bf00      	nop
 80092a8:	2002ce7c 	.word	0x2002ce7c
 80092ac:	4002b000 	.word	0x4002b000
 80092b0:	0800a0ac 	.word	0x0800a0ac

080092b4 <MX_LTDC_Init>:

/* LTDC init function */
static void MX_LTDC_Init(void)
{
 80092b4:	b580      	push	{r7, lr}
 80092b6:	b08e      	sub	sp, #56	; 0x38
 80092b8:	af00      	add	r7, sp, #0

  LTDC_LayerCfgTypeDef pLayerCfg;

  hltdc.Instance = LTDC;
 80092ba:	4b3d      	ldr	r3, [pc, #244]	; (80093b0 <MX_LTDC_Init+0xfc>)
 80092bc:	4a3d      	ldr	r2, [pc, #244]	; (80093b4 <MX_LTDC_Init+0x100>)
 80092be:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 80092c0:	4b3b      	ldr	r3, [pc, #236]	; (80093b0 <MX_LTDC_Init+0xfc>)
 80092c2:	2200      	movs	r2, #0
 80092c4:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 80092c6:	4b3a      	ldr	r3, [pc, #232]	; (80093b0 <MX_LTDC_Init+0xfc>)
 80092c8:	2200      	movs	r2, #0
 80092ca:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 80092cc:	4b38      	ldr	r3, [pc, #224]	; (80093b0 <MX_LTDC_Init+0xfc>)
 80092ce:	2200      	movs	r2, #0
 80092d0:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 80092d2:	4b37      	ldr	r3, [pc, #220]	; (80093b0 <MX_LTDC_Init+0xfc>)
 80092d4:	2200      	movs	r2, #0
 80092d6:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 40;
 80092d8:	4b35      	ldr	r3, [pc, #212]	; (80093b0 <MX_LTDC_Init+0xfc>)
 80092da:	2228      	movs	r2, #40	; 0x28
 80092dc:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 9;
 80092de:	4b34      	ldr	r3, [pc, #208]	; (80093b0 <MX_LTDC_Init+0xfc>)
 80092e0:	2209      	movs	r2, #9
 80092e2:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 53;
 80092e4:	4b32      	ldr	r3, [pc, #200]	; (80093b0 <MX_LTDC_Init+0xfc>)
 80092e6:	2235      	movs	r2, #53	; 0x35
 80092e8:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 11;
 80092ea:	4b31      	ldr	r3, [pc, #196]	; (80093b0 <MX_LTDC_Init+0xfc>)
 80092ec:	220b      	movs	r2, #11
 80092ee:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 533;
 80092f0:	4b2f      	ldr	r3, [pc, #188]	; (80093b0 <MX_LTDC_Init+0xfc>)
 80092f2:	f240 2215 	movw	r2, #533	; 0x215
 80092f6:	625a      	str	r2, [r3, #36]	; 0x24
  hltdc.Init.AccumulatedActiveH = 283;
 80092f8:	4b2d      	ldr	r3, [pc, #180]	; (80093b0 <MX_LTDC_Init+0xfc>)
 80092fa:	f240 121b 	movw	r2, #283	; 0x11b
 80092fe:	629a      	str	r2, [r3, #40]	; 0x28
  hltdc.Init.TotalWidth = 565;
 8009300:	4b2b      	ldr	r3, [pc, #172]	; (80093b0 <MX_LTDC_Init+0xfc>)
 8009302:	f240 2235 	movw	r2, #565	; 0x235
 8009306:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc.Init.TotalHeigh = 285;
 8009308:	4b29      	ldr	r3, [pc, #164]	; (80093b0 <MX_LTDC_Init+0xfc>)
 800930a:	f240 121d 	movw	r2, #285	; 0x11d
 800930e:	631a      	str	r2, [r3, #48]	; 0x30
  hltdc.Init.Backcolor.Blue = 0;
 8009310:	4b27      	ldr	r3, [pc, #156]	; (80093b0 <MX_LTDC_Init+0xfc>)
 8009312:	2200      	movs	r2, #0
 8009314:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hltdc.Init.Backcolor.Green = 0;
 8009318:	4b25      	ldr	r3, [pc, #148]	; (80093b0 <MX_LTDC_Init+0xfc>)
 800931a:	2200      	movs	r2, #0
 800931c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  hltdc.Init.Backcolor.Red = 0;
 8009320:	4b23      	ldr	r3, [pc, #140]	; (80093b0 <MX_LTDC_Init+0xfc>)
 8009322:	2200      	movs	r2, #0
 8009324:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 8009328:	4821      	ldr	r0, [pc, #132]	; (80093b0 <MX_LTDC_Init+0xfc>)
 800932a:	f7fb fd29 	bl	8004d80 <HAL_LTDC_Init>
 800932e:	4603      	mov	r3, r0
 8009330:	2b00      	cmp	r3, #0
 8009332:	d004      	beq.n	800933e <MX_LTDC_Init+0x8a>
  {
    _Error_Handler(__FILE__, __LINE__);
 8009334:	f44f 711a 	mov.w	r1, #616	; 0x268
 8009338:	481f      	ldr	r0, [pc, #124]	; (80093b8 <MX_LTDC_Init+0x104>)
 800933a:	f000 fb23 	bl	8009984 <_Error_Handler>
  }

  pLayerCfg.WindowX0 = 0;
 800933e:	2300      	movs	r3, #0
 8009340:	607b      	str	r3, [r7, #4]
  pLayerCfg.WindowX1 = 480;
 8009342:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8009346:	60bb      	str	r3, [r7, #8]
  pLayerCfg.WindowY0 = 0;
 8009348:	2300      	movs	r3, #0
 800934a:	60fb      	str	r3, [r7, #12]
  pLayerCfg.WindowY1 = 272;
 800934c:	f44f 7388 	mov.w	r3, #272	; 0x110
 8009350:	613b      	str	r3, [r7, #16]
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 8009352:	2300      	movs	r3, #0
 8009354:	617b      	str	r3, [r7, #20]
  pLayerCfg.Alpha = 255;
 8009356:	23ff      	movs	r3, #255	; 0xff
 8009358:	61bb      	str	r3, [r7, #24]
  pLayerCfg.Alpha0 = 0;
 800935a:	2300      	movs	r3, #0
 800935c:	61fb      	str	r3, [r7, #28]
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 800935e:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8009362:	623b      	str	r3, [r7, #32]
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 8009364:	2307      	movs	r3, #7
 8009366:	627b      	str	r3, [r7, #36]	; 0x24
  pLayerCfg.FBStartAdress = 0xC0000000;
 8009368:	f04f 4340 	mov.w	r3, #3221225472	; 0xc0000000
 800936c:	62bb      	str	r3, [r7, #40]	; 0x28
  pLayerCfg.ImageWidth = 480;
 800936e:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8009372:	62fb      	str	r3, [r7, #44]	; 0x2c
  pLayerCfg.ImageHeight = 272;
 8009374:	f44f 7388 	mov.w	r3, #272	; 0x110
 8009378:	633b      	str	r3, [r7, #48]	; 0x30
  pLayerCfg.Backcolor.Blue = 0;
 800937a:	2300      	movs	r3, #0
 800937c:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  pLayerCfg.Backcolor.Green = 0;
 8009380:	2300      	movs	r3, #0
 8009382:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
  pLayerCfg.Backcolor.Red = 0;
 8009386:	2300      	movs	r3, #0
 8009388:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 800938c:	1d3b      	adds	r3, r7, #4
 800938e:	2200      	movs	r2, #0
 8009390:	4619      	mov	r1, r3
 8009392:	4807      	ldr	r0, [pc, #28]	; (80093b0 <MX_LTDC_Init+0xfc>)
 8009394:	f7fb fe9a 	bl	80050cc <HAL_LTDC_ConfigLayer>
 8009398:	4603      	mov	r3, r0
 800939a:	2b00      	cmp	r3, #0
 800939c:	d004      	beq.n	80093a8 <MX_LTDC_Init+0xf4>
  {
    _Error_Handler(__FILE__, __LINE__);
 800939e:	f44f 711f 	mov.w	r1, #636	; 0x27c
 80093a2:	4805      	ldr	r0, [pc, #20]	; (80093b8 <MX_LTDC_Init+0x104>)
 80093a4:	f000 faee 	bl	8009984 <_Error_Handler>
  }

}
 80093a8:	bf00      	nop
 80093aa:	3738      	adds	r7, #56	; 0x38
 80093ac:	46bd      	mov	sp, r7
 80093ae:	bd80      	pop	{r7, pc}
 80093b0:	2002cd04 	.word	0x2002cd04
 80093b4:	40016800 	.word	0x40016800
 80093b8:	0800a0ac 	.word	0x0800a0ac

080093bc <MX_TIM1_Init>:

/* Timer1 initialization */
static void MX_TIM1_Init(void)
{
 80093bc:	b580      	push	{r7, lr}
 80093be:	b09a      	sub	sp, #104	; 0x68
 80093c0:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig;
  TIM_MasterConfigTypeDef sMasterConfig;
  TIM_OC_InitTypeDef sConfigOC;
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig;

  htim1.Instance = TIM1;
 80093c2:	4b4d      	ldr	r3, [pc, #308]	; (80094f8 <MX_TIM1_Init+0x13c>)
 80093c4:	4a4d      	ldr	r2, [pc, #308]	; (80094fc <MX_TIM1_Init+0x140>)
 80093c6:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80093c8:	4b4b      	ldr	r3, [pc, #300]	; (80094f8 <MX_TIM1_Init+0x13c>)
 80093ca:	2200      	movs	r2, #0
 80093cc:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80093ce:	4b4a      	ldr	r3, [pc, #296]	; (80094f8 <MX_TIM1_Init+0x13c>)
 80093d0:	2200      	movs	r2, #0
 80093d2:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 80093d4:	4b48      	ldr	r3, [pc, #288]	; (80094f8 <MX_TIM1_Init+0x13c>)
 80093d6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80093da:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80093dc:	4b46      	ldr	r3, [pc, #280]	; (80094f8 <MX_TIM1_Init+0x13c>)
 80093de:	2200      	movs	r2, #0
 80093e0:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80093e2:	4b45      	ldr	r3, [pc, #276]	; (80094f8 <MX_TIM1_Init+0x13c>)
 80093e4:	2200      	movs	r2, #0
 80093e6:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80093e8:	4b43      	ldr	r3, [pc, #268]	; (80094f8 <MX_TIM1_Init+0x13c>)
 80093ea:	2200      	movs	r2, #0
 80093ec:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80093ee:	4842      	ldr	r0, [pc, #264]	; (80094f8 <MX_TIM1_Init+0x13c>)
 80093f0:	f7fd f991 	bl	8006716 <HAL_TIM_Base_Init>
 80093f4:	4603      	mov	r3, r0
 80093f6:	2b00      	cmp	r3, #0
 80093f8:	d004      	beq.n	8009404 <MX_TIM1_Init+0x48>
  {
    _Error_Handler(__FILE__, __LINE__);
 80093fa:	f240 2193 	movw	r1, #659	; 0x293
 80093fe:	4840      	ldr	r0, [pc, #256]	; (8009500 <MX_TIM1_Init+0x144>)
 8009400:	f000 fac0 	bl	8009984 <_Error_Handler>
  }

  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8009404:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009408:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800940a:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800940e:	4619      	mov	r1, r3
 8009410:	4839      	ldr	r0, [pc, #228]	; (80094f8 <MX_TIM1_Init+0x13c>)
 8009412:	f7fd fb6b 	bl	8006aec <HAL_TIM_ConfigClockSource>
 8009416:	4603      	mov	r3, r0
 8009418:	2b00      	cmp	r3, #0
 800941a:	d004      	beq.n	8009426 <MX_TIM1_Init+0x6a>
  {
    _Error_Handler(__FILE__, __LINE__);
 800941c:	f240 2199 	movw	r1, #665	; 0x299
 8009420:	4837      	ldr	r0, [pc, #220]	; (8009500 <MX_TIM1_Init+0x144>)
 8009422:	f000 faaf 	bl	8009984 <_Error_Handler>
  }

  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8009426:	4834      	ldr	r0, [pc, #208]	; (80094f8 <MX_TIM1_Init+0x13c>)
 8009428:	f7fd f9d6 	bl	80067d8 <HAL_TIM_PWM_Init>
 800942c:	4603      	mov	r3, r0
 800942e:	2b00      	cmp	r3, #0
 8009430:	d004      	beq.n	800943c <MX_TIM1_Init+0x80>
  {
    _Error_Handler(__FILE__, __LINE__);
 8009432:	f240 219e 	movw	r1, #670	; 0x29e
 8009436:	4832      	ldr	r0, [pc, #200]	; (8009500 <MX_TIM1_Init+0x144>)
 8009438:	f000 faa4 	bl	8009984 <_Error_Handler>
  }

  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800943c:	2300      	movs	r3, #0
 800943e:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8009440:	2300      	movs	r3, #0
 8009442:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8009444:	2300      	movs	r3, #0
 8009446:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8009448:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800944c:	4619      	mov	r1, r3
 800944e:	482a      	ldr	r0, [pc, #168]	; (80094f8 <MX_TIM1_Init+0x13c>)
 8009450:	f7fd ff9c 	bl	800738c <HAL_TIMEx_MasterConfigSynchronization>
 8009454:	4603      	mov	r3, r0
 8009456:	2b00      	cmp	r3, #0
 8009458:	d004      	beq.n	8009464 <MX_TIM1_Init+0xa8>
  {
    _Error_Handler(__FILE__, __LINE__);
 800945a:	f240 21a6 	movw	r1, #678	; 0x2a6
 800945e:	4828      	ldr	r0, [pc, #160]	; (8009500 <MX_TIM1_Init+0x144>)
 8009460:	f000 fa90 	bl	8009984 <_Error_Handler>
  }

  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8009464:	2360      	movs	r3, #96	; 0x60
 8009466:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 0;
 8009468:	2300      	movs	r3, #0
 800946a:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800946c:	2300      	movs	r3, #0
 800946e:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8009470:	2300      	movs	r3, #0
 8009472:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8009474:	2300      	movs	r3, #0
 8009476:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8009478:	2300      	movs	r3, #0
 800947a:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800947c:	2300      	movs	r3, #0
 800947e:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8009480:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8009484:	2200      	movs	r2, #0
 8009486:	4619      	mov	r1, r3
 8009488:	481b      	ldr	r0, [pc, #108]	; (80094f8 <MX_TIM1_Init+0x13c>)
 800948a:	f7fe f86d 	bl	8007568 <HAL_TIM_PWM_ConfigChannel>
 800948e:	4603      	mov	r3, r0
 8009490:	2b00      	cmp	r3, #0
 8009492:	d004      	beq.n	800949e <MX_TIM1_Init+0xe2>
  {
    _Error_Handler(__FILE__, __LINE__);
 8009494:	f240 21b2 	movw	r1, #690	; 0x2b2
 8009498:	4819      	ldr	r0, [pc, #100]	; (8009500 <MX_TIM1_Init+0x144>)
 800949a:	f000 fa73 	bl	8009984 <_Error_Handler>
  }

  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800949e:	2300      	movs	r3, #0
 80094a0:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80094a2:	2300      	movs	r3, #0
 80094a4:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80094a6:	2300      	movs	r3, #0
 80094a8:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80094aa:	2300      	movs	r3, #0
 80094ac:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80094ae:	2300      	movs	r3, #0
 80094b0:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80094b2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80094b6:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80094b8:	2300      	movs	r3, #0
 80094ba:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 80094bc:	2300      	movs	r3, #0
 80094be:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80094c0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80094c4:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 80094c6:	2300      	movs	r3, #0
 80094c8:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80094ca:	2300      	movs	r3, #0
 80094cc:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80094ce:	1d3b      	adds	r3, r7, #4
 80094d0:	4619      	mov	r1, r3
 80094d2:	4809      	ldr	r0, [pc, #36]	; (80094f8 <MX_TIM1_Init+0x13c>)
 80094d4:	f7fd ffae 	bl	8007434 <HAL_TIMEx_ConfigBreakDeadTime>
 80094d8:	4603      	mov	r3, r0
 80094da:	2b00      	cmp	r3, #0
 80094dc:	d004      	beq.n	80094e8 <MX_TIM1_Init+0x12c>
  {
    _Error_Handler(__FILE__, __LINE__);
 80094de:	f240 21c2 	movw	r1, #706	; 0x2c2
 80094e2:	4807      	ldr	r0, [pc, #28]	; (8009500 <MX_TIM1_Init+0x144>)
 80094e4:	f000 fa4e 	bl	8009984 <_Error_Handler>
  }

  HAL_TIM_MspPostInit(&htim1);
 80094e8:	4803      	ldr	r0, [pc, #12]	; (80094f8 <MX_TIM1_Init+0x13c>)
 80094ea:	f000 fbb5 	bl	8009c58 <HAL_TIM_MspPostInit>

}
 80094ee:	bf00      	nop
 80094f0:	3768      	adds	r7, #104	; 0x68
 80094f2:	46bd      	mov	sp, r7
 80094f4:	bd80      	pop	{r7, pc}
 80094f6:	bf00      	nop
 80094f8:	2002ce34 	.word	0x2002ce34
 80094fc:	40010000 	.word	0x40010000
 8009500:	0800a0ac 	.word	0x0800a0ac

08009504 <MX_TIM2_Init>:

/* Timier 2 initialization */
static void MX_TIM2_Init(void)
{
 8009504:	b580      	push	{r7, lr}
 8009506:	b08e      	sub	sp, #56	; 0x38
 8009508:	af00      	add	r7, sp, #0

  TIM_ClockConfigTypeDef sClockSourceConfig;
  TIM_MasterConfigTypeDef sMasterConfig;
  TIM_OC_InitTypeDef sConfigOC;

  htim2.Instance = TIM2;
 800950a:	4b35      	ldr	r3, [pc, #212]	; (80095e0 <MX_TIM2_Init+0xdc>)
 800950c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8009510:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8009512:	4b33      	ldr	r3, [pc, #204]	; (80095e0 <MX_TIM2_Init+0xdc>)
 8009514:	2200      	movs	r2, #0
 8009516:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8009518:	4b31      	ldr	r3, [pc, #196]	; (80095e0 <MX_TIM2_Init+0xdc>)
 800951a:	2200      	movs	r2, #0
 800951c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 800951e:	4b30      	ldr	r3, [pc, #192]	; (80095e0 <MX_TIM2_Init+0xdc>)
 8009520:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8009524:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8009526:	4b2e      	ldr	r3, [pc, #184]	; (80095e0 <MX_TIM2_Init+0xdc>)
 8009528:	2200      	movs	r2, #0
 800952a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800952c:	4b2c      	ldr	r3, [pc, #176]	; (80095e0 <MX_TIM2_Init+0xdc>)
 800952e:	2200      	movs	r2, #0
 8009530:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8009532:	482b      	ldr	r0, [pc, #172]	; (80095e0 <MX_TIM2_Init+0xdc>)
 8009534:	f7fd f8ef 	bl	8006716 <HAL_TIM_Base_Init>
 8009538:	4603      	mov	r3, r0
 800953a:	2b00      	cmp	r3, #0
 800953c:	d004      	beq.n	8009548 <MX_TIM2_Init+0x44>
  {
    _Error_Handler(__FILE__, __LINE__);
 800953e:	f240 21d9 	movw	r1, #729	; 0x2d9
 8009542:	4828      	ldr	r0, [pc, #160]	; (80095e4 <MX_TIM2_Init+0xe0>)
 8009544:	f000 fa1e 	bl	8009984 <_Error_Handler>
  }

  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8009548:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800954c:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800954e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8009552:	4619      	mov	r1, r3
 8009554:	4822      	ldr	r0, [pc, #136]	; (80095e0 <MX_TIM2_Init+0xdc>)
 8009556:	f7fd fac9 	bl	8006aec <HAL_TIM_ConfigClockSource>
 800955a:	4603      	mov	r3, r0
 800955c:	2b00      	cmp	r3, #0
 800955e:	d004      	beq.n	800956a <MX_TIM2_Init+0x66>
  {
    _Error_Handler(__FILE__, __LINE__);
 8009560:	f240 21df 	movw	r1, #735	; 0x2df
 8009564:	481f      	ldr	r0, [pc, #124]	; (80095e4 <MX_TIM2_Init+0xe0>)
 8009566:	f000 fa0d 	bl	8009984 <_Error_Handler>
  }

  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 800956a:	481d      	ldr	r0, [pc, #116]	; (80095e0 <MX_TIM2_Init+0xdc>)
 800956c:	f7fd f934 	bl	80067d8 <HAL_TIM_PWM_Init>
 8009570:	4603      	mov	r3, r0
 8009572:	2b00      	cmp	r3, #0
 8009574:	d004      	beq.n	8009580 <MX_TIM2_Init+0x7c>
  {
    _Error_Handler(__FILE__, __LINE__);
 8009576:	f44f 7139 	mov.w	r1, #740	; 0x2e4
 800957a:	481a      	ldr	r0, [pc, #104]	; (80095e4 <MX_TIM2_Init+0xe0>)
 800957c:	f000 fa02 	bl	8009984 <_Error_Handler>
  }

  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8009580:	2300      	movs	r3, #0
 8009582:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8009584:	2300      	movs	r3, #0
 8009586:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8009588:	f107 031c 	add.w	r3, r7, #28
 800958c:	4619      	mov	r1, r3
 800958e:	4814      	ldr	r0, [pc, #80]	; (80095e0 <MX_TIM2_Init+0xdc>)
 8009590:	f7fd fefc 	bl	800738c <HAL_TIMEx_MasterConfigSynchronization>
 8009594:	4603      	mov	r3, r0
 8009596:	2b00      	cmp	r3, #0
 8009598:	d004      	beq.n	80095a4 <MX_TIM2_Init+0xa0>
  {
    _Error_Handler(__FILE__, __LINE__);
 800959a:	f240 21eb 	movw	r1, #747	; 0x2eb
 800959e:	4811      	ldr	r0, [pc, #68]	; (80095e4 <MX_TIM2_Init+0xe0>)
 80095a0:	f000 f9f0 	bl	8009984 <_Error_Handler>
  }

  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80095a4:	2360      	movs	r3, #96	; 0x60
 80095a6:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80095a8:	2300      	movs	r3, #0
 80095aa:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80095ac:	2300      	movs	r3, #0
 80095ae:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80095b0:	2300      	movs	r3, #0
 80095b2:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80095b4:	463b      	mov	r3, r7
 80095b6:	2200      	movs	r2, #0
 80095b8:	4619      	mov	r1, r3
 80095ba:	4809      	ldr	r0, [pc, #36]	; (80095e0 <MX_TIM2_Init+0xdc>)
 80095bc:	f7fd ffd4 	bl	8007568 <HAL_TIM_PWM_ConfigChannel>
 80095c0:	4603      	mov	r3, r0
 80095c2:	2b00      	cmp	r3, #0
 80095c4:	d004      	beq.n	80095d0 <MX_TIM2_Init+0xcc>
  {
    _Error_Handler(__FILE__, __LINE__);
 80095c6:	f44f 713d 	mov.w	r1, #756	; 0x2f4
 80095ca:	4806      	ldr	r0, [pc, #24]	; (80095e4 <MX_TIM2_Init+0xe0>)
 80095cc:	f000 f9da 	bl	8009984 <_Error_Handler>
  }

  HAL_TIM_MspPostInit(&htim2);
 80095d0:	4803      	ldr	r0, [pc, #12]	; (80095e0 <MX_TIM2_Init+0xdc>)
 80095d2:	f000 fb41 	bl	8009c58 <HAL_TIM_MspPostInit>

}
 80095d6:	bf00      	nop
 80095d8:	3738      	adds	r7, #56	; 0x38
 80095da:	46bd      	mov	sp, r7
 80095dc:	bd80      	pop	{r7, pc}
 80095de:	bf00      	nop
 80095e0:	2002cee8 	.word	0x2002cee8
 80095e4:	0800a0ac 	.word	0x0800a0ac

080095e8 <MX_TIM3_Init>:

/* Timer 3 initialization */
static void MX_TIM3_Init(void)
{
 80095e8:	b580      	push	{r7, lr}
 80095ea:	b088      	sub	sp, #32
 80095ec:	af00      	add	r7, sp, #0

  TIM_ClockConfigTypeDef sClockSourceConfig;
  TIM_MasterConfigTypeDef sMasterConfig;

  htim3.Instance = TIM3;
 80095ee:	4b22      	ldr	r3, [pc, #136]	; (8009678 <MX_TIM3_Init+0x90>)
 80095f0:	4a22      	ldr	r2, [pc, #136]	; (800967c <MX_TIM3_Init+0x94>)
 80095f2:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 108-1;
 80095f4:	4b20      	ldr	r3, [pc, #128]	; (8009678 <MX_TIM3_Init+0x90>)
 80095f6:	226b      	movs	r2, #107	; 0x6b
 80095f8:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80095fa:	4b1f      	ldr	r3, [pc, #124]	; (8009678 <MX_TIM3_Init+0x90>)
 80095fc:	2200      	movs	r2, #0
 80095fe:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 0xffff-1;
 8009600:	4b1d      	ldr	r3, [pc, #116]	; (8009678 <MX_TIM3_Init+0x90>)
 8009602:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8009606:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8009608:	4b1b      	ldr	r3, [pc, #108]	; (8009678 <MX_TIM3_Init+0x90>)
 800960a:	2200      	movs	r2, #0
 800960c:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800960e:	4b1a      	ldr	r3, [pc, #104]	; (8009678 <MX_TIM3_Init+0x90>)
 8009610:	2200      	movs	r2, #0
 8009612:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8009614:	4818      	ldr	r0, [pc, #96]	; (8009678 <MX_TIM3_Init+0x90>)
 8009616:	f7fd f87e 	bl	8006716 <HAL_TIM_Base_Init>
 800961a:	4603      	mov	r3, r0
 800961c:	2b00      	cmp	r3, #0
 800961e:	d004      	beq.n	800962a <MX_TIM3_Init+0x42>
  {
    _Error_Handler(__FILE__, __LINE__);
 8009620:	f240 310a 	movw	r1, #778	; 0x30a
 8009624:	4816      	ldr	r0, [pc, #88]	; (8009680 <MX_TIM3_Init+0x98>)
 8009626:	f000 f9ad 	bl	8009984 <_Error_Handler>
  }

  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800962a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800962e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8009630:	f107 0310 	add.w	r3, r7, #16
 8009634:	4619      	mov	r1, r3
 8009636:	4810      	ldr	r0, [pc, #64]	; (8009678 <MX_TIM3_Init+0x90>)
 8009638:	f7fd fa58 	bl	8006aec <HAL_TIM_ConfigClockSource>
 800963c:	4603      	mov	r3, r0
 800963e:	2b00      	cmp	r3, #0
 8009640:	d004      	beq.n	800964c <MX_TIM3_Init+0x64>
  {
    _Error_Handler(__FILE__, __LINE__);
 8009642:	f44f 7144 	mov.w	r1, #784	; 0x310
 8009646:	480e      	ldr	r0, [pc, #56]	; (8009680 <MX_TIM3_Init+0x98>)
 8009648:	f000 f99c 	bl	8009984 <_Error_Handler>
  }

  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800964c:	2300      	movs	r3, #0
 800964e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8009650:	2300      	movs	r3, #0
 8009652:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8009654:	1d3b      	adds	r3, r7, #4
 8009656:	4619      	mov	r1, r3
 8009658:	4807      	ldr	r0, [pc, #28]	; (8009678 <MX_TIM3_Init+0x90>)
 800965a:	f7fd fe97 	bl	800738c <HAL_TIMEx_MasterConfigSynchronization>
 800965e:	4603      	mov	r3, r0
 8009660:	2b00      	cmp	r3, #0
 8009662:	d004      	beq.n	800966e <MX_TIM3_Init+0x86>
  {
    _Error_Handler(__FILE__, __LINE__);
 8009664:	f240 3117 	movw	r1, #791	; 0x317
 8009668:	4805      	ldr	r0, [pc, #20]	; (8009680 <MX_TIM3_Init+0x98>)
 800966a:	f000 f98b 	bl	8009984 <_Error_Handler>
  }

}
 800966e:	bf00      	nop
 8009670:	3720      	adds	r7, #32
 8009672:	46bd      	mov	sp, r7
 8009674:	bd80      	pop	{r7, pc}
 8009676:	bf00      	nop
 8009678:	2002ccc4 	.word	0x2002ccc4
 800967c:	40000400 	.word	0x40000400
 8009680:	0800a0ac 	.word	0x0800a0ac

08009684 <MX_USART1_UART_Init>:

/* USART 1 Initialization */
static void MX_USART1_UART_Init(void)
{
 8009684:	b580      	push	{r7, lr}
 8009686:	af00      	add	r7, sp, #0

  huart1.Instance = USART1;
 8009688:	4b15      	ldr	r3, [pc, #84]	; (80096e0 <MX_USART1_UART_Init+0x5c>)
 800968a:	4a16      	ldr	r2, [pc, #88]	; (80096e4 <MX_USART1_UART_Init+0x60>)
 800968c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800968e:	4b14      	ldr	r3, [pc, #80]	; (80096e0 <MX_USART1_UART_Init+0x5c>)
 8009690:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8009694:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8009696:	4b12      	ldr	r3, [pc, #72]	; (80096e0 <MX_USART1_UART_Init+0x5c>)
 8009698:	2200      	movs	r2, #0
 800969a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800969c:	4b10      	ldr	r3, [pc, #64]	; (80096e0 <MX_USART1_UART_Init+0x5c>)
 800969e:	2200      	movs	r2, #0
 80096a0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80096a2:	4b0f      	ldr	r3, [pc, #60]	; (80096e0 <MX_USART1_UART_Init+0x5c>)
 80096a4:	2200      	movs	r2, #0
 80096a6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80096a8:	4b0d      	ldr	r3, [pc, #52]	; (80096e0 <MX_USART1_UART_Init+0x5c>)
 80096aa:	220c      	movs	r2, #12
 80096ac:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80096ae:	4b0c      	ldr	r3, [pc, #48]	; (80096e0 <MX_USART1_UART_Init+0x5c>)
 80096b0:	2200      	movs	r2, #0
 80096b2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80096b4:	4b0a      	ldr	r3, [pc, #40]	; (80096e0 <MX_USART1_UART_Init+0x5c>)
 80096b6:	2200      	movs	r2, #0
 80096b8:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80096ba:	4b09      	ldr	r3, [pc, #36]	; (80096e0 <MX_USART1_UART_Init+0x5c>)
 80096bc:	2200      	movs	r2, #0
 80096be:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80096c0:	4b07      	ldr	r3, [pc, #28]	; (80096e0 <MX_USART1_UART_Init+0x5c>)
 80096c2:	2200      	movs	r2, #0
 80096c4:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80096c6:	4806      	ldr	r0, [pc, #24]	; (80096e0 <MX_USART1_UART_Init+0x5c>)
 80096c8:	f7fe f918 	bl	80078fc <HAL_UART_Init>
 80096cc:	4603      	mov	r3, r0
 80096ce:	2b00      	cmp	r3, #0
 80096d0:	d004      	beq.n	80096dc <MX_USART1_UART_Init+0x58>
  {
    _Error_Handler(__FILE__, __LINE__);
 80096d2:	f44f 714b 	mov.w	r1, #812	; 0x32c
 80096d6:	4804      	ldr	r0, [pc, #16]	; (80096e8 <MX_USART1_UART_Init+0x64>)
 80096d8:	f000 f954 	bl	8009984 <_Error_Handler>
  }

}
 80096dc:	bf00      	nop
 80096de:	bd80      	pop	{r7, pc}
 80096e0:	2002cdac 	.word	0x2002cdac
 80096e4:	40011000 	.word	0x40011000
 80096e8:	0800a0ac 	.word	0x0800a0ac

080096ec <MX_FMC_Init>:

/* FMC initialization  */
static void MX_FMC_Init(void)
{
 80096ec:	b580      	push	{r7, lr}
 80096ee:	b088      	sub	sp, #32
 80096f0:	af00      	add	r7, sp, #0
  FMC_SDRAM_TimingTypeDef SdramTiming;

  /* Perform the SDRAM1 memory initialization sequence */
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 80096f2:	4b21      	ldr	r3, [pc, #132]	; (8009778 <MX_FMC_Init+0x8c>)
 80096f4:	4a21      	ldr	r2, [pc, #132]	; (800977c <MX_FMC_Init+0x90>)
 80096f6:	601a      	str	r2, [r3, #0]

  hsdram1.Init.SDBank = FMC_SDRAM_BANK1;
 80096f8:	4b1f      	ldr	r3, [pc, #124]	; (8009778 <MX_FMC_Init+0x8c>)
 80096fa:	2200      	movs	r2, #0
 80096fc:	605a      	str	r2, [r3, #4]
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
 80096fe:	4b1e      	ldr	r3, [pc, #120]	; (8009778 <MX_FMC_Init+0x8c>)
 8009700:	2200      	movs	r2, #0
 8009702:	609a      	str	r2, [r3, #8]
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_12;
 8009704:	4b1c      	ldr	r3, [pc, #112]	; (8009778 <MX_FMC_Init+0x8c>)
 8009706:	2204      	movs	r2, #4
 8009708:	60da      	str	r2, [r3, #12]
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
 800970a:	4b1b      	ldr	r3, [pc, #108]	; (8009778 <MX_FMC_Init+0x8c>)
 800970c:	2210      	movs	r2, #16
 800970e:	611a      	str	r2, [r3, #16]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8009710:	4b19      	ldr	r3, [pc, #100]	; (8009778 <MX_FMC_Init+0x8c>)
 8009712:	2240      	movs	r2, #64	; 0x40
 8009714:	615a      	str	r2, [r3, #20]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_3;
 8009716:	4b18      	ldr	r3, [pc, #96]	; (8009778 <MX_FMC_Init+0x8c>)
 8009718:	f44f 72c0 	mov.w	r2, #384	; 0x180
 800971c:	619a      	str	r2, [r3, #24]
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 800971e:	4b16      	ldr	r3, [pc, #88]	; (8009778 <MX_FMC_Init+0x8c>)
 8009720:	2200      	movs	r2, #0
 8009722:	61da      	str	r2, [r3, #28]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_PERIOD_2;
 8009724:	4b14      	ldr	r3, [pc, #80]	; (8009778 <MX_FMC_Init+0x8c>)
 8009726:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800972a:	621a      	str	r2, [r3, #32]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_ENABLE;
 800972c:	4b12      	ldr	r3, [pc, #72]	; (8009778 <MX_FMC_Init+0x8c>)
 800972e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8009732:	625a      	str	r2, [r3, #36]	; 0x24
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_0;
 8009734:	4b10      	ldr	r3, [pc, #64]	; (8009778 <MX_FMC_Init+0x8c>)
 8009736:	2200      	movs	r2, #0
 8009738:	629a      	str	r2, [r3, #40]	; 0x28

  SdramTiming.LoadToActiveDelay = 2;
 800973a:	2302      	movs	r3, #2
 800973c:	607b      	str	r3, [r7, #4]
  SdramTiming.ExitSelfRefreshDelay = 7;
 800973e:	2307      	movs	r3, #7
 8009740:	60bb      	str	r3, [r7, #8]
  SdramTiming.SelfRefreshTime = 4;
 8009742:	2304      	movs	r3, #4
 8009744:	60fb      	str	r3, [r7, #12]
  SdramTiming.RowCycleDelay = 7;
 8009746:	2307      	movs	r3, #7
 8009748:	613b      	str	r3, [r7, #16]
  SdramTiming.WriteRecoveryTime = 3;
 800974a:	2303      	movs	r3, #3
 800974c:	617b      	str	r3, [r7, #20]
  SdramTiming.RPDelay = 2;
 800974e:	2302      	movs	r3, #2
 8009750:	61bb      	str	r3, [r7, #24]
  SdramTiming.RCDDelay = 2;
 8009752:	2302      	movs	r3, #2
 8009754:	61fb      	str	r3, [r7, #28]

  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 8009756:	1d3b      	adds	r3, r7, #4
 8009758:	4619      	mov	r1, r3
 800975a:	4807      	ldr	r0, [pc, #28]	; (8009778 <MX_FMC_Init+0x8c>)
 800975c:	f7fc ff5c 	bl	8006618 <HAL_SDRAM_Init>
 8009760:	4603      	mov	r3, r0
 8009762:	2b00      	cmp	r3, #0
 8009764:	d004      	beq.n	8009770 <MX_FMC_Init+0x84>
  {
    _Error_Handler(__FILE__, __LINE__);
 8009766:	f240 314e 	movw	r1, #846	; 0x34e
 800976a:	4805      	ldr	r0, [pc, #20]	; (8009780 <MX_FMC_Init+0x94>)
 800976c:	f000 f90a 	bl	8009984 <_Error_Handler>
  }

}
 8009770:	bf00      	nop
 8009772:	3720      	adds	r7, #32
 8009774:	46bd      	mov	sp, r7
 8009776:	bd80      	pop	{r7, pc}
 8009778:	2002cf28 	.word	0x2002cf28
 800977c:	a0000140 	.word	0xa0000140
 8009780:	0800a0ac 	.word	0x0800a0ac

08009784 <MX_GPIO_Init>:

/* Configure pins as Analog and Input/Output */
static void MX_GPIO_Init(void)
{
 8009784:	b580      	push	{r7, lr}
 8009786:	b090      	sub	sp, #64	; 0x40
 8009788:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct;

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800978a:	4a70      	ldr	r2, [pc, #448]	; (800994c <MX_GPIO_Init+0x1c8>)
 800978c:	4b6f      	ldr	r3, [pc, #444]	; (800994c <MX_GPIO_Init+0x1c8>)
 800978e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009790:	f043 0310 	orr.w	r3, r3, #16
 8009794:	6313      	str	r3, [r2, #48]	; 0x30
 8009796:	4b6d      	ldr	r3, [pc, #436]	; (800994c <MX_GPIO_Init+0x1c8>)
 8009798:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800979a:	f003 0310 	and.w	r3, r3, #16
 800979e:	62bb      	str	r3, [r7, #40]	; 0x28
 80097a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80097a2:	4a6a      	ldr	r2, [pc, #424]	; (800994c <MX_GPIO_Init+0x1c8>)
 80097a4:	4b69      	ldr	r3, [pc, #420]	; (800994c <MX_GPIO_Init+0x1c8>)
 80097a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80097a8:	f043 0301 	orr.w	r3, r3, #1
 80097ac:	6313      	str	r3, [r2, #48]	; 0x30
 80097ae:	4b67      	ldr	r3, [pc, #412]	; (800994c <MX_GPIO_Init+0x1c8>)
 80097b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80097b2:	f003 0301 	and.w	r3, r3, #1
 80097b6:	627b      	str	r3, [r7, #36]	; 0x24
 80097b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80097ba:	4a64      	ldr	r2, [pc, #400]	; (800994c <MX_GPIO_Init+0x1c8>)
 80097bc:	4b63      	ldr	r3, [pc, #396]	; (800994c <MX_GPIO_Init+0x1c8>)
 80097be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80097c0:	f043 0302 	orr.w	r3, r3, #2
 80097c4:	6313      	str	r3, [r2, #48]	; 0x30
 80097c6:	4b61      	ldr	r3, [pc, #388]	; (800994c <MX_GPIO_Init+0x1c8>)
 80097c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80097ca:	f003 0302 	and.w	r3, r3, #2
 80097ce:	623b      	str	r3, [r7, #32]
 80097d0:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80097d2:	4a5e      	ldr	r2, [pc, #376]	; (800994c <MX_GPIO_Init+0x1c8>)
 80097d4:	4b5d      	ldr	r3, [pc, #372]	; (800994c <MX_GPIO_Init+0x1c8>)
 80097d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80097d8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80097dc:	6313      	str	r3, [r2, #48]	; 0x30
 80097de:	4b5b      	ldr	r3, [pc, #364]	; (800994c <MX_GPIO_Init+0x1c8>)
 80097e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80097e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80097e6:	61fb      	str	r3, [r7, #28]
 80097e8:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 80097ea:	4a58      	ldr	r2, [pc, #352]	; (800994c <MX_GPIO_Init+0x1c8>)
 80097ec:	4b57      	ldr	r3, [pc, #348]	; (800994c <MX_GPIO_Init+0x1c8>)
 80097ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80097f0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80097f4:	6313      	str	r3, [r2, #48]	; 0x30
 80097f6:	4b55      	ldr	r3, [pc, #340]	; (800994c <MX_GPIO_Init+0x1c8>)
 80097f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80097fa:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80097fe:	61bb      	str	r3, [r7, #24]
 8009800:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8009802:	4a52      	ldr	r2, [pc, #328]	; (800994c <MX_GPIO_Init+0x1c8>)
 8009804:	4b51      	ldr	r3, [pc, #324]	; (800994c <MX_GPIO_Init+0x1c8>)
 8009806:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009808:	f043 0308 	orr.w	r3, r3, #8
 800980c:	6313      	str	r3, [r2, #48]	; 0x30
 800980e:	4b4f      	ldr	r3, [pc, #316]	; (800994c <MX_GPIO_Init+0x1c8>)
 8009810:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009812:	f003 0308 	and.w	r3, r3, #8
 8009816:	617b      	str	r3, [r7, #20]
 8009818:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 800981a:	4a4c      	ldr	r2, [pc, #304]	; (800994c <MX_GPIO_Init+0x1c8>)
 800981c:	4b4b      	ldr	r3, [pc, #300]	; (800994c <MX_GPIO_Init+0x1c8>)
 800981e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009820:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8009824:	6313      	str	r3, [r2, #48]	; 0x30
 8009826:	4b49      	ldr	r3, [pc, #292]	; (800994c <MX_GPIO_Init+0x1c8>)
 8009828:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800982a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800982e:	613b      	str	r3, [r7, #16]
 8009830:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8009832:	4a46      	ldr	r2, [pc, #280]	; (800994c <MX_GPIO_Init+0x1c8>)
 8009834:	4b45      	ldr	r3, [pc, #276]	; (800994c <MX_GPIO_Init+0x1c8>)
 8009836:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009838:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800983c:	6313      	str	r3, [r2, #48]	; 0x30
 800983e:	4b43      	ldr	r3, [pc, #268]	; (800994c <MX_GPIO_Init+0x1c8>)
 8009840:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009842:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009846:	60fb      	str	r3, [r7, #12]
 8009848:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800984a:	4a40      	ldr	r2, [pc, #256]	; (800994c <MX_GPIO_Init+0x1c8>)
 800984c:	4b3f      	ldr	r3, [pc, #252]	; (800994c <MX_GPIO_Init+0x1c8>)
 800984e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009850:	f043 0320 	orr.w	r3, r3, #32
 8009854:	6313      	str	r3, [r2, #48]	; 0x30
 8009856:	4b3d      	ldr	r3, [pc, #244]	; (800994c <MX_GPIO_Init+0x1c8>)
 8009858:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800985a:	f003 0320 	and.w	r3, r3, #32
 800985e:	60bb      	str	r3, [r7, #8]
 8009860:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8009862:	4a3a      	ldr	r2, [pc, #232]	; (800994c <MX_GPIO_Init+0x1c8>)
 8009864:	4b39      	ldr	r3, [pc, #228]	; (800994c <MX_GPIO_Init+0x1c8>)
 8009866:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009868:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800986c:	6313      	str	r3, [r2, #48]	; 0x30
 800986e:	4b37      	ldr	r3, [pc, #220]	; (800994c <MX_GPIO_Init+0x1c8>)
 8009870:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009872:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009876:	607b      	str	r3, [r7, #4]
 8009878:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800987a:	4a34      	ldr	r2, [pc, #208]	; (800994c <MX_GPIO_Init+0x1c8>)
 800987c:	4b33      	ldr	r3, [pc, #204]	; (800994c <MX_GPIO_Init+0x1c8>)
 800987e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009880:	f043 0304 	orr.w	r3, r3, #4
 8009884:	6313      	str	r3, [r2, #48]	; 0x30
 8009886:	4b31      	ldr	r3, [pc, #196]	; (800994c <MX_GPIO_Init+0x1c8>)
 8009888:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800988a:	f003 0304 	and.w	r3, r3, #4
 800988e:	603b      	str	r3, [r7, #0]
 8009890:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOI, GPIO_PIN_3|GPIO_PIN_0, GPIO_PIN_RESET);
 8009892:	2200      	movs	r2, #0
 8009894:	2109      	movs	r1, #9
 8009896:	482e      	ldr	r0, [pc, #184]	; (8009950 <MX_GPIO_Init+0x1cc>)
 8009898:	f7fa fd08 	bl	80042ac <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_Port, LCD_BL_CTRL_Pin, GPIO_PIN_SET);
 800989c:	2201      	movs	r2, #1
 800989e:	2108      	movs	r1, #8
 80098a0:	482c      	ldr	r0, [pc, #176]	; (8009954 <MX_GPIO_Init+0x1d0>)
 80098a2:	f7fa fd03 	bl	80042ac <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LCD_DISP_GPIO_Port, LCD_DISP_Pin, GPIO_PIN_SET);
 80098a6:	2201      	movs	r2, #1
 80098a8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80098ac:	4828      	ldr	r0, [pc, #160]	; (8009950 <MX_GPIO_Init+0x1cc>)
 80098ae:	f7fa fcfd 	bl	80042ac <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOH, GPIO_PIN_6, GPIO_PIN_RESET);
 80098b2:	2200      	movs	r2, #0
 80098b4:	2140      	movs	r1, #64	; 0x40
 80098b6:	4828      	ldr	r0, [pc, #160]	; (8009958 <MX_GPIO_Init+0x1d4>)
 80098b8:	f7fa fcf8 	bl	80042ac <HAL_GPIO_WritePin>

  /* Configure GPIO: PI3 LCD_DISP_Pin PI0 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|LCD_DISP_Pin|GPIO_PIN_0;
 80098bc:	f241 0309 	movw	r3, #4105	; 0x1009
 80098c0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80098c2:	2301      	movs	r3, #1
 80098c4:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80098c6:	2300      	movs	r3, #0
 80098c8:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80098ca:	2300      	movs	r3, #0
 80098cc:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 80098ce:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80098d2:	4619      	mov	r1, r3
 80098d4:	481e      	ldr	r0, [pc, #120]	; (8009950 <MX_GPIO_Init+0x1cc>)
 80098d6:	f7fa fb27 	bl	8003f28 <HAL_GPIO_Init>

  /* Configure GPIO: PI2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 80098da:	2304      	movs	r3, #4
 80098dc:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80098de:	2300      	movs	r3, #0
 80098e0:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80098e2:	2300      	movs	r3, #0
 80098e4:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 80098e6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80098ea:	4619      	mov	r1, r3
 80098ec:	4818      	ldr	r0, [pc, #96]	; (8009950 <MX_GPIO_Init+0x1cc>)
 80098ee:	f7fa fb1b 	bl	8003f28 <HAL_GPIO_Init>

  /* Configure GPIO: LCD_BL_CTRL_Pin */
  GPIO_InitStruct.Pin = LCD_BL_CTRL_Pin;
 80098f2:	2308      	movs	r3, #8
 80098f4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80098f6:	2301      	movs	r3, #1
 80098f8:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80098fa:	2300      	movs	r3, #0
 80098fc:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80098fe:	2300      	movs	r3, #0
 8009900:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_Port, &GPIO_InitStruct);
 8009902:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8009906:	4619      	mov	r1, r3
 8009908:	4812      	ldr	r0, [pc, #72]	; (8009954 <MX_GPIO_Init+0x1d0>)
 800990a:	f7fa fb0d 	bl	8003f28 <HAL_GPIO_Init>

  /* Configure GPIO: LCD_INT_Pin */
  GPIO_InitStruct.Pin = LCD_INT_Pin;
 800990e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8009912:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8009914:	4b11      	ldr	r3, [pc, #68]	; (800995c <MX_GPIO_Init+0x1d8>)
 8009916:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009918:	2300      	movs	r3, #0
 800991a:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(LCD_INT_GPIO_Port, &GPIO_InitStruct);
 800991c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8009920:	4619      	mov	r1, r3
 8009922:	480b      	ldr	r0, [pc, #44]	; (8009950 <MX_GPIO_Init+0x1cc>)
 8009924:	f7fa fb00 	bl	8003f28 <HAL_GPIO_Init>

  /* Configure GPIO: PH6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 8009928:	2340      	movs	r3, #64	; 0x40
 800992a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800992c:	2301      	movs	r3, #1
 800992e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009930:	2300      	movs	r3, #0
 8009932:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8009934:	2300      	movs	r3, #0
 8009936:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8009938:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800993c:	4619      	mov	r1, r3
 800993e:	4806      	ldr	r0, [pc, #24]	; (8009958 <MX_GPIO_Init+0x1d4>)
 8009940:	f7fa faf2 	bl	8003f28 <HAL_GPIO_Init>

}
 8009944:	bf00      	nop
 8009946:	3740      	adds	r7, #64	; 0x40
 8009948:	46bd      	mov	sp, r7
 800994a:	bd80      	pop	{r7, pc}
 800994c:	40023800 	.word	0x40023800
 8009950:	40022000 	.word	0x40022000
 8009954:	40022800 	.word	0x40022800
 8009958:	40021c00 	.word	0x40021c00
 800995c:	10120000 	.word	0x10120000

08009960 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8009960:	b580      	push	{r7, lr}
 8009962:	b082      	sub	sp, #8
 8009964:	af00      	add	r7, sp, #0
 8009966:	6078      	str	r0, [r7, #4]
  if (htim->Instance == TIM6) {
 8009968:	687b      	ldr	r3, [r7, #4]
 800996a:	681b      	ldr	r3, [r3, #0]
 800996c:	4a04      	ldr	r2, [pc, #16]	; (8009980 <HAL_TIM_PeriodElapsedCallback+0x20>)
 800996e:	4293      	cmp	r3, r2
 8009970:	d101      	bne.n	8009976 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8009972:	f7f9 fb1f 	bl	8002fb4 <HAL_IncTick>
  }
}
 8009976:	bf00      	nop
 8009978:	3708      	adds	r7, #8
 800997a:	46bd      	mov	sp, r7
 800997c:	bd80      	pop	{r7, pc}
 800997e:	bf00      	nop
 8009980:	40001000 	.word	0x40001000

08009984 <_Error_Handler>:

void _Error_Handler(char *file, int line)
{
 8009984:	b480      	push	{r7}
 8009986:	b083      	sub	sp, #12
 8009988:	af00      	add	r7, sp, #0
 800998a:	6078      	str	r0, [r7, #4]
 800998c:	6039      	str	r1, [r7, #0]
  while(1)
 800998e:	e7fe      	b.n	800998e <_Error_Handler+0xa>

08009990 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8009990:	b580      	push	{r7, lr}
 8009992:	b082      	sub	sp, #8
 8009994:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8009996:	4a24      	ldr	r2, [pc, #144]	; (8009a28 <HAL_MspInit+0x98>)
 8009998:	4b23      	ldr	r3, [pc, #140]	; (8009a28 <HAL_MspInit+0x98>)
 800999a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800999c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80099a0:	6413      	str	r3, [r2, #64]	; 0x40
 80099a2:	4b21      	ldr	r3, [pc, #132]	; (8009a28 <HAL_MspInit+0x98>)
 80099a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80099a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80099aa:	607b      	str	r3, [r7, #4]
 80099ac:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80099ae:	4a1e      	ldr	r2, [pc, #120]	; (8009a28 <HAL_MspInit+0x98>)
 80099b0:	4b1d      	ldr	r3, [pc, #116]	; (8009a28 <HAL_MspInit+0x98>)
 80099b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80099b4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80099b8:	6453      	str	r3, [r2, #68]	; 0x44
 80099ba:	4b1b      	ldr	r3, [pc, #108]	; (8009a28 <HAL_MspInit+0x98>)
 80099bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80099be:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80099c2:	603b      	str	r3, [r7, #0]
 80099c4:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80099c6:	2003      	movs	r0, #3
 80099c8:	f7f9 fc00 	bl	80031cc <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/
  /* MemoryManagement_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(MemoryManagement_IRQn, 0, 0);
 80099cc:	2200      	movs	r2, #0
 80099ce:	2100      	movs	r1, #0
 80099d0:	f06f 000b 	mvn.w	r0, #11
 80099d4:	f7f9 fc05 	bl	80031e2 <HAL_NVIC_SetPriority>
  /* BusFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(BusFault_IRQn, 0, 0);
 80099d8:	2200      	movs	r2, #0
 80099da:	2100      	movs	r1, #0
 80099dc:	f06f 000a 	mvn.w	r0, #10
 80099e0:	f7f9 fbff 	bl	80031e2 <HAL_NVIC_SetPriority>
  /* UsageFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(UsageFault_IRQn, 0, 0);
 80099e4:	2200      	movs	r2, #0
 80099e6:	2100      	movs	r1, #0
 80099e8:	f06f 0009 	mvn.w	r0, #9
 80099ec:	f7f9 fbf9 	bl	80031e2 <HAL_NVIC_SetPriority>
  /* SVCall_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SVCall_IRQn, 0, 0);
 80099f0:	2200      	movs	r2, #0
 80099f2:	2100      	movs	r1, #0
 80099f4:	f06f 0004 	mvn.w	r0, #4
 80099f8:	f7f9 fbf3 	bl	80031e2 <HAL_NVIC_SetPriority>
  /* DebugMonitor_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DebugMonitor_IRQn, 0, 0);
 80099fc:	2200      	movs	r2, #0
 80099fe:	2100      	movs	r1, #0
 8009a00:	f06f 0003 	mvn.w	r0, #3
 8009a04:	f7f9 fbed 	bl	80031e2 <HAL_NVIC_SetPriority>
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 0, 0);
 8009a08:	2200      	movs	r2, #0
 8009a0a:	2100      	movs	r1, #0
 8009a0c:	f06f 0001 	mvn.w	r0, #1
 8009a10:	f7f9 fbe7 	bl	80031e2 <HAL_NVIC_SetPriority>
  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 8009a14:	2200      	movs	r2, #0
 8009a16:	2100      	movs	r1, #0
 8009a18:	f04f 30ff 	mov.w	r0, #4294967295
 8009a1c:	f7f9 fbe1 	bl	80031e2 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8009a20:	bf00      	nop
 8009a22:	3708      	adds	r7, #8
 8009a24:	46bd      	mov	sp, r7
 8009a26:	bd80      	pop	{r7, pc}
 8009a28:	40023800 	.word	0x40023800

08009a2c <HAL_CRC_MspInit>:

void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8009a2c:	b480      	push	{r7}
 8009a2e:	b085      	sub	sp, #20
 8009a30:	af00      	add	r7, sp, #0
 8009a32:	6078      	str	r0, [r7, #4]

  if(hcrc->Instance==CRC)
 8009a34:	687b      	ldr	r3, [r7, #4]
 8009a36:	681b      	ldr	r3, [r3, #0]
 8009a38:	4a0a      	ldr	r2, [pc, #40]	; (8009a64 <HAL_CRC_MspInit+0x38>)
 8009a3a:	4293      	cmp	r3, r2
 8009a3c:	d10b      	bne.n	8009a56 <HAL_CRC_MspInit+0x2a>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8009a3e:	4a0a      	ldr	r2, [pc, #40]	; (8009a68 <HAL_CRC_MspInit+0x3c>)
 8009a40:	4b09      	ldr	r3, [pc, #36]	; (8009a68 <HAL_CRC_MspInit+0x3c>)
 8009a42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009a44:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8009a48:	6313      	str	r3, [r2, #48]	; 0x30
 8009a4a:	4b07      	ldr	r3, [pc, #28]	; (8009a68 <HAL_CRC_MspInit+0x3c>)
 8009a4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009a4e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8009a52:	60fb      	str	r3, [r7, #12]
 8009a54:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 8009a56:	bf00      	nop
 8009a58:	3714      	adds	r7, #20
 8009a5a:	46bd      	mov	sp, r7
 8009a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a60:	4770      	bx	lr
 8009a62:	bf00      	nop
 8009a64:	40023000 	.word	0x40023000
 8009a68:	40023800 	.word	0x40023800

08009a6c <HAL_DMA2D_MspInit>:
  }

}

void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* hdma2d)
{
 8009a6c:	b580      	push	{r7, lr}
 8009a6e:	b084      	sub	sp, #16
 8009a70:	af00      	add	r7, sp, #0
 8009a72:	6078      	str	r0, [r7, #4]

  if(hdma2d->Instance==DMA2D)
 8009a74:	687b      	ldr	r3, [r7, #4]
 8009a76:	681b      	ldr	r3, [r3, #0]
 8009a78:	4a0d      	ldr	r2, [pc, #52]	; (8009ab0 <HAL_DMA2D_MspInit+0x44>)
 8009a7a:	4293      	cmp	r3, r2
 8009a7c:	d113      	bne.n	8009aa6 <HAL_DMA2D_MspInit+0x3a>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8009a7e:	4a0d      	ldr	r2, [pc, #52]	; (8009ab4 <HAL_DMA2D_MspInit+0x48>)
 8009a80:	4b0c      	ldr	r3, [pc, #48]	; (8009ab4 <HAL_DMA2D_MspInit+0x48>)
 8009a82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009a84:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8009a88:	6313      	str	r3, [r2, #48]	; 0x30
 8009a8a:	4b0a      	ldr	r3, [pc, #40]	; (8009ab4 <HAL_DMA2D_MspInit+0x48>)
 8009a8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009a8e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8009a92:	60fb      	str	r3, [r7, #12]
 8009a94:	68fb      	ldr	r3, [r7, #12]
    /* DMA2D interrupt Init */
    HAL_NVIC_SetPriority(DMA2D_IRQn, 15, 0);
 8009a96:	2200      	movs	r2, #0
 8009a98:	210f      	movs	r1, #15
 8009a9a:	205a      	movs	r0, #90	; 0x5a
 8009a9c:	f7f9 fba1 	bl	80031e2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 8009aa0:	205a      	movs	r0, #90	; 0x5a
 8009aa2:	f7f9 fbba 	bl	800321a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DMA2D_MspInit 1 */

  /* USER CODE END DMA2D_MspInit 1 */
  }

}
 8009aa6:	bf00      	nop
 8009aa8:	3710      	adds	r7, #16
 8009aaa:	46bd      	mov	sp, r7
 8009aac:	bd80      	pop	{r7, pc}
 8009aae:	bf00      	nop
 8009ab0:	4002b000 	.word	0x4002b000
 8009ab4:	40023800 	.word	0x40023800

08009ab8 <HAL_LTDC_MspInit>:
  }

}

void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 8009ab8:	b580      	push	{r7, lr}
 8009aba:	b088      	sub	sp, #32
 8009abc:	af00      	add	r7, sp, #0
 8009abe:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
  if(hltdc->Instance==LTDC)
 8009ac0:	687b      	ldr	r3, [r7, #4]
 8009ac2:	681b      	ldr	r3, [r3, #0]
 8009ac4:	4a3a      	ldr	r2, [pc, #232]	; (8009bb0 <HAL_LTDC_MspInit+0xf8>)
 8009ac6:	4293      	cmp	r3, r2
 8009ac8:	d16e      	bne.n	8009ba8 <HAL_LTDC_MspInit+0xf0>
  {
  /* USER CODE BEGIN LTDC_MspInit 0 */

  /* USER CODE END LTDC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 8009aca:	4a3a      	ldr	r2, [pc, #232]	; (8009bb4 <HAL_LTDC_MspInit+0xfc>)
 8009acc:	4b39      	ldr	r3, [pc, #228]	; (8009bb4 <HAL_LTDC_MspInit+0xfc>)
 8009ace:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009ad0:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8009ad4:	6453      	str	r3, [r2, #68]	; 0x44
 8009ad6:	4b37      	ldr	r3, [pc, #220]	; (8009bb4 <HAL_LTDC_MspInit+0xfc>)
 8009ad8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009ada:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8009ade:	60bb      	str	r3, [r7, #8]
 8009ae0:	68bb      	ldr	r3, [r7, #8]
    PJ3     ------> LTDC_R4
    PJ2     ------> LTDC_R3
    PJ0     ------> LTDC_R1
    PJ1     ------> LTDC_R2 
    */
    GPIO_InitStruct.Pin = LCD_B0_Pin;
 8009ae2:	2310      	movs	r3, #16
 8009ae4:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009ae6:	2302      	movs	r3, #2
 8009ae8:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009aea:	2300      	movs	r3, #0
 8009aec:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8009aee:	2303      	movs	r3, #3
 8009af0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8009af2:	230e      	movs	r3, #14
 8009af4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(LCD_B0_GPIO_Port, &GPIO_InitStruct);
 8009af6:	f107 030c 	add.w	r3, r7, #12
 8009afa:	4619      	mov	r1, r3
 8009afc:	482e      	ldr	r0, [pc, #184]	; (8009bb8 <HAL_LTDC_MspInit+0x100>)
 8009afe:	f7fa fa13 	bl	8003f28 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_B1_Pin|LCD_B2_Pin|LCD_B3_Pin|LCD_G4_Pin 
 8009b02:	f64e 73ff 	movw	r3, #61439	; 0xefff
 8009b06:	60fb      	str	r3, [r7, #12]
                          |LCD_G1_Pin|LCD_G3_Pin|LCD_G0_Pin|LCD_G2_Pin 
                          |LCD_R7_Pin|LCD_R5_Pin|LCD_R6_Pin|LCD_R4_Pin 
                          |LCD_R3_Pin|LCD_R1_Pin|LCD_R2_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009b08:	2302      	movs	r3, #2
 8009b0a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009b0c:	2300      	movs	r3, #0
 8009b0e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8009b10:	2303      	movs	r3, #3
 8009b12:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8009b14:	230e      	movs	r3, #14
 8009b16:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 8009b18:	f107 030c 	add.w	r3, r7, #12
 8009b1c:	4619      	mov	r1, r3
 8009b1e:	4827      	ldr	r0, [pc, #156]	; (8009bbc <HAL_LTDC_MspInit+0x104>)
 8009b20:	f7fa fa02 	bl	8003f28 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_DE_Pin|LCD_B7_Pin|LCD_B6_Pin|LCD_B5_Pin 
 8009b24:	23f7      	movs	r3, #247	; 0xf7
 8009b26:	60fb      	str	r3, [r7, #12]
                          |LCD_G6_Pin|LCD_G7_Pin|LCD_G5_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009b28:	2302      	movs	r3, #2
 8009b2a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009b2c:	2300      	movs	r3, #0
 8009b2e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8009b30:	2303      	movs	r3, #3
 8009b32:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8009b34:	230e      	movs	r3, #14
 8009b36:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 8009b38:	f107 030c 	add.w	r3, r7, #12
 8009b3c:	4619      	mov	r1, r3
 8009b3e:	4820      	ldr	r0, [pc, #128]	; (8009bc0 <HAL_LTDC_MspInit+0x108>)
 8009b40:	f7fa f9f2 	bl	8003f28 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_B4_Pin;
 8009b44:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009b48:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009b4a:	2302      	movs	r3, #2
 8009b4c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009b4e:	2300      	movs	r3, #0
 8009b50:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8009b52:	2303      	movs	r3, #3
 8009b54:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8009b56:	2309      	movs	r3, #9
 8009b58:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(LCD_B4_GPIO_Port, &GPIO_InitStruct);
 8009b5a:	f107 030c 	add.w	r3, r7, #12
 8009b5e:	4619      	mov	r1, r3
 8009b60:	4818      	ldr	r0, [pc, #96]	; (8009bc4 <HAL_LTDC_MspInit+0x10c>)
 8009b62:	f7fa f9e1 	bl	8003f28 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_HSYNC_Pin|LCD_VSYNC_Pin|LCD_R0_Pin|LCD_CLK_Pin;
 8009b66:	f44f 4346 	mov.w	r3, #50688	; 0xc600
 8009b6a:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009b6c:	2302      	movs	r3, #2
 8009b6e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009b70:	2300      	movs	r3, #0
 8009b72:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8009b74:	2303      	movs	r3, #3
 8009b76:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8009b78:	230e      	movs	r3, #14
 8009b7a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8009b7c:	f107 030c 	add.w	r3, r7, #12
 8009b80:	4619      	mov	r1, r3
 8009b82:	4811      	ldr	r0, [pc, #68]	; (8009bc8 <HAL_LTDC_MspInit+0x110>)
 8009b84:	f7fa f9d0 	bl	8003f28 <HAL_GPIO_Init>

    /* LTDC interrupt Init */
    HAL_NVIC_SetPriority(LTDC_IRQn, 15, 0);
 8009b88:	2200      	movs	r2, #0
 8009b8a:	210f      	movs	r1, #15
 8009b8c:	2058      	movs	r0, #88	; 0x58
 8009b8e:	f7f9 fb28 	bl	80031e2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LTDC_IRQn);
 8009b92:	2058      	movs	r0, #88	; 0x58
 8009b94:	f7f9 fb41 	bl	800321a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(LTDC_ER_IRQn, 0, 0);
 8009b98:	2200      	movs	r2, #0
 8009b9a:	2100      	movs	r1, #0
 8009b9c:	2059      	movs	r0, #89	; 0x59
 8009b9e:	f7f9 fb20 	bl	80031e2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LTDC_ER_IRQn);
 8009ba2:	2059      	movs	r0, #89	; 0x59
 8009ba4:	f7f9 fb39 	bl	800321a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }

}
 8009ba8:	bf00      	nop
 8009baa:	3720      	adds	r7, #32
 8009bac:	46bd      	mov	sp, r7
 8009bae:	bd80      	pop	{r7, pc}
 8009bb0:	40016800 	.word	0x40016800
 8009bb4:	40023800 	.word	0x40023800
 8009bb8:	40021000 	.word	0x40021000
 8009bbc:	40022400 	.word	0x40022400
 8009bc0:	40022800 	.word	0x40022800
 8009bc4:	40021800 	.word	0x40021800
 8009bc8:	40022000 	.word	0x40022000

08009bcc <HAL_TIM_Base_MspInit>:
  }

}

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8009bcc:	b480      	push	{r7}
 8009bce:	b087      	sub	sp, #28
 8009bd0:	af00      	add	r7, sp, #0
 8009bd2:	6078      	str	r0, [r7, #4]

  if(htim_base->Instance==TIM1)
 8009bd4:	687b      	ldr	r3, [r7, #4]
 8009bd6:	681b      	ldr	r3, [r3, #0]
 8009bd8:	4a1c      	ldr	r2, [pc, #112]	; (8009c4c <HAL_TIM_Base_MspInit+0x80>)
 8009bda:	4293      	cmp	r3, r2
 8009bdc:	d10c      	bne.n	8009bf8 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8009bde:	4a1c      	ldr	r2, [pc, #112]	; (8009c50 <HAL_TIM_Base_MspInit+0x84>)
 8009be0:	4b1b      	ldr	r3, [pc, #108]	; (8009c50 <HAL_TIM_Base_MspInit+0x84>)
 8009be2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009be4:	f043 0301 	orr.w	r3, r3, #1
 8009be8:	6453      	str	r3, [r2, #68]	; 0x44
 8009bea:	4b19      	ldr	r3, [pc, #100]	; (8009c50 <HAL_TIM_Base_MspInit+0x84>)
 8009bec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009bee:	f003 0301 	and.w	r3, r3, #1
 8009bf2:	617b      	str	r3, [r7, #20]
 8009bf4:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8009bf6:	e022      	b.n	8009c3e <HAL_TIM_Base_MspInit+0x72>
  else if(htim_base->Instance==TIM2)
 8009bf8:	687b      	ldr	r3, [r7, #4]
 8009bfa:	681b      	ldr	r3, [r3, #0]
 8009bfc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009c00:	d10c      	bne.n	8009c1c <HAL_TIM_Base_MspInit+0x50>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8009c02:	4a13      	ldr	r2, [pc, #76]	; (8009c50 <HAL_TIM_Base_MspInit+0x84>)
 8009c04:	4b12      	ldr	r3, [pc, #72]	; (8009c50 <HAL_TIM_Base_MspInit+0x84>)
 8009c06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009c08:	f043 0301 	orr.w	r3, r3, #1
 8009c0c:	6413      	str	r3, [r2, #64]	; 0x40
 8009c0e:	4b10      	ldr	r3, [pc, #64]	; (8009c50 <HAL_TIM_Base_MspInit+0x84>)
 8009c10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009c12:	f003 0301 	and.w	r3, r3, #1
 8009c16:	613b      	str	r3, [r7, #16]
 8009c18:	693b      	ldr	r3, [r7, #16]
}
 8009c1a:	e010      	b.n	8009c3e <HAL_TIM_Base_MspInit+0x72>
  else if(htim_base->Instance==TIM3)
 8009c1c:	687b      	ldr	r3, [r7, #4]
 8009c1e:	681b      	ldr	r3, [r3, #0]
 8009c20:	4a0c      	ldr	r2, [pc, #48]	; (8009c54 <HAL_TIM_Base_MspInit+0x88>)
 8009c22:	4293      	cmp	r3, r2
 8009c24:	d10b      	bne.n	8009c3e <HAL_TIM_Base_MspInit+0x72>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8009c26:	4a0a      	ldr	r2, [pc, #40]	; (8009c50 <HAL_TIM_Base_MspInit+0x84>)
 8009c28:	4b09      	ldr	r3, [pc, #36]	; (8009c50 <HAL_TIM_Base_MspInit+0x84>)
 8009c2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009c2c:	f043 0302 	orr.w	r3, r3, #2
 8009c30:	6413      	str	r3, [r2, #64]	; 0x40
 8009c32:	4b07      	ldr	r3, [pc, #28]	; (8009c50 <HAL_TIM_Base_MspInit+0x84>)
 8009c34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009c36:	f003 0302 	and.w	r3, r3, #2
 8009c3a:	60fb      	str	r3, [r7, #12]
 8009c3c:	68fb      	ldr	r3, [r7, #12]
}
 8009c3e:	bf00      	nop
 8009c40:	371c      	adds	r7, #28
 8009c42:	46bd      	mov	sp, r7
 8009c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c48:	4770      	bx	lr
 8009c4a:	bf00      	nop
 8009c4c:	40010000 	.word	0x40010000
 8009c50:	40023800 	.word	0x40023800
 8009c54:	40000400 	.word	0x40000400

08009c58 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8009c58:	b580      	push	{r7, lr}
 8009c5a:	b088      	sub	sp, #32
 8009c5c:	af00      	add	r7, sp, #0
 8009c5e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
  if(htim->Instance==TIM1)
 8009c60:	687b      	ldr	r3, [r7, #4]
 8009c62:	681b      	ldr	r3, [r3, #0]
 8009c64:	4a17      	ldr	r2, [pc, #92]	; (8009cc4 <HAL_TIM_MspPostInit+0x6c>)
 8009c66:	4293      	cmp	r3, r2
 8009c68:	d111      	bne.n	8009c8e <HAL_TIM_MspPostInit+0x36>

  /* USER CODE END TIM1_MspPostInit 0 */
    /**TIM1 GPIO Configuration    
    PA8     ------> TIM1_CH1 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8009c6a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009c6e:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009c70:	2302      	movs	r3, #2
 8009c72:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009c74:	2300      	movs	r3, #0
 8009c76:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8009c78:	2300      	movs	r3, #0
 8009c7a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8009c7c:	2301      	movs	r3, #1
 8009c7e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8009c80:	f107 030c 	add.w	r3, r7, #12
 8009c84:	4619      	mov	r1, r3
 8009c86:	4810      	ldr	r0, [pc, #64]	; (8009cc8 <HAL_TIM_MspPostInit+0x70>)
 8009c88:	f7fa f94e 	bl	8003f28 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8009c8c:	e015      	b.n	8009cba <HAL_TIM_MspPostInit+0x62>
  else if(htim->Instance==TIM2)
 8009c8e:	687b      	ldr	r3, [r7, #4]
 8009c90:	681b      	ldr	r3, [r3, #0]
 8009c92:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009c96:	d110      	bne.n	8009cba <HAL_TIM_MspPostInit+0x62>
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8009c98:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009c9c:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009c9e:	2302      	movs	r3, #2
 8009ca0:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009ca2:	2300      	movs	r3, #0
 8009ca4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8009ca6:	2300      	movs	r3, #0
 8009ca8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8009caa:	2301      	movs	r3, #1
 8009cac:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8009cae:	f107 030c 	add.w	r3, r7, #12
 8009cb2:	4619      	mov	r1, r3
 8009cb4:	4804      	ldr	r0, [pc, #16]	; (8009cc8 <HAL_TIM_MspPostInit+0x70>)
 8009cb6:	f7fa f937 	bl	8003f28 <HAL_GPIO_Init>
}
 8009cba:	bf00      	nop
 8009cbc:	3720      	adds	r7, #32
 8009cbe:	46bd      	mov	sp, r7
 8009cc0:	bd80      	pop	{r7, pc}
 8009cc2:	bf00      	nop
 8009cc4:	40010000 	.word	0x40010000
 8009cc8:	40020000 	.word	0x40020000

08009ccc <HAL_UART_MspInit>:
  }

}

void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8009ccc:	b580      	push	{r7, lr}
 8009cce:	b088      	sub	sp, #32
 8009cd0:	af00      	add	r7, sp, #0
 8009cd2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
  if(huart->Instance==USART1)
 8009cd4:	687b      	ldr	r3, [r7, #4]
 8009cd6:	681b      	ldr	r3, [r3, #0]
 8009cd8:	4a11      	ldr	r2, [pc, #68]	; (8009d20 <HAL_UART_MspInit+0x54>)
 8009cda:	4293      	cmp	r3, r2
 8009cdc:	d11b      	bne.n	8009d16 <HAL_UART_MspInit+0x4a>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8009cde:	4a11      	ldr	r2, [pc, #68]	; (8009d24 <HAL_UART_MspInit+0x58>)
 8009ce0:	4b10      	ldr	r3, [pc, #64]	; (8009d24 <HAL_UART_MspInit+0x58>)
 8009ce2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009ce4:	f043 0310 	orr.w	r3, r3, #16
 8009ce8:	6453      	str	r3, [r2, #68]	; 0x44
 8009cea:	4b0e      	ldr	r3, [pc, #56]	; (8009d24 <HAL_UART_MspInit+0x58>)
 8009cec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009cee:	f003 0310 	and.w	r3, r3, #16
 8009cf2:	60bb      	str	r3, [r7, #8]
 8009cf4:	68bb      	ldr	r3, [r7, #8]
  
    /**USART1 GPIO Configuration    
    PB7     ------> USART1_RX
    PB6     ------> USART1_TX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_6;
 8009cf6:	23c0      	movs	r3, #192	; 0xc0
 8009cf8:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009cfa:	2302      	movs	r3, #2
 8009cfc:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009cfe:	2300      	movs	r3, #0
 8009d00:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8009d02:	2303      	movs	r3, #3
 8009d04:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8009d06:	2307      	movs	r3, #7
 8009d08:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8009d0a:	f107 030c 	add.w	r3, r7, #12
 8009d0e:	4619      	mov	r1, r3
 8009d10:	4805      	ldr	r0, [pc, #20]	; (8009d28 <HAL_UART_MspInit+0x5c>)
 8009d12:	f7fa f909 	bl	8003f28 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8009d16:	bf00      	nop
 8009d18:	3720      	adds	r7, #32
 8009d1a:	46bd      	mov	sp, r7
 8009d1c:	bd80      	pop	{r7, pc}
 8009d1e:	bf00      	nop
 8009d20:	40011000 	.word	0x40011000
 8009d24:	40023800 	.word	0x40023800
 8009d28:	40020400 	.word	0x40020400

08009d2c <HAL_FMC_MspInit>:

}

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 8009d2c:	b580      	push	{r7, lr}
 8009d2e:	b086      	sub	sp, #24
 8009d30:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct;
  if (FMC_Initialized) {
 8009d32:	4b3b      	ldr	r3, [pc, #236]	; (8009e20 <HAL_FMC_MspInit+0xf4>)
 8009d34:	681b      	ldr	r3, [r3, #0]
 8009d36:	2b00      	cmp	r3, #0
 8009d38:	d16d      	bne.n	8009e16 <HAL_FMC_MspInit+0xea>
    return;
  }
  FMC_Initialized = 1;
 8009d3a:	4b39      	ldr	r3, [pc, #228]	; (8009e20 <HAL_FMC_MspInit+0xf4>)
 8009d3c:	2201      	movs	r2, #1
 8009d3e:	601a      	str	r2, [r3, #0]
  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 8009d40:	4a38      	ldr	r2, [pc, #224]	; (8009e24 <HAL_FMC_MspInit+0xf8>)
 8009d42:	4b38      	ldr	r3, [pc, #224]	; (8009e24 <HAL_FMC_MspInit+0xf8>)
 8009d44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009d46:	f043 0301 	orr.w	r3, r3, #1
 8009d4a:	6393      	str	r3, [r2, #56]	; 0x38
 8009d4c:	4b35      	ldr	r3, [pc, #212]	; (8009e24 <HAL_FMC_MspInit+0xf8>)
 8009d4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009d50:	f003 0301 	and.w	r3, r3, #1
 8009d54:	603b      	str	r3, [r7, #0]
 8009d56:	683b      	ldr	r3, [r7, #0]
  PE10   ------> FMC_D7
  PE12   ------> FMC_D9
  PE15   ------> FMC_D12
  PE13   ------> FMC_D10
  */
  GPIO_InitStruct.Pin = FMC_NBL1_Pin|FMC_NBL0_Pin|FMC_D5_Pin|FMC_D6_Pin 
 8009d58:	f64f 7383 	movw	r3, #65411	; 0xff83
 8009d5c:	607b      	str	r3, [r7, #4]
                          |FMC_D8_Pin|FMC_D11_Pin|FMC_D4_Pin|FMC_D7_Pin 
                          |FMC_D9_Pin|FMC_D12_Pin|FMC_D10_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009d5e:	2302      	movs	r3, #2
 8009d60:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009d62:	2300      	movs	r3, #0
 8009d64:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8009d66:	2303      	movs	r3, #3
 8009d68:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8009d6a:	230c      	movs	r3, #12
 8009d6c:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8009d6e:	1d3b      	adds	r3, r7, #4
 8009d70:	4619      	mov	r1, r3
 8009d72:	482d      	ldr	r0, [pc, #180]	; (8009e28 <HAL_FMC_MspInit+0xfc>)
 8009d74:	f7fa f8d8 	bl	8003f28 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_SDNCAS_Pin|FMC_SDCLK_Pin|FMC_A11_Pin|FMC_A10_Pin 
 8009d78:	f248 1333 	movw	r3, #33075	; 0x8133
 8009d7c:	607b      	str	r3, [r7, #4]
                          |FMC_BA1_Pin|FMC_BA0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009d7e:	2302      	movs	r3, #2
 8009d80:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009d82:	2300      	movs	r3, #0
 8009d84:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8009d86:	2303      	movs	r3, #3
 8009d88:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8009d8a:	230c      	movs	r3, #12
 8009d8c:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8009d8e:	1d3b      	adds	r3, r7, #4
 8009d90:	4619      	mov	r1, r3
 8009d92:	4826      	ldr	r0, [pc, #152]	; (8009e2c <HAL_FMC_MspInit+0x100>)
 8009d94:	f7fa f8c8 	bl	8003f28 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_D2_Pin|FMC_D3_Pin|FMC_D1_Pin|FMC_D15_Pin 
 8009d98:	f24c 7303 	movw	r3, #50947	; 0xc703
 8009d9c:	607b      	str	r3, [r7, #4]
                          |FMC_D0_Pin|FMC_D14_Pin|FMC_D13_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009d9e:	2302      	movs	r3, #2
 8009da0:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009da2:	2300      	movs	r3, #0
 8009da4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8009da6:	2303      	movs	r3, #3
 8009da8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8009daa:	230c      	movs	r3, #12
 8009dac:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8009dae:	1d3b      	adds	r3, r7, #4
 8009db0:	4619      	mov	r1, r3
 8009db2:	481f      	ldr	r0, [pc, #124]	; (8009e30 <HAL_FMC_MspInit+0x104>)
 8009db4:	f7fa f8b8 	bl	8003f28 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_A0_Pin|FMC_A1_Pin|FMC_A2_Pin|FMC_A3_Pin 
 8009db8:	f64f 033f 	movw	r3, #63551	; 0xf83f
 8009dbc:	607b      	str	r3, [r7, #4]
                          |FMC_A4_Pin|FMC_A5_Pin|FMC_A6_Pin|FMC_A9_Pin 
                          |FMC_A7_Pin|FMC_A8_Pin|FMC_SDNRAS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009dbe:	2302      	movs	r3, #2
 8009dc0:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009dc2:	2300      	movs	r3, #0
 8009dc4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8009dc6:	2303      	movs	r3, #3
 8009dc8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8009dca:	230c      	movs	r3, #12
 8009dcc:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8009dce:	1d3b      	adds	r3, r7, #4
 8009dd0:	4619      	mov	r1, r3
 8009dd2:	4818      	ldr	r0, [pc, #96]	; (8009e34 <HAL_FMC_MspInit+0x108>)
 8009dd4:	f7fa f8a8 	bl	8003f28 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_5|FMC_SDNE0_Pin;
 8009dd8:	2328      	movs	r3, #40	; 0x28
 8009dda:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009ddc:	2302      	movs	r3, #2
 8009dde:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009de0:	2300      	movs	r3, #0
 8009de2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8009de4:	2303      	movs	r3, #3
 8009de6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8009de8:	230c      	movs	r3, #12
 8009dea:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8009dec:	1d3b      	adds	r3, r7, #4
 8009dee:	4619      	mov	r1, r3
 8009df0:	4811      	ldr	r0, [pc, #68]	; (8009e38 <HAL_FMC_MspInit+0x10c>)
 8009df2:	f7fa f899 	bl	8003f28 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_SDCKE0_Pin;
 8009df6:	2308      	movs	r3, #8
 8009df8:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009dfa:	2302      	movs	r3, #2
 8009dfc:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009dfe:	2300      	movs	r3, #0
 8009e00:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8009e02:	2303      	movs	r3, #3
 8009e04:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8009e06:	230c      	movs	r3, #12
 8009e08:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(FMC_SDCKE0_GPIO_Port, &GPIO_InitStruct);
 8009e0a:	1d3b      	adds	r3, r7, #4
 8009e0c:	4619      	mov	r1, r3
 8009e0e:	480b      	ldr	r0, [pc, #44]	; (8009e3c <HAL_FMC_MspInit+0x110>)
 8009e10:	f7fa f88a 	bl	8003f28 <HAL_GPIO_Init>
 8009e14:	e000      	b.n	8009e18 <HAL_FMC_MspInit+0xec>
    return;
 8009e16:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 8009e18:	3718      	adds	r7, #24
 8009e1a:	46bd      	mov	sp, r7
 8009e1c:	bd80      	pop	{r7, pc}
 8009e1e:	bf00      	nop
 8009e20:	2002cba4 	.word	0x2002cba4
 8009e24:	40023800 	.word	0x40023800
 8009e28:	40021000 	.word	0x40021000
 8009e2c:	40021800 	.word	0x40021800
 8009e30:	40020c00 	.word	0x40020c00
 8009e34:	40021400 	.word	0x40021400
 8009e38:	40021c00 	.word	0x40021c00
 8009e3c:	40020800 	.word	0x40020800

08009e40 <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* hsdram){
 8009e40:	b580      	push	{r7, lr}
 8009e42:	b082      	sub	sp, #8
 8009e44:	af00      	add	r7, sp, #0
 8009e46:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 8009e48:	f7ff ff70 	bl	8009d2c <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 8009e4c:	bf00      	nop
 8009e4e:	3708      	adds	r7, #8
 8009e50:	46bd      	mov	sp, r7
 8009e52:	bd80      	pop	{r7, pc}

08009e54 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priorty.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8009e54:	b580      	push	{r7, lr}
 8009e56:	b08c      	sub	sp, #48	; 0x30
 8009e58:	af00      	add	r7, sp, #0
 8009e5a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8009e5c:	2300      	movs	r3, #0
 8009e5e:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8009e60:	2300      	movs	r3, #0
 8009e62:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0); 
 8009e64:	2200      	movs	r2, #0
 8009e66:	6879      	ldr	r1, [r7, #4]
 8009e68:	2036      	movs	r0, #54	; 0x36
 8009e6a:	f7f9 f9ba 	bl	80031e2 <HAL_NVIC_SetPriority>
  
  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn); 
 8009e6e:	2036      	movs	r0, #54	; 0x36
 8009e70:	f7f9 f9d3 	bl	800321a <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8009e74:	4a1f      	ldr	r2, [pc, #124]	; (8009ef4 <HAL_InitTick+0xa0>)
 8009e76:	4b1f      	ldr	r3, [pc, #124]	; (8009ef4 <HAL_InitTick+0xa0>)
 8009e78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009e7a:	f043 0310 	orr.w	r3, r3, #16
 8009e7e:	6413      	str	r3, [r2, #64]	; 0x40
 8009e80:	4b1c      	ldr	r3, [pc, #112]	; (8009ef4 <HAL_InitTick+0xa0>)
 8009e82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009e84:	f003 0310 	and.w	r3, r3, #16
 8009e88:	60fb      	str	r3, [r7, #12]
 8009e8a:	68fb      	ldr	r3, [r7, #12]
  
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8009e8c:	f107 0210 	add.w	r2, r7, #16
 8009e90:	f107 0314 	add.w	r3, r7, #20
 8009e94:	4611      	mov	r1, r2
 8009e96:	4618      	mov	r0, r3
 8009e98:	f7fb ff9e 	bl	8005dd8 <HAL_RCC_GetClockConfig>
  
  /* Compute TIM6 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8009e9c:	f7fb ff74 	bl	8005d88 <HAL_RCC_GetPCLK1Freq>
 8009ea0:	4603      	mov	r3, r0
 8009ea2:	005b      	lsls	r3, r3, #1
 8009ea4:	62fb      	str	r3, [r7, #44]	; 0x2c
   
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 8009ea6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009ea8:	4a13      	ldr	r2, [pc, #76]	; (8009ef8 <HAL_InitTick+0xa4>)
 8009eaa:	fba2 2303 	umull	r2, r3, r2, r3
 8009eae:	0c9b      	lsrs	r3, r3, #18
 8009eb0:	3b01      	subs	r3, #1
 8009eb2:	62bb      	str	r3, [r7, #40]	; 0x28
  
  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8009eb4:	4b11      	ldr	r3, [pc, #68]	; (8009efc <HAL_InitTick+0xa8>)
 8009eb6:	4a12      	ldr	r2, [pc, #72]	; (8009f00 <HAL_InitTick+0xac>)
 8009eb8:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000 / 1000) - 1;
 8009eba:	4b10      	ldr	r3, [pc, #64]	; (8009efc <HAL_InitTick+0xa8>)
 8009ebc:	f240 32e7 	movw	r2, #999	; 0x3e7
 8009ec0:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8009ec2:	4a0e      	ldr	r2, [pc, #56]	; (8009efc <HAL_InitTick+0xa8>)
 8009ec4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009ec6:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8009ec8:	4b0c      	ldr	r3, [pc, #48]	; (8009efc <HAL_InitTick+0xa8>)
 8009eca:	2200      	movs	r2, #0
 8009ecc:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8009ece:	4b0b      	ldr	r3, [pc, #44]	; (8009efc <HAL_InitTick+0xa8>)
 8009ed0:	2200      	movs	r2, #0
 8009ed2:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8009ed4:	4809      	ldr	r0, [pc, #36]	; (8009efc <HAL_InitTick+0xa8>)
 8009ed6:	f7fc fc1e 	bl	8006716 <HAL_TIM_Base_Init>
 8009eda:	4603      	mov	r3, r0
 8009edc:	2b00      	cmp	r3, #0
 8009ede:	d104      	bne.n	8009eea <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8009ee0:	4806      	ldr	r0, [pc, #24]	; (8009efc <HAL_InitTick+0xa8>)
 8009ee2:	f7fc fc5e 	bl	80067a2 <HAL_TIM_Base_Start_IT>
 8009ee6:	4603      	mov	r3, r0
 8009ee8:	e000      	b.n	8009eec <HAL_InitTick+0x98>
  }
  
  /* Return function status */
  return HAL_ERROR;
 8009eea:	2301      	movs	r3, #1
}
 8009eec:	4618      	mov	r0, r3
 8009eee:	3730      	adds	r7, #48	; 0x30
 8009ef0:	46bd      	mov	sp, r7
 8009ef2:	bd80      	pop	{r7, pc}
 8009ef4:	40023800 	.word	0x40023800
 8009ef8:	431bde83 	.word	0x431bde83
 8009efc:	2002cf60 	.word	0x2002cf60
 8009f00:	40001000 	.word	0x40001000

08009f04 <SVC_Handler>:

/**
* @brief This function handles System service call via SWI instruction.
*/
void SVC_Handler(void)
{
 8009f04:	b480      	push	{r7}
 8009f06:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8009f08:	bf00      	nop
 8009f0a:	46bd      	mov	sp, r7
 8009f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f10:	4770      	bx	lr

08009f12 <DebugMon_Handler>:

/**
* @brief This function handles Debug monitor.
*/
void DebugMon_Handler(void)
{
 8009f12:	b480      	push	{r7}
 8009f14:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8009f16:	bf00      	nop
 8009f18:	46bd      	mov	sp, r7
 8009f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f1e:	4770      	bx	lr

08009f20 <PendSV_Handler>:

/**
* @brief This function handles Pendable request for system service.
*/
void PendSV_Handler(void)
{
 8009f20:	b480      	push	{r7}
 8009f22:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8009f24:	bf00      	nop
 8009f26:	46bd      	mov	sp, r7
 8009f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f2c:	4770      	bx	lr

08009f2e <SysTick_Handler>:

/**
* @brief This function handles System tick timer.
*/
void SysTick_Handler(void)
{
 8009f2e:	b580      	push	{r7, lr}
 8009f30:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_SYSTICK_IRQHandler();
 8009f32:	f7f9 f9a9 	bl	8003288 <HAL_SYSTICK_IRQHandler>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8009f36:	bf00      	nop
 8009f38:	bd80      	pop	{r7, pc}
	...

08009f3c <TIM6_DAC_IRQHandler>:

/**
* @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
*/
void TIM6_DAC_IRQHandler(void)
{
 8009f3c:	b580      	push	{r7, lr}
 8009f3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8009f40:	4802      	ldr	r0, [pc, #8]	; (8009f4c <TIM6_DAC_IRQHandler+0x10>)
 8009f42:	f7fc fcb3 	bl	80068ac <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8009f46:	bf00      	nop
 8009f48:	bd80      	pop	{r7, pc}
 8009f4a:	bf00      	nop
 8009f4c:	2002cf60 	.word	0x2002cf60

08009f50 <LTDC_IRQHandler>:

/**
* @brief This function handles LTDC global interrupt.
*/
void LTDC_IRQHandler(void)
{
 8009f50:	b580      	push	{r7, lr}
 8009f52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LTDC_IRQn 0 */

  /* USER CODE END LTDC_IRQn 0 */
  HAL_LTDC_IRQHandler(&hltdc);
 8009f54:	4802      	ldr	r0, [pc, #8]	; (8009f60 <LTDC_IRQHandler+0x10>)
 8009f56:	f7fa ffef 	bl	8004f38 <HAL_LTDC_IRQHandler>
  /* USER CODE BEGIN LTDC_IRQn 1 */

  /* USER CODE END LTDC_IRQn 1 */
}
 8009f5a:	bf00      	nop
 8009f5c:	bd80      	pop	{r7, pc}
 8009f5e:	bf00      	nop
 8009f60:	2002cd04 	.word	0x2002cd04

08009f64 <LTDC_ER_IRQHandler>:

/**
* @brief This function handles LTDC global error interrupt.
*/
void LTDC_ER_IRQHandler(void)
{
 8009f64:	b580      	push	{r7, lr}
 8009f66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LTDC_ER_IRQn 0 */

  /* USER CODE END LTDC_ER_IRQn 0 */
  HAL_LTDC_IRQHandler(&hltdc);
 8009f68:	4802      	ldr	r0, [pc, #8]	; (8009f74 <LTDC_ER_IRQHandler+0x10>)
 8009f6a:	f7fa ffe5 	bl	8004f38 <HAL_LTDC_IRQHandler>
  /* USER CODE BEGIN LTDC_ER_IRQn 1 */

  /* USER CODE END LTDC_ER_IRQn 1 */
}
 8009f6e:	bf00      	nop
 8009f70:	bd80      	pop	{r7, pc}
 8009f72:	bf00      	nop
 8009f74:	2002cd04 	.word	0x2002cd04

08009f78 <DMA2D_IRQHandler>:

/**
* @brief This function handles DMA2D global interrupt.
*/
void DMA2D_IRQHandler(void)
{
 8009f78:	b580      	push	{r7, lr}
 8009f7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2D_IRQn 0 */

  /* USER CODE END DMA2D_IRQn 0 */
  HAL_DMA2D_IRQHandler(&hdma2d);
 8009f7c:	4802      	ldr	r0, [pc, #8]	; (8009f88 <DMA2D_IRQHandler+0x10>)
 8009f7e:	f7f9 fd88 	bl	8003a92 <HAL_DMA2D_IRQHandler>
  /* USER CODE BEGIN DMA2D_IRQn 1 */

  /* USER CODE END DMA2D_IRQn 1 */
}
 8009f82:	bf00      	nop
 8009f84:	bd80      	pop	{r7, pc}
 8009f86:	bf00      	nop
 8009f88:	2002ce7c 	.word	0x2002ce7c

08009f8c <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8009f8c:	b480      	push	{r7}
 8009f8e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8009f90:	4a15      	ldr	r2, [pc, #84]	; (8009fe8 <SystemInit+0x5c>)
 8009f92:	4b15      	ldr	r3, [pc, #84]	; (8009fe8 <SystemInit+0x5c>)
 8009f94:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009f98:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8009f9c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8009fa0:	4a12      	ldr	r2, [pc, #72]	; (8009fec <SystemInit+0x60>)
 8009fa2:	4b12      	ldr	r3, [pc, #72]	; (8009fec <SystemInit+0x60>)
 8009fa4:	681b      	ldr	r3, [r3, #0]
 8009fa6:	f043 0301 	orr.w	r3, r3, #1
 8009faa:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8009fac:	4b0f      	ldr	r3, [pc, #60]	; (8009fec <SystemInit+0x60>)
 8009fae:	2200      	movs	r2, #0
 8009fb0:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8009fb2:	490e      	ldr	r1, [pc, #56]	; (8009fec <SystemInit+0x60>)
 8009fb4:	4b0d      	ldr	r3, [pc, #52]	; (8009fec <SystemInit+0x60>)
 8009fb6:	681a      	ldr	r2, [r3, #0]
 8009fb8:	4b0d      	ldr	r3, [pc, #52]	; (8009ff0 <SystemInit+0x64>)
 8009fba:	4013      	ands	r3, r2
 8009fbc:	600b      	str	r3, [r1, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8009fbe:	4b0b      	ldr	r3, [pc, #44]	; (8009fec <SystemInit+0x60>)
 8009fc0:	4a0c      	ldr	r2, [pc, #48]	; (8009ff4 <SystemInit+0x68>)
 8009fc2:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8009fc4:	4a09      	ldr	r2, [pc, #36]	; (8009fec <SystemInit+0x60>)
 8009fc6:	4b09      	ldr	r3, [pc, #36]	; (8009fec <SystemInit+0x60>)
 8009fc8:	681b      	ldr	r3, [r3, #0]
 8009fca:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8009fce:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8009fd0:	4b06      	ldr	r3, [pc, #24]	; (8009fec <SystemInit+0x60>)
 8009fd2:	2200      	movs	r2, #0
 8009fd4:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8009fd6:	4b04      	ldr	r3, [pc, #16]	; (8009fe8 <SystemInit+0x5c>)
 8009fd8:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8009fdc:	609a      	str	r2, [r3, #8]
#endif
}
 8009fde:	bf00      	nop
 8009fe0:	46bd      	mov	sp, r7
 8009fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fe6:	4770      	bx	lr
 8009fe8:	e000ed00 	.word	0xe000ed00
 8009fec:	40023800 	.word	0x40023800
 8009ff0:	fef6ffff 	.word	0xfef6ffff
 8009ff4:	24003010 	.word	0x24003010

08009ff8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8009ff8:	f8df d034 	ldr.w	sp, [pc, #52]	; 800a030 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8009ffc:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8009ffe:	e003      	b.n	800a008 <LoopCopyDataInit>

0800a000 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 800a000:	4b0c      	ldr	r3, [pc, #48]	; (800a034 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800a002:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 800a004:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800a006:	3104      	adds	r1, #4

0800a008 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 800a008:	480b      	ldr	r0, [pc, #44]	; (800a038 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800a00a:	4b0c      	ldr	r3, [pc, #48]	; (800a03c <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 800a00c:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800a00e:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 800a010:	d3f6      	bcc.n	800a000 <CopyDataInit>
  ldr  r2, =_sbss
 800a012:	4a0b      	ldr	r2, [pc, #44]	; (800a040 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 800a014:	e002      	b.n	800a01c <LoopFillZerobss>

0800a016 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800a016:	2300      	movs	r3, #0
  str  r3, [r2], #4
 800a018:	f842 3b04 	str.w	r3, [r2], #4

0800a01c <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 800a01c:	4b09      	ldr	r3, [pc, #36]	; (800a044 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800a01e:	429a      	cmp	r2, r3
  bcc  FillZerobss
 800a020:	d3f9      	bcc.n	800a016 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800a022:	f7ff ffb3 	bl	8009f8c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800a026:	f000 f811 	bl	800a04c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800a02a:	f7fe faef 	bl	800860c <main>
  bx  lr    
 800a02e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800a030:	20050000 	.word	0x20050000
  ldr  r3, =_sidata
 800a034:	0800c0b8 	.word	0x0800c0b8
  ldr  r0, =_sdata
 800a038:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 800a03c:	2002c988 	.word	0x2002c988
  ldr  r2, =_sbss
 800a040:	2002c988 	.word	0x2002c988
  ldr  r3, = _ebss
 800a044:	2002cfa0 	.word	0x2002cfa0

0800a048 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800a048:	e7fe      	b.n	800a048 <ADC_IRQHandler>
	...

0800a04c <__libc_init_array>:
 800a04c:	b570      	push	{r4, r5, r6, lr}
 800a04e:	4e0d      	ldr	r6, [pc, #52]	; (800a084 <__libc_init_array+0x38>)
 800a050:	4c0d      	ldr	r4, [pc, #52]	; (800a088 <__libc_init_array+0x3c>)
 800a052:	1ba4      	subs	r4, r4, r6
 800a054:	10a4      	asrs	r4, r4, #2
 800a056:	2500      	movs	r5, #0
 800a058:	42a5      	cmp	r5, r4
 800a05a:	d109      	bne.n	800a070 <__libc_init_array+0x24>
 800a05c:	4e0b      	ldr	r6, [pc, #44]	; (800a08c <__libc_init_array+0x40>)
 800a05e:	4c0c      	ldr	r4, [pc, #48]	; (800a090 <__libc_init_array+0x44>)
 800a060:	f000 f818 	bl	800a094 <_init>
 800a064:	1ba4      	subs	r4, r4, r6
 800a066:	10a4      	asrs	r4, r4, #2
 800a068:	2500      	movs	r5, #0
 800a06a:	42a5      	cmp	r5, r4
 800a06c:	d105      	bne.n	800a07a <__libc_init_array+0x2e>
 800a06e:	bd70      	pop	{r4, r5, r6, pc}
 800a070:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800a074:	4798      	blx	r3
 800a076:	3501      	adds	r5, #1
 800a078:	e7ee      	b.n	800a058 <__libc_init_array+0xc>
 800a07a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800a07e:	4798      	blx	r3
 800a080:	3501      	adds	r5, #1
 800a082:	e7f2      	b.n	800a06a <__libc_init_array+0x1e>
 800a084:	0800c0b0 	.word	0x0800c0b0
 800a088:	0800c0b0 	.word	0x0800c0b0
 800a08c:	0800c0b0 	.word	0x0800c0b0
 800a090:	0800c0b4 	.word	0x0800c0b4

0800a094 <_init>:
 800a094:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a096:	bf00      	nop
 800a098:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a09a:	bc08      	pop	{r3}
 800a09c:	469e      	mov	lr, r3
 800a09e:	4770      	bx	lr

0800a0a0 <_fini>:
 800a0a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a0a2:	bf00      	nop
 800a0a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a0a6:	bc08      	pop	{r3}
 800a0a8:	469e      	mov	lr, r3
 800a0aa:	4770      	bx	lr
